
DEFAULT_APP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08001800  08001800  00000800  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010bc  0800190c  0800190c  0000090c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080029c8  080029c8  000019c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029ec  080029ec  0000200c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080029ec  080029ec  0000200c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080029ec  080029ec  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029ec  080029ec  000019ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080029f0  080029f0  000019f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080029f4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08002a00  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08002a00  0000202c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000028c8  00000000  00000000  00002035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e1e  00000000  00000000  000048fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003d0  00000000  00000000  00005720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002b8  00000000  00000000  00005af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001556f  00000000  00000000  00005da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004390  00000000  00000000  0001b317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000798d6  00000000  00000000  0001f6a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00098f7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d2c  00000000  00000000  00098fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00099cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800190c <__do_global_dtors_aux>:
 800190c:	b510      	push	{r4, lr}
 800190e:	4c05      	ldr	r4, [pc, #20]	@ (8001924 <__do_global_dtors_aux+0x18>)
 8001910:	7823      	ldrb	r3, [r4, #0]
 8001912:	b933      	cbnz	r3, 8001922 <__do_global_dtors_aux+0x16>
 8001914:	4b04      	ldr	r3, [pc, #16]	@ (8001928 <__do_global_dtors_aux+0x1c>)
 8001916:	b113      	cbz	r3, 800191e <__do_global_dtors_aux+0x12>
 8001918:	4804      	ldr	r0, [pc, #16]	@ (800192c <__do_global_dtors_aux+0x20>)
 800191a:	f3af 8000 	nop.w
 800191e:	2301      	movs	r3, #1
 8001920:	7023      	strb	r3, [r4, #0]
 8001922:	bd10      	pop	{r4, pc}
 8001924:	2000000c 	.word	0x2000000c
 8001928:	00000000 	.word	0x00000000
 800192c:	080029b0 	.word	0x080029b0

08001930 <frame_dummy>:
 8001930:	b508      	push	{r3, lr}
 8001932:	4b03      	ldr	r3, [pc, #12]	@ (8001940 <frame_dummy+0x10>)
 8001934:	b11b      	cbz	r3, 800193e <frame_dummy+0xe>
 8001936:	4903      	ldr	r1, [pc, #12]	@ (8001944 <frame_dummy+0x14>)
 8001938:	4803      	ldr	r0, [pc, #12]	@ (8001948 <frame_dummy+0x18>)
 800193a:	f3af 8000 	nop.w
 800193e:	bd08      	pop	{r3, pc}
 8001940:	00000000 	.word	0x00000000
 8001944:	20000010 	.word	0x20000010
 8001948:	080029b0 	.word	0x080029b0

0800194c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001950:	f000 f926 	bl	8001ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001954:	f000 f818 	bl	8001988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001958:	f000 f852 	bl	8001a00 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800195c:	2200      	movs	r2, #0
 800195e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001962:	4808      	ldr	r0, [pc, #32]	@ (8001984 <main+0x38>)
 8001964:	f000 fc02 	bl	800216c <HAL_GPIO_WritePin>
	  	  HAL_Delay(20);
 8001968:	2014      	movs	r0, #20
 800196a:	f000 f97b 	bl	8001c64 <HAL_Delay>
	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800196e:	2201      	movs	r2, #1
 8001970:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001974:	4803      	ldr	r0, [pc, #12]	@ (8001984 <main+0x38>)
 8001976:	f000 fbf9 	bl	800216c <HAL_GPIO_WritePin>
	  	  HAL_Delay(20);
 800197a:	2014      	movs	r0, #20
 800197c:	f000 f972 	bl	8001c64 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001980:	bf00      	nop
 8001982:	e7eb      	b.n	800195c <main+0x10>
 8001984:	40011000 	.word	0x40011000

08001988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b090      	sub	sp, #64	@ 0x40
 800198c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198e:	f107 0318 	add.w	r3, r7, #24
 8001992:	2228      	movs	r2, #40	@ 0x28
 8001994:	2100      	movs	r1, #0
 8001996:	4618      	mov	r0, r3
 8001998:	f000 ffde 	bl	8002958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800199c:	1d3b      	adds	r3, r7, #4
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019aa:	2302      	movs	r3, #2
 80019ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019ae:	2301      	movs	r3, #1
 80019b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019b2:	2310      	movs	r3, #16
 80019b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019ba:	f107 0318 	add.w	r3, r7, #24
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 fbec 	bl	800219c <HAL_RCC_OscConfig>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <SystemClock_Config+0x46>
  {
    Error_Handler();
 80019ca:	f000 f859 	bl	8001a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ce:	230f      	movs	r3, #15
 80019d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019d6:	2300      	movs	r3, #0
 80019d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	2100      	movs	r1, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 fe5a 	bl	80026a0 <HAL_RCC_ClockConfig>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80019f2:	f000 f845 	bl	8001a80 <Error_Handler>
  }
}
 80019f6:	bf00      	nop
 80019f8:	3740      	adds	r7, #64	@ 0x40
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
	...

08001a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b086      	sub	sp, #24
 8001a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a06:	f107 0308 	add.w	r3, r7, #8
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a14:	4b18      	ldr	r3, [pc, #96]	@ (8001a78 <MX_GPIO_Init+0x78>)
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	4a17      	ldr	r2, [pc, #92]	@ (8001a78 <MX_GPIO_Init+0x78>)
 8001a1a:	f043 0310 	orr.w	r3, r3, #16
 8001a1e:	6193      	str	r3, [r2, #24]
 8001a20:	4b15      	ldr	r3, [pc, #84]	@ (8001a78 <MX_GPIO_Init+0x78>)
 8001a22:	699b      	ldr	r3, [r3, #24]
 8001a24:	f003 0310 	and.w	r3, r3, #16
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a2c:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <MX_GPIO_Init+0x78>)
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	4a11      	ldr	r2, [pc, #68]	@ (8001a78 <MX_GPIO_Init+0x78>)
 8001a32:	f043 0320 	orr.w	r3, r3, #32
 8001a36:	6193      	str	r3, [r2, #24]
 8001a38:	4b0f      	ldr	r3, [pc, #60]	@ (8001a78 <MX_GPIO_Init+0x78>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	f003 0320 	and.w	r3, r3, #32
 8001a40:	603b      	str	r3, [r7, #0]
 8001a42:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a44:	2200      	movs	r2, #0
 8001a46:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a4a:	480c      	ldr	r0, [pc, #48]	@ (8001a7c <MX_GPIO_Init+0x7c>)
 8001a4c:	f000 fb8e 	bl	800216c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a54:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a56:	2301      	movs	r3, #1
 8001a58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a62:	f107 0308 	add.w	r3, r7, #8
 8001a66:	4619      	mov	r1, r3
 8001a68:	4804      	ldr	r0, [pc, #16]	@ (8001a7c <MX_GPIO_Init+0x7c>)
 8001a6a:	f000 fa03 	bl	8001e74 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a6e:	bf00      	nop
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40011000 	.word	0x40011000

08001a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a84:	b672      	cpsid	i
}
 8001a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a88:	bf00      	nop
 8001a8a:	e7fd      	b.n	8001a88 <Error_Handler+0x8>

08001a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a92:	4b15      	ldr	r3, [pc, #84]	@ (8001ae8 <HAL_MspInit+0x5c>)
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	4a14      	ldr	r2, [pc, #80]	@ (8001ae8 <HAL_MspInit+0x5c>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	6193      	str	r3, [r2, #24]
 8001a9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ae8 <HAL_MspInit+0x5c>)
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae8 <HAL_MspInit+0x5c>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	4a0e      	ldr	r2, [pc, #56]	@ (8001ae8 <HAL_MspInit+0x5c>)
 8001ab0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab4:	61d3      	str	r3, [r2, #28]
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <HAL_MspInit+0x5c>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8001aec <HAL_MspInit+0x60>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	4a04      	ldr	r2, [pc, #16]	@ (8001aec <HAL_MspInit+0x60>)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40010000 	.word	0x40010000

08001af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <NMI_Handler+0x4>

08001af8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <HardFault_Handler+0x4>

08001b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <MemManage_Handler+0x4>

08001b08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0c:	bf00      	nop
 8001b0e:	e7fd      	b.n	8001b0c <BusFault_Handler+0x4>

08001b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b14:	bf00      	nop
 8001b16:	e7fd      	b.n	8001b14 <UsageFault_Handler+0x4>

08001b18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr

08001b30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr

08001b3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b40:	f000 f874 	bl	8001c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b44:	bf00      	nop
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b54:	f7ff fff8 	bl	8001b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b58:	480b      	ldr	r0, [pc, #44]	@ (8001b88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b5a:	490c      	ldr	r1, [pc, #48]	@ (8001b8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b5c:	4a0c      	ldr	r2, [pc, #48]	@ (8001b90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b60:	e002      	b.n	8001b68 <LoopCopyDataInit>

08001b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b66:	3304      	adds	r3, #4

08001b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b6c:	d3f9      	bcc.n	8001b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6e:	4a09      	ldr	r2, [pc, #36]	@ (8001b94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001b70:	4c09      	ldr	r4, [pc, #36]	@ (8001b98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b74:	e001      	b.n	8001b7a <LoopFillZerobss>

08001b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b78:	3204      	adds	r2, #4

08001b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b7c:	d3fb      	bcc.n	8001b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b7e:	f000 fef3 	bl	8002968 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b82:	f7ff fee3 	bl	800194c <main>
  bx lr
 8001b86:	4770      	bx	lr
  ldr r0, =_sdata
 8001b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b8c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001b90:	080029f4 	.word	0x080029f4
  ldr r2, =_sbss
 8001b94:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001b98:	2000002c 	.word	0x2000002c

08001b9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b9c:	e7fe      	b.n	8001b9c <ADC1_2_IRQHandler>
	...

08001ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ba4:	4b08      	ldr	r3, [pc, #32]	@ (8001bc8 <HAL_Init+0x28>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a07      	ldr	r2, [pc, #28]	@ (8001bc8 <HAL_Init+0x28>)
 8001baa:	f043 0310 	orr.w	r3, r3, #16
 8001bae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb0:	2003      	movs	r0, #3
 8001bb2:	f000 f92b 	bl	8001e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bb6:	200f      	movs	r0, #15
 8001bb8:	f000 f808 	bl	8001bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bbc:	f7ff ff66 	bl	8001a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40022000 	.word	0x40022000

08001bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd4:	4b12      	ldr	r3, [pc, #72]	@ (8001c20 <HAL_InitTick+0x54>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	4b12      	ldr	r3, [pc, #72]	@ (8001c24 <HAL_InitTick+0x58>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 f935 	bl	8001e5a <HAL_SYSTICK_Config>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00e      	b.n	8001c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2b0f      	cmp	r3, #15
 8001bfe:	d80a      	bhi.n	8001c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c00:	2200      	movs	r2, #0
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c08:	f000 f90b 	bl	8001e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c0c:	4a06      	ldr	r2, [pc, #24]	@ (8001c28 <HAL_InitTick+0x5c>)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	e000      	b.n	8001c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000000 	.word	0x20000000
 8001c24:	20000008 	.word	0x20000008
 8001c28:	20000004 	.word	0x20000004

08001c2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c30:	4b05      	ldr	r3, [pc, #20]	@ (8001c48 <HAL_IncTick+0x1c>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	461a      	mov	r2, r3
 8001c36:	4b05      	ldr	r3, [pc, #20]	@ (8001c4c <HAL_IncTick+0x20>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	4a03      	ldr	r2, [pc, #12]	@ (8001c4c <HAL_IncTick+0x20>)
 8001c3e:	6013      	str	r3, [r2, #0]
}
 8001c40:	bf00      	nop
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr
 8001c48:	20000008 	.word	0x20000008
 8001c4c:	20000028 	.word	0x20000028

08001c50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return uwTick;
 8001c54:	4b02      	ldr	r3, [pc, #8]	@ (8001c60 <HAL_GetTick+0x10>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bc80      	pop	{r7}
 8001c5e:	4770      	bx	lr
 8001c60:	20000028 	.word	0x20000028

08001c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c6c:	f7ff fff0 	bl	8001c50 <HAL_GetTick>
 8001c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c7c:	d005      	beq.n	8001c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca8 <HAL_Delay+0x44>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4413      	add	r3, r2
 8001c88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c8a:	bf00      	nop
 8001c8c:	f7ff ffe0 	bl	8001c50 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	68fa      	ldr	r2, [r7, #12]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d8f7      	bhi.n	8001c8c <HAL_Delay+0x28>
  {
  }
}
 8001c9c:	bf00      	nop
 8001c9e:	bf00      	nop
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000008 	.word	0x20000008

08001cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cde:	4a04      	ldr	r2, [pc, #16]	@ (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	60d3      	str	r3, [r2, #12]
}
 8001ce4:	bf00      	nop
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bc80      	pop	{r7}
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf8:	4b04      	ldr	r3, [pc, #16]	@ (8001d0c <__NVIC_GetPriorityGrouping+0x18>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	f003 0307 	and.w	r3, r3, #7
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	6039      	str	r1, [r7, #0]
 8001d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	db0a      	blt.n	8001d3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	b2da      	uxtb	r2, r3
 8001d28:	490c      	ldr	r1, [pc, #48]	@ (8001d5c <__NVIC_SetPriority+0x4c>)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	0112      	lsls	r2, r2, #4
 8001d30:	b2d2      	uxtb	r2, r2
 8001d32:	440b      	add	r3, r1
 8001d34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d38:	e00a      	b.n	8001d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	b2da      	uxtb	r2, r3
 8001d3e:	4908      	ldr	r1, [pc, #32]	@ (8001d60 <__NVIC_SetPriority+0x50>)
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	3b04      	subs	r3, #4
 8001d48:	0112      	lsls	r2, r2, #4
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	761a      	strb	r2, [r3, #24]
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bc80      	pop	{r7}
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000e100 	.word	0xe000e100
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	@ 0x24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	f1c3 0307 	rsb	r3, r3, #7
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	bf28      	it	cs
 8001d82:	2304      	movcs	r3, #4
 8001d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	2b06      	cmp	r3, #6
 8001d8c:	d902      	bls.n	8001d94 <NVIC_EncodePriority+0x30>
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3b03      	subs	r3, #3
 8001d92:	e000      	b.n	8001d96 <NVIC_EncodePriority+0x32>
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43da      	mvns	r2, r3
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	401a      	ands	r2, r3
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	43d9      	mvns	r1, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dbc:	4313      	orrs	r3, r2
         );
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3724      	adds	r7, #36	@ 0x24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr

08001dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dd8:	d301      	bcc.n	8001dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e00f      	b.n	8001dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dde:	4a0a      	ldr	r2, [pc, #40]	@ (8001e08 <SysTick_Config+0x40>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001de6:	210f      	movs	r1, #15
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001dec:	f7ff ff90 	bl	8001d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df0:	4b05      	ldr	r3, [pc, #20]	@ (8001e08 <SysTick_Config+0x40>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001df6:	4b04      	ldr	r3, [pc, #16]	@ (8001e08 <SysTick_Config+0x40>)
 8001df8:	2207      	movs	r2, #7
 8001dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	e000e010 	.word	0xe000e010

08001e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff ff49 	bl	8001cac <__NVIC_SetPriorityGrouping>
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	4603      	mov	r3, r0
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
 8001e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e34:	f7ff ff5e 	bl	8001cf4 <__NVIC_GetPriorityGrouping>
 8001e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	68b9      	ldr	r1, [r7, #8]
 8001e3e:	6978      	ldr	r0, [r7, #20]
 8001e40:	f7ff ff90 	bl	8001d64 <NVIC_EncodePriority>
 8001e44:	4602      	mov	r2, r0
 8001e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff5f 	bl	8001d10 <__NVIC_SetPriority>
}
 8001e52:	bf00      	nop
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7ff ffb0 	bl	8001dc8 <SysTick_Config>
 8001e68:	4603      	mov	r3, r0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b08b      	sub	sp, #44	@ 0x2c
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e82:	2300      	movs	r3, #0
 8001e84:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e86:	e161      	b.n	800214c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e88:	2201      	movs	r2, #1
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	69fa      	ldr	r2, [r7, #28]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	f040 8150 	bne.w	8002146 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	4a97      	ldr	r2, [pc, #604]	@ (8002108 <HAL_GPIO_Init+0x294>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d05e      	beq.n	8001f6e <HAL_GPIO_Init+0xfa>
 8001eb0:	4a95      	ldr	r2, [pc, #596]	@ (8002108 <HAL_GPIO_Init+0x294>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d875      	bhi.n	8001fa2 <HAL_GPIO_Init+0x12e>
 8001eb6:	4a95      	ldr	r2, [pc, #596]	@ (800210c <HAL_GPIO_Init+0x298>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d058      	beq.n	8001f6e <HAL_GPIO_Init+0xfa>
 8001ebc:	4a93      	ldr	r2, [pc, #588]	@ (800210c <HAL_GPIO_Init+0x298>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d86f      	bhi.n	8001fa2 <HAL_GPIO_Init+0x12e>
 8001ec2:	4a93      	ldr	r2, [pc, #588]	@ (8002110 <HAL_GPIO_Init+0x29c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d052      	beq.n	8001f6e <HAL_GPIO_Init+0xfa>
 8001ec8:	4a91      	ldr	r2, [pc, #580]	@ (8002110 <HAL_GPIO_Init+0x29c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d869      	bhi.n	8001fa2 <HAL_GPIO_Init+0x12e>
 8001ece:	4a91      	ldr	r2, [pc, #580]	@ (8002114 <HAL_GPIO_Init+0x2a0>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d04c      	beq.n	8001f6e <HAL_GPIO_Init+0xfa>
 8001ed4:	4a8f      	ldr	r2, [pc, #572]	@ (8002114 <HAL_GPIO_Init+0x2a0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d863      	bhi.n	8001fa2 <HAL_GPIO_Init+0x12e>
 8001eda:	4a8f      	ldr	r2, [pc, #572]	@ (8002118 <HAL_GPIO_Init+0x2a4>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d046      	beq.n	8001f6e <HAL_GPIO_Init+0xfa>
 8001ee0:	4a8d      	ldr	r2, [pc, #564]	@ (8002118 <HAL_GPIO_Init+0x2a4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d85d      	bhi.n	8001fa2 <HAL_GPIO_Init+0x12e>
 8001ee6:	2b12      	cmp	r3, #18
 8001ee8:	d82a      	bhi.n	8001f40 <HAL_GPIO_Init+0xcc>
 8001eea:	2b12      	cmp	r3, #18
 8001eec:	d859      	bhi.n	8001fa2 <HAL_GPIO_Init+0x12e>
 8001eee:	a201      	add	r2, pc, #4	@ (adr r2, 8001ef4 <HAL_GPIO_Init+0x80>)
 8001ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef4:	08001f6f 	.word	0x08001f6f
 8001ef8:	08001f49 	.word	0x08001f49
 8001efc:	08001f5b 	.word	0x08001f5b
 8001f00:	08001f9d 	.word	0x08001f9d
 8001f04:	08001fa3 	.word	0x08001fa3
 8001f08:	08001fa3 	.word	0x08001fa3
 8001f0c:	08001fa3 	.word	0x08001fa3
 8001f10:	08001fa3 	.word	0x08001fa3
 8001f14:	08001fa3 	.word	0x08001fa3
 8001f18:	08001fa3 	.word	0x08001fa3
 8001f1c:	08001fa3 	.word	0x08001fa3
 8001f20:	08001fa3 	.word	0x08001fa3
 8001f24:	08001fa3 	.word	0x08001fa3
 8001f28:	08001fa3 	.word	0x08001fa3
 8001f2c:	08001fa3 	.word	0x08001fa3
 8001f30:	08001fa3 	.word	0x08001fa3
 8001f34:	08001fa3 	.word	0x08001fa3
 8001f38:	08001f51 	.word	0x08001f51
 8001f3c:	08001f65 	.word	0x08001f65
 8001f40:	4a76      	ldr	r2, [pc, #472]	@ (800211c <HAL_GPIO_Init+0x2a8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d013      	beq.n	8001f6e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f46:	e02c      	b.n	8001fa2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	623b      	str	r3, [r7, #32]
          break;
 8001f4e:	e029      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	3304      	adds	r3, #4
 8001f56:	623b      	str	r3, [r7, #32]
          break;
 8001f58:	e024      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	3308      	adds	r3, #8
 8001f60:	623b      	str	r3, [r7, #32]
          break;
 8001f62:	e01f      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	330c      	adds	r3, #12
 8001f6a:	623b      	str	r3, [r7, #32]
          break;
 8001f6c:	e01a      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d102      	bne.n	8001f7c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f76:	2304      	movs	r3, #4
 8001f78:	623b      	str	r3, [r7, #32]
          break;
 8001f7a:	e013      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d105      	bne.n	8001f90 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f84:	2308      	movs	r3, #8
 8001f86:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69fa      	ldr	r2, [r7, #28]
 8001f8c:	611a      	str	r2, [r3, #16]
          break;
 8001f8e:	e009      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f90:	2308      	movs	r3, #8
 8001f92:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69fa      	ldr	r2, [r7, #28]
 8001f98:	615a      	str	r2, [r3, #20]
          break;
 8001f9a:	e003      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	623b      	str	r3, [r7, #32]
          break;
 8001fa0:	e000      	b.n	8001fa4 <HAL_GPIO_Init+0x130>
          break;
 8001fa2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	2bff      	cmp	r3, #255	@ 0xff
 8001fa8:	d801      	bhi.n	8001fae <HAL_GPIO_Init+0x13a>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	e001      	b.n	8001fb2 <HAL_GPIO_Init+0x13e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	2bff      	cmp	r3, #255	@ 0xff
 8001fb8:	d802      	bhi.n	8001fc0 <HAL_GPIO_Init+0x14c>
 8001fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	e002      	b.n	8001fc6 <HAL_GPIO_Init+0x152>
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc2:	3b08      	subs	r3, #8
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	210f      	movs	r1, #15
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	401a      	ands	r2, r3
 8001fd8:	6a39      	ldr	r1, [r7, #32]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 80a9 	beq.w	8002146 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ff4:	4b4a      	ldr	r3, [pc, #296]	@ (8002120 <HAL_GPIO_Init+0x2ac>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	4a49      	ldr	r2, [pc, #292]	@ (8002120 <HAL_GPIO_Init+0x2ac>)
 8001ffa:	f043 0301 	orr.w	r3, r3, #1
 8001ffe:	6193      	str	r3, [r2, #24]
 8002000:	4b47      	ldr	r3, [pc, #284]	@ (8002120 <HAL_GPIO_Init+0x2ac>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	60bb      	str	r3, [r7, #8]
 800200a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800200c:	4a45      	ldr	r2, [pc, #276]	@ (8002124 <HAL_GPIO_Init+0x2b0>)
 800200e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002010:	089b      	lsrs	r3, r3, #2
 8002012:	3302      	adds	r3, #2
 8002014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002018:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800201a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	220f      	movs	r2, #15
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	4013      	ands	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a3d      	ldr	r2, [pc, #244]	@ (8002128 <HAL_GPIO_Init+0x2b4>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d00d      	beq.n	8002054 <HAL_GPIO_Init+0x1e0>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a3c      	ldr	r2, [pc, #240]	@ (800212c <HAL_GPIO_Init+0x2b8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d007      	beq.n	8002050 <HAL_GPIO_Init+0x1dc>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a3b      	ldr	r2, [pc, #236]	@ (8002130 <HAL_GPIO_Init+0x2bc>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d101      	bne.n	800204c <HAL_GPIO_Init+0x1d8>
 8002048:	2302      	movs	r3, #2
 800204a:	e004      	b.n	8002056 <HAL_GPIO_Init+0x1e2>
 800204c:	2303      	movs	r3, #3
 800204e:	e002      	b.n	8002056 <HAL_GPIO_Init+0x1e2>
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <HAL_GPIO_Init+0x1e2>
 8002054:	2300      	movs	r3, #0
 8002056:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002058:	f002 0203 	and.w	r2, r2, #3
 800205c:	0092      	lsls	r2, r2, #2
 800205e:	4093      	lsls	r3, r2
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002066:	492f      	ldr	r1, [pc, #188]	@ (8002124 <HAL_GPIO_Init+0x2b0>)
 8002068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206a:	089b      	lsrs	r3, r3, #2
 800206c:	3302      	adds	r3, #2
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d006      	beq.n	800208e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002080:	4b2c      	ldr	r3, [pc, #176]	@ (8002134 <HAL_GPIO_Init+0x2c0>)
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	492b      	ldr	r1, [pc, #172]	@ (8002134 <HAL_GPIO_Init+0x2c0>)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	608b      	str	r3, [r1, #8]
 800208c:	e006      	b.n	800209c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800208e:	4b29      	ldr	r3, [pc, #164]	@ (8002134 <HAL_GPIO_Init+0x2c0>)
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	43db      	mvns	r3, r3
 8002096:	4927      	ldr	r1, [pc, #156]	@ (8002134 <HAL_GPIO_Init+0x2c0>)
 8002098:	4013      	ands	r3, r2
 800209a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d006      	beq.n	80020b6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020a8:	4b22      	ldr	r3, [pc, #136]	@ (8002134 <HAL_GPIO_Init+0x2c0>)
 80020aa:	68da      	ldr	r2, [r3, #12]
 80020ac:	4921      	ldr	r1, [pc, #132]	@ (8002134 <HAL_GPIO_Init+0x2c0>)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	60cb      	str	r3, [r1, #12]
 80020b4:	e006      	b.n	80020c4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002134 <HAL_GPIO_Init+0x2c0>)
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	43db      	mvns	r3, r3
 80020be:	491d      	ldr	r1, [pc, #116]	@ (8002134 <HAL_GPIO_Init+0x2c0>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d006      	beq.n	80020de <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020d0:	4b18      	ldr	r3, [pc, #96]	@ (8002134 <HAL_GPIO_Init+0x2c0>)
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	4917      	ldr	r1, [pc, #92]	@ (8002134 <HAL_GPIO_Init+0x2c0>)
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
 80020dc:	e006      	b.n	80020ec <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020de:	4b15      	ldr	r3, [pc, #84]	@ (8002134 <HAL_GPIO_Init+0x2c0>)
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	4913      	ldr	r1, [pc, #76]	@ (8002134 <HAL_GPIO_Init+0x2c0>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d01f      	beq.n	8002138 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002134 <HAL_GPIO_Init+0x2c0>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	490d      	ldr	r1, [pc, #52]	@ (8002134 <HAL_GPIO_Init+0x2c0>)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	600b      	str	r3, [r1, #0]
 8002104:	e01f      	b.n	8002146 <HAL_GPIO_Init+0x2d2>
 8002106:	bf00      	nop
 8002108:	10320000 	.word	0x10320000
 800210c:	10310000 	.word	0x10310000
 8002110:	10220000 	.word	0x10220000
 8002114:	10210000 	.word	0x10210000
 8002118:	10120000 	.word	0x10120000
 800211c:	10110000 	.word	0x10110000
 8002120:	40021000 	.word	0x40021000
 8002124:	40010000 	.word	0x40010000
 8002128:	40010800 	.word	0x40010800
 800212c:	40010c00 	.word	0x40010c00
 8002130:	40011000 	.word	0x40011000
 8002134:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002138:	4b0b      	ldr	r3, [pc, #44]	@ (8002168 <HAL_GPIO_Init+0x2f4>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	43db      	mvns	r3, r3
 8002140:	4909      	ldr	r1, [pc, #36]	@ (8002168 <HAL_GPIO_Init+0x2f4>)
 8002142:	4013      	ands	r3, r2
 8002144:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002148:	3301      	adds	r3, #1
 800214a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002152:	fa22 f303 	lsr.w	r3, r2, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	f47f ae96 	bne.w	8001e88 <HAL_GPIO_Init+0x14>
  }
}
 800215c:	bf00      	nop
 800215e:	bf00      	nop
 8002160:	372c      	adds	r7, #44	@ 0x2c
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr
 8002168:	40010400 	.word	0x40010400

0800216c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	807b      	strh	r3, [r7, #2]
 8002178:	4613      	mov	r3, r2
 800217a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800217c:	787b      	ldrb	r3, [r7, #1]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002182:	887a      	ldrh	r2, [r7, #2]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002188:	e003      	b.n	8002192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800218a:	887b      	ldrh	r3, [r7, #2]
 800218c:	041a      	lsls	r2, r3, #16
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	611a      	str	r2, [r3, #16]
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e272      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 8087 	beq.w	80022ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021bc:	4b92      	ldr	r3, [pc, #584]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 030c 	and.w	r3, r3, #12
 80021c4:	2b04      	cmp	r3, #4
 80021c6:	d00c      	beq.n	80021e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021c8:	4b8f      	ldr	r3, [pc, #572]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 030c 	and.w	r3, r3, #12
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d112      	bne.n	80021fa <HAL_RCC_OscConfig+0x5e>
 80021d4:	4b8c      	ldr	r3, [pc, #560]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021e0:	d10b      	bne.n	80021fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e2:	4b89      	ldr	r3, [pc, #548]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d06c      	beq.n	80022c8 <HAL_RCC_OscConfig+0x12c>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d168      	bne.n	80022c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e24c      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002202:	d106      	bne.n	8002212 <HAL_RCC_OscConfig+0x76>
 8002204:	4b80      	ldr	r3, [pc, #512]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a7f      	ldr	r2, [pc, #508]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 800220a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800220e:	6013      	str	r3, [r2, #0]
 8002210:	e02e      	b.n	8002270 <HAL_RCC_OscConfig+0xd4>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d10c      	bne.n	8002234 <HAL_RCC_OscConfig+0x98>
 800221a:	4b7b      	ldr	r3, [pc, #492]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a7a      	ldr	r2, [pc, #488]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002220:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	4b78      	ldr	r3, [pc, #480]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a77      	ldr	r2, [pc, #476]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 800222c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	e01d      	b.n	8002270 <HAL_RCC_OscConfig+0xd4>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800223c:	d10c      	bne.n	8002258 <HAL_RCC_OscConfig+0xbc>
 800223e:	4b72      	ldr	r3, [pc, #456]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a71      	ldr	r2, [pc, #452]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002244:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	4b6f      	ldr	r3, [pc, #444]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a6e      	ldr	r2, [pc, #440]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002250:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	e00b      	b.n	8002270 <HAL_RCC_OscConfig+0xd4>
 8002258:	4b6b      	ldr	r3, [pc, #428]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a6a      	ldr	r2, [pc, #424]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 800225e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	4b68      	ldr	r3, [pc, #416]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a67      	ldr	r2, [pc, #412]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 800226a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800226e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d013      	beq.n	80022a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002278:	f7ff fcea 	bl	8001c50 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002280:	f7ff fce6 	bl	8001c50 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b64      	cmp	r3, #100	@ 0x64
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e200      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002292:	4b5d      	ldr	r3, [pc, #372]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCC_OscConfig+0xe4>
 800229e:	e014      	b.n	80022ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a0:	f7ff fcd6 	bl	8001c50 <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a8:	f7ff fcd2 	bl	8001c50 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b64      	cmp	r3, #100	@ 0x64
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e1ec      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ba:	4b53      	ldr	r3, [pc, #332]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x10c>
 80022c6:	e000      	b.n	80022ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0302 	and.w	r3, r3, #2
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d063      	beq.n	800239e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d00b      	beq.n	80022fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022e2:	4b49      	ldr	r3, [pc, #292]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 030c 	and.w	r3, r3, #12
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d11c      	bne.n	8002328 <HAL_RCC_OscConfig+0x18c>
 80022ee:	4b46      	ldr	r3, [pc, #280]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d116      	bne.n	8002328 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022fa:	4b43      	ldr	r3, [pc, #268]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d005      	beq.n	8002312 <HAL_RCC_OscConfig+0x176>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d001      	beq.n	8002312 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e1c0      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002312:	4b3d      	ldr	r3, [pc, #244]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4939      	ldr	r1, [pc, #228]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002326:	e03a      	b.n	800239e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d020      	beq.n	8002372 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002330:	4b36      	ldr	r3, [pc, #216]	@ (800240c <HAL_RCC_OscConfig+0x270>)
 8002332:	2201      	movs	r2, #1
 8002334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002336:	f7ff fc8b 	bl	8001c50 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233e:	f7ff fc87 	bl	8001c50 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e1a1      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002350:	4b2d      	ldr	r3, [pc, #180]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235c:	4b2a      	ldr	r3, [pc, #168]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	695b      	ldr	r3, [r3, #20]
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4927      	ldr	r1, [pc, #156]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 800236c:	4313      	orrs	r3, r2
 800236e:	600b      	str	r3, [r1, #0]
 8002370:	e015      	b.n	800239e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002372:	4b26      	ldr	r3, [pc, #152]	@ (800240c <HAL_RCC_OscConfig+0x270>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7ff fc6a 	bl	8001c50 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002380:	f7ff fc66 	bl	8001c50 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e180      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002392:	4b1d      	ldr	r3, [pc, #116]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d03a      	beq.n	8002420 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d019      	beq.n	80023e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023b2:	4b17      	ldr	r3, [pc, #92]	@ (8002410 <HAL_RCC_OscConfig+0x274>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b8:	f7ff fc4a 	bl	8001c50 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c0:	f7ff fc46 	bl	8001c50 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e160      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002408 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023de:	2001      	movs	r0, #1
 80023e0:	f000 fa9c 	bl	800291c <RCC_Delay>
 80023e4:	e01c      	b.n	8002420 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002410 <HAL_RCC_OscConfig+0x274>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ec:	f7ff fc30 	bl	8001c50 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f2:	e00f      	b.n	8002414 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f4:	f7ff fc2c 	bl	8001c50 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d908      	bls.n	8002414 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e146      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000
 800240c:	42420000 	.word	0x42420000
 8002410:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002414:	4b92      	ldr	r3, [pc, #584]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d1e9      	bne.n	80023f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0304 	and.w	r3, r3, #4
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 80a6 	beq.w	800257a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800242e:	2300      	movs	r3, #0
 8002430:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002432:	4b8b      	ldr	r3, [pc, #556]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10d      	bne.n	800245a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800243e:	4b88      	ldr	r3, [pc, #544]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	4a87      	ldr	r2, [pc, #540]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002444:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002448:	61d3      	str	r3, [r2, #28]
 800244a:	4b85      	ldr	r3, [pc, #532]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002456:	2301      	movs	r3, #1
 8002458:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245a:	4b82      	ldr	r3, [pc, #520]	@ (8002664 <HAL_RCC_OscConfig+0x4c8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002462:	2b00      	cmp	r3, #0
 8002464:	d118      	bne.n	8002498 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002466:	4b7f      	ldr	r3, [pc, #508]	@ (8002664 <HAL_RCC_OscConfig+0x4c8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a7e      	ldr	r2, [pc, #504]	@ (8002664 <HAL_RCC_OscConfig+0x4c8>)
 800246c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002472:	f7ff fbed 	bl	8001c50 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800247a:	f7ff fbe9 	bl	8001c50 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b64      	cmp	r3, #100	@ 0x64
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e103      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248c:	4b75      	ldr	r3, [pc, #468]	@ (8002664 <HAL_RCC_OscConfig+0x4c8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002494:	2b00      	cmp	r3, #0
 8002496:	d0f0      	beq.n	800247a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d106      	bne.n	80024ae <HAL_RCC_OscConfig+0x312>
 80024a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	4a6e      	ldr	r2, [pc, #440]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	6213      	str	r3, [r2, #32]
 80024ac:	e02d      	b.n	800250a <HAL_RCC_OscConfig+0x36e>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10c      	bne.n	80024d0 <HAL_RCC_OscConfig+0x334>
 80024b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	4a69      	ldr	r2, [pc, #420]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	f023 0301 	bic.w	r3, r3, #1
 80024c0:	6213      	str	r3, [r2, #32]
 80024c2:	4b67      	ldr	r3, [pc, #412]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	6a1b      	ldr	r3, [r3, #32]
 80024c6:	4a66      	ldr	r2, [pc, #408]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	f023 0304 	bic.w	r3, r3, #4
 80024cc:	6213      	str	r3, [r2, #32]
 80024ce:	e01c      	b.n	800250a <HAL_RCC_OscConfig+0x36e>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	2b05      	cmp	r3, #5
 80024d6:	d10c      	bne.n	80024f2 <HAL_RCC_OscConfig+0x356>
 80024d8:	4b61      	ldr	r3, [pc, #388]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	4a60      	ldr	r2, [pc, #384]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024de:	f043 0304 	orr.w	r3, r3, #4
 80024e2:	6213      	str	r3, [r2, #32]
 80024e4:	4b5e      	ldr	r3, [pc, #376]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	4a5d      	ldr	r2, [pc, #372]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6213      	str	r3, [r2, #32]
 80024f0:	e00b      	b.n	800250a <HAL_RCC_OscConfig+0x36e>
 80024f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	4a5a      	ldr	r2, [pc, #360]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80024f8:	f023 0301 	bic.w	r3, r3, #1
 80024fc:	6213      	str	r3, [r2, #32]
 80024fe:	4b58      	ldr	r3, [pc, #352]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	4a57      	ldr	r2, [pc, #348]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	f023 0304 	bic.w	r3, r3, #4
 8002508:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d015      	beq.n	800253e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002512:	f7ff fb9d 	bl	8001c50 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002518:	e00a      	b.n	8002530 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251a:	f7ff fb99 	bl	8001c50 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002528:	4293      	cmp	r3, r2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e0b1      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002530:	4b4b      	ldr	r3, [pc, #300]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0ee      	beq.n	800251a <HAL_RCC_OscConfig+0x37e>
 800253c:	e014      	b.n	8002568 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253e:	f7ff fb87 	bl	8001c50 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002544:	e00a      	b.n	800255c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002546:	f7ff fb83 	bl	8001c50 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002554:	4293      	cmp	r3, r2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e09b      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800255c:	4b40      	ldr	r3, [pc, #256]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 800255e:	6a1b      	ldr	r3, [r3, #32]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1ee      	bne.n	8002546 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002568:	7dfb      	ldrb	r3, [r7, #23]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d105      	bne.n	800257a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800256e:	4b3c      	ldr	r3, [pc, #240]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	4a3b      	ldr	r2, [pc, #236]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002574:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002578:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 8087 	beq.w	8002692 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002584:	4b36      	ldr	r3, [pc, #216]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 030c 	and.w	r3, r3, #12
 800258c:	2b08      	cmp	r3, #8
 800258e:	d061      	beq.n	8002654 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d146      	bne.n	8002626 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002598:	4b33      	ldr	r3, [pc, #204]	@ (8002668 <HAL_RCC_OscConfig+0x4cc>)
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259e:	f7ff fb57 	bl	8001c50 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025a6:	f7ff fb53 	bl	8001c50 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e06d      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025b8:	4b29      	ldr	r3, [pc, #164]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1f0      	bne.n	80025a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025cc:	d108      	bne.n	80025e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025ce:	4b24      	ldr	r3, [pc, #144]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	4921      	ldr	r1, [pc, #132]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a19      	ldr	r1, [r3, #32]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f0:	430b      	orrs	r3, r1
 80025f2:	491b      	ldr	r1, [pc, #108]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002668 <HAL_RCC_OscConfig+0x4cc>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fe:	f7ff fb27 	bl	8001c50 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002606:	f7ff fb23 	bl	8001c50 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e03d      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002618:	4b11      	ldr	r3, [pc, #68]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0f0      	beq.n	8002606 <HAL_RCC_OscConfig+0x46a>
 8002624:	e035      	b.n	8002692 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002626:	4b10      	ldr	r3, [pc, #64]	@ (8002668 <HAL_RCC_OscConfig+0x4cc>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800262c:	f7ff fb10 	bl	8001c50 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002634:	f7ff fb0c 	bl	8001c50 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e026      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002646:	4b06      	ldr	r3, [pc, #24]	@ (8002660 <HAL_RCC_OscConfig+0x4c4>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x498>
 8002652:	e01e      	b.n	8002692 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d107      	bne.n	800266c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e019      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
 8002660:	40021000 	.word	0x40021000
 8002664:	40007000 	.word	0x40007000
 8002668:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800266c:	4b0b      	ldr	r3, [pc, #44]	@ (800269c <HAL_RCC_OscConfig+0x500>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	429a      	cmp	r2, r3
 800267e:	d106      	bne.n	800268e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800268a:	429a      	cmp	r2, r3
 800268c:	d001      	beq.n	8002692 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40021000 	.word	0x40021000

080026a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d101      	bne.n	80026b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e0d0      	b.n	8002856 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026b4:	4b6a      	ldr	r3, [pc, #424]	@ (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d910      	bls.n	80026e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c2:	4b67      	ldr	r3, [pc, #412]	@ (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f023 0207 	bic.w	r2, r3, #7
 80026ca:	4965      	ldr	r1, [pc, #404]	@ (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d2:	4b63      	ldr	r3, [pc, #396]	@ (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d001      	beq.n	80026e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0b8      	b.n	8002856 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d020      	beq.n	8002732 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d005      	beq.n	8002708 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026fc:	4b59      	ldr	r3, [pc, #356]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	4a58      	ldr	r2, [pc, #352]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002706:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002714:	4b53      	ldr	r3, [pc, #332]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	4a52      	ldr	r2, [pc, #328]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 800271a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800271e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002720:	4b50      	ldr	r3, [pc, #320]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	494d      	ldr	r1, [pc, #308]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	4313      	orrs	r3, r2
 8002730:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d040      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d107      	bne.n	8002756 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002746:	4b47      	ldr	r3, [pc, #284]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d115      	bne.n	800277e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e07f      	b.n	8002856 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d107      	bne.n	800276e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800275e:	4b41      	ldr	r3, [pc, #260]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d109      	bne.n	800277e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e073      	b.n	8002856 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276e:	4b3d      	ldr	r3, [pc, #244]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e06b      	b.n	8002856 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800277e:	4b39      	ldr	r3, [pc, #228]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f023 0203 	bic.w	r2, r3, #3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	4936      	ldr	r1, [pc, #216]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	4313      	orrs	r3, r2
 800278e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002790:	f7ff fa5e 	bl	8001c50 <HAL_GetTick>
 8002794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002796:	e00a      	b.n	80027ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002798:	f7ff fa5a 	bl	8001c50 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e053      	b.n	8002856 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 020c 	and.w	r2, r3, #12
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	429a      	cmp	r2, r3
 80027be:	d1eb      	bne.n	8002798 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027c0:	4b27      	ldr	r3, [pc, #156]	@ (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d210      	bcs.n	80027f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ce:	4b24      	ldr	r3, [pc, #144]	@ (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 0207 	bic.w	r2, r3, #7
 80027d6:	4922      	ldr	r1, [pc, #136]	@ (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	4313      	orrs	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027de:	4b20      	ldr	r3, [pc, #128]	@ (8002860 <HAL_RCC_ClockConfig+0x1c0>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e032      	b.n	8002856 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027fc:	4b19      	ldr	r3, [pc, #100]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	4916      	ldr	r1, [pc, #88]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 800280a:	4313      	orrs	r3, r2
 800280c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d009      	beq.n	800282e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800281a:	4b12      	ldr	r3, [pc, #72]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	490e      	ldr	r1, [pc, #56]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 800282a:	4313      	orrs	r3, r2
 800282c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800282e:	f000 f821 	bl	8002874 <HAL_RCC_GetSysClockFreq>
 8002832:	4602      	mov	r2, r0
 8002834:	4b0b      	ldr	r3, [pc, #44]	@ (8002864 <HAL_RCC_ClockConfig+0x1c4>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	091b      	lsrs	r3, r3, #4
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	490a      	ldr	r1, [pc, #40]	@ (8002868 <HAL_RCC_ClockConfig+0x1c8>)
 8002840:	5ccb      	ldrb	r3, [r1, r3]
 8002842:	fa22 f303 	lsr.w	r3, r2, r3
 8002846:	4a09      	ldr	r2, [pc, #36]	@ (800286c <HAL_RCC_ClockConfig+0x1cc>)
 8002848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800284a:	4b09      	ldr	r3, [pc, #36]	@ (8002870 <HAL_RCC_ClockConfig+0x1d0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff f9bc 	bl	8001bcc <HAL_InitTick>

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40022000 	.word	0x40022000
 8002864:	40021000 	.word	0x40021000
 8002868:	080029c8 	.word	0x080029c8
 800286c:	20000000 	.word	0x20000000
 8002870:	20000004 	.word	0x20000004

08002874 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800287a:	2300      	movs	r3, #0
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	2300      	movs	r3, #0
 8002880:	60bb      	str	r3, [r7, #8]
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	2300      	movs	r3, #0
 8002888:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800288a:	2300      	movs	r3, #0
 800288c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800288e:	4b1e      	ldr	r3, [pc, #120]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x94>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f003 030c 	and.w	r3, r3, #12
 800289a:	2b04      	cmp	r3, #4
 800289c:	d002      	beq.n	80028a4 <HAL_RCC_GetSysClockFreq+0x30>
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d003      	beq.n	80028aa <HAL_RCC_GetSysClockFreq+0x36>
 80028a2:	e027      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028a4:	4b19      	ldr	r3, [pc, #100]	@ (800290c <HAL_RCC_GetSysClockFreq+0x98>)
 80028a6:	613b      	str	r3, [r7, #16]
      break;
 80028a8:	e027      	b.n	80028fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	0c9b      	lsrs	r3, r3, #18
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	4a17      	ldr	r2, [pc, #92]	@ (8002910 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028b4:	5cd3      	ldrb	r3, [r2, r3]
 80028b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d010      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028c2:	4b11      	ldr	r3, [pc, #68]	@ (8002908 <HAL_RCC_GetSysClockFreq+0x94>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	0c5b      	lsrs	r3, r3, #17
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	4a11      	ldr	r2, [pc, #68]	@ (8002914 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028ce:	5cd3      	ldrb	r3, [r2, r3]
 80028d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a0d      	ldr	r2, [pc, #52]	@ (800290c <HAL_RCC_GetSysClockFreq+0x98>)
 80028d6:	fb03 f202 	mul.w	r2, r3, r2
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e0:	617b      	str	r3, [r7, #20]
 80028e2:	e004      	b.n	80028ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a0c      	ldr	r2, [pc, #48]	@ (8002918 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028e8:	fb02 f303 	mul.w	r3, r2, r3
 80028ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	613b      	str	r3, [r7, #16]
      break;
 80028f2:	e002      	b.n	80028fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028f4:	4b05      	ldr	r3, [pc, #20]	@ (800290c <HAL_RCC_GetSysClockFreq+0x98>)
 80028f6:	613b      	str	r3, [r7, #16]
      break;
 80028f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028fa:	693b      	ldr	r3, [r7, #16]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	40021000 	.word	0x40021000
 800290c:	007a1200 	.word	0x007a1200
 8002910:	080029d8 	.word	0x080029d8
 8002914:	080029e8 	.word	0x080029e8
 8002918:	003d0900 	.word	0x003d0900

0800291c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002924:	4b0a      	ldr	r3, [pc, #40]	@ (8002950 <RCC_Delay+0x34>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a0a      	ldr	r2, [pc, #40]	@ (8002954 <RCC_Delay+0x38>)
 800292a:	fba2 2303 	umull	r2, r3, r2, r3
 800292e:	0a5b      	lsrs	r3, r3, #9
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	fb02 f303 	mul.w	r3, r2, r3
 8002936:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002938:	bf00      	nop
  }
  while (Delay --);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1e5a      	subs	r2, r3, #1
 800293e:	60fa      	str	r2, [r7, #12]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d1f9      	bne.n	8002938 <RCC_Delay+0x1c>
}
 8002944:	bf00      	nop
 8002946:	bf00      	nop
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr
 8002950:	20000000 	.word	0x20000000
 8002954:	10624dd3 	.word	0x10624dd3

08002958 <memset>:
 8002958:	4603      	mov	r3, r0
 800295a:	4402      	add	r2, r0
 800295c:	4293      	cmp	r3, r2
 800295e:	d100      	bne.n	8002962 <memset+0xa>
 8002960:	4770      	bx	lr
 8002962:	f803 1b01 	strb.w	r1, [r3], #1
 8002966:	e7f9      	b.n	800295c <memset+0x4>

08002968 <__libc_init_array>:
 8002968:	b570      	push	{r4, r5, r6, lr}
 800296a:	2600      	movs	r6, #0
 800296c:	4d0c      	ldr	r5, [pc, #48]	@ (80029a0 <__libc_init_array+0x38>)
 800296e:	4c0d      	ldr	r4, [pc, #52]	@ (80029a4 <__libc_init_array+0x3c>)
 8002970:	1b64      	subs	r4, r4, r5
 8002972:	10a4      	asrs	r4, r4, #2
 8002974:	42a6      	cmp	r6, r4
 8002976:	d109      	bne.n	800298c <__libc_init_array+0x24>
 8002978:	f000 f81a 	bl	80029b0 <_init>
 800297c:	2600      	movs	r6, #0
 800297e:	4d0a      	ldr	r5, [pc, #40]	@ (80029a8 <__libc_init_array+0x40>)
 8002980:	4c0a      	ldr	r4, [pc, #40]	@ (80029ac <__libc_init_array+0x44>)
 8002982:	1b64      	subs	r4, r4, r5
 8002984:	10a4      	asrs	r4, r4, #2
 8002986:	42a6      	cmp	r6, r4
 8002988:	d105      	bne.n	8002996 <__libc_init_array+0x2e>
 800298a:	bd70      	pop	{r4, r5, r6, pc}
 800298c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002990:	4798      	blx	r3
 8002992:	3601      	adds	r6, #1
 8002994:	e7ee      	b.n	8002974 <__libc_init_array+0xc>
 8002996:	f855 3b04 	ldr.w	r3, [r5], #4
 800299a:	4798      	blx	r3
 800299c:	3601      	adds	r6, #1
 800299e:	e7f2      	b.n	8002986 <__libc_init_array+0x1e>
 80029a0:	080029ec 	.word	0x080029ec
 80029a4:	080029ec 	.word	0x080029ec
 80029a8:	080029ec 	.word	0x080029ec
 80029ac:	080029f0 	.word	0x080029f0

080029b0 <_init>:
 80029b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029b2:	bf00      	nop
 80029b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029b6:	bc08      	pop	{r3}
 80029b8:	469e      	mov	lr, r3
 80029ba:	4770      	bx	lr

080029bc <_fini>:
 80029bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029be:	bf00      	nop
 80029c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029c2:	bc08      	pop	{r3}
 80029c4:	469e      	mov	lr, r3
 80029c6:	4770      	bx	lr
