
Learning_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029c0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002acc  08002acc  00003acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b08  08002b08  00004010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002b08  08002b08  00003b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b10  08002b10  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b10  08002b10  00003b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b14  08002b14  00003b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002b18  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000010  08002b28  00004010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08002b28  000041a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000825c  00000000  00000000  00004039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001af2  00000000  00000000  0000c295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  0000dd88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005f0  00000000  00000000  0000e550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016963  00000000  00000000  0000eb40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008bec  00000000  00000000  000254a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000800ca  00000000  00000000  0002e08f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ae159  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e60  00000000  00000000  000ae19c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000afffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ab4 	.word	0x08002ab4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002ab4 	.word	0x08002ab4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 faf5 	bl	8000750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f835 	bl	80001d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f8a1 	bl	80002b0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800016e:	f000 f875 	bl	800025c <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
uint8_t i;
  while (1)
  {
	  for( i = 0 ; i<=3; i++){
 8000172:	2300      	movs	r3, #0
 8000174:	71fb      	strb	r3, [r7, #7]
 8000176:	e00b      	b.n	8000190 <main+0x34>
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000178:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800017c:	4810      	ldr	r0, [pc, #64]	@ (80001c0 <main+0x64>)
 800017e:	f001 f8f6 	bl	800136e <HAL_GPIO_TogglePin>
		  HAL_Delay(2000);
 8000182:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000186:	f000 fb63 	bl	8000850 <HAL_Delay>
	  for( i = 0 ; i<=3; i++){
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	3301      	adds	r3, #1
 800018e:	71fb      	strb	r3, [r7, #7]
 8000190:	79fb      	ldrb	r3, [r7, #7]
 8000192:	2b03      	cmp	r3, #3
 8000194:	d9f0      	bls.n	8000178 <main+0x1c>
	  }
	    pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000196:	2101      	movs	r1, #1
 8000198:	480a      	ldr	r0, [pc, #40]	@ (80001c4 <main+0x68>)
 800019a:	f001 f8b9 	bl	8001310 <HAL_GPIO_ReadPin>
 800019e:	4603      	mov	r3, r0
 80001a0:	461a      	mov	r2, r3
 80001a2:	4b09      	ldr	r3, [pc, #36]	@ (80001c8 <main+0x6c>)
 80001a4:	701a      	strb	r2, [r3, #0]
	    if (pinState == GPIO_PIN_SET) {
 80001a6:	4b08      	ldr	r3, [pc, #32]	@ (80001c8 <main+0x6c>)
 80001a8:	781b      	ldrb	r3, [r3, #0]
 80001aa:	2b01      	cmp	r3, #1
 80001ac:	d103      	bne.n	80001b6 <main+0x5a>
	            bootloader_main(APP_ADDRESS2);
 80001ae:	4807      	ldr	r0, [pc, #28]	@ (80001cc <main+0x70>)
 80001b0:	f000 f910 	bl	80003d4 <bootloader_main>
 80001b4:	e7dd      	b.n	8000172 <main+0x16>
	        } else {
	            bootloader_main(APP_ADDRESS1);
 80001b6:	4806      	ldr	r0, [pc, #24]	@ (80001d0 <main+0x74>)
 80001b8:	f000 f90c 	bl	80003d4 <bootloader_main>
	  for( i = 0 ; i<=3; i++){
 80001bc:	e7d9      	b.n	8000172 <main+0x16>
 80001be:	bf00      	nop
 80001c0:	40011000 	.word	0x40011000
 80001c4:	40010800 	.word	0x40010800
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006000 	.word	0x08006000
 80001d0:	08004000 	.word	0x08004000

080001d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b090      	sub	sp, #64	@ 0x40
 80001d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001da:	f107 0318 	add.w	r3, r7, #24
 80001de:	2228      	movs	r2, #40	@ 0x28
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f002 fc32 	bl	8002a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e8:	1d3b      	adds	r3, r7, #4
 80001ea:	2200      	movs	r2, #0
 80001ec:	601a      	str	r2, [r3, #0]
 80001ee:	605a      	str	r2, [r3, #4]
 80001f0:	609a      	str	r2, [r3, #8]
 80001f2:	60da      	str	r2, [r3, #12]
 80001f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001f6:	2301      	movs	r3, #1
 80001f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000200:	2300      	movs	r3, #0
 8000202:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000204:	2301      	movs	r3, #1
 8000206:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000208:	2302      	movs	r3, #2
 800020a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800020c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000210:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000212:	2300      	movs	r3, #0
 8000214:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000216:	f107 0318 	add.w	r3, r7, #24
 800021a:	4618      	mov	r0, r3
 800021c:	f001 f95a 	bl	80014d4 <HAL_RCC_OscConfig>
 8000220:	4603      	mov	r3, r0
 8000222:	2b00      	cmp	r3, #0
 8000224:	d001      	beq.n	800022a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000226:	f000 f9a5 	bl	8000574 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022a:	230f      	movs	r3, #15
 800022c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800022e:	2302      	movs	r3, #2
 8000230:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f001 fbc8 	bl	80019d8 <HAL_RCC_ClockConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800024e:	f000 f991 	bl	8000574 <Error_Handler>
  }
}
 8000252:	bf00      	nop
 8000254:	3740      	adds	r7, #64	@ 0x40
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
	...

0800025c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000260:	4b11      	ldr	r3, [pc, #68]	@ (80002a8 <MX_USART1_UART_Init+0x4c>)
 8000262:	4a12      	ldr	r2, [pc, #72]	@ (80002ac <MX_USART1_UART_Init+0x50>)
 8000264:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000266:	4b10      	ldr	r3, [pc, #64]	@ (80002a8 <MX_USART1_UART_Init+0x4c>)
 8000268:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800026c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800026e:	4b0e      	ldr	r3, [pc, #56]	@ (80002a8 <MX_USART1_UART_Init+0x4c>)
 8000270:	2200      	movs	r2, #0
 8000272:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000274:	4b0c      	ldr	r3, [pc, #48]	@ (80002a8 <MX_USART1_UART_Init+0x4c>)
 8000276:	2200      	movs	r2, #0
 8000278:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800027a:	4b0b      	ldr	r3, [pc, #44]	@ (80002a8 <MX_USART1_UART_Init+0x4c>)
 800027c:	2200      	movs	r2, #0
 800027e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000280:	4b09      	ldr	r3, [pc, #36]	@ (80002a8 <MX_USART1_UART_Init+0x4c>)
 8000282:	220c      	movs	r2, #12
 8000284:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000286:	4b08      	ldr	r3, [pc, #32]	@ (80002a8 <MX_USART1_UART_Init+0x4c>)
 8000288:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800028c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800028e:	4b06      	ldr	r3, [pc, #24]	@ (80002a8 <MX_USART1_UART_Init+0x4c>)
 8000290:	2200      	movs	r2, #0
 8000292:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000294:	4804      	ldr	r0, [pc, #16]	@ (80002a8 <MX_USART1_UART_Init+0x4c>)
 8000296:	f001 fd2d 	bl	8001cf4 <HAL_UART_Init>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 80002a0:	f000 f968 	bl	8000574 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002a4:	bf00      	nop
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	2000002c 	.word	0x2000002c
 80002ac:	40013800 	.word	0x40013800

080002b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b088      	sub	sp, #32
 80002b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b6:	f107 0310 	add.w	r3, r7, #16
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c4:	4b24      	ldr	r3, [pc, #144]	@ (8000358 <MX_GPIO_Init+0xa8>)
 80002c6:	699b      	ldr	r3, [r3, #24]
 80002c8:	4a23      	ldr	r2, [pc, #140]	@ (8000358 <MX_GPIO_Init+0xa8>)
 80002ca:	f043 0310 	orr.w	r3, r3, #16
 80002ce:	6193      	str	r3, [r2, #24]
 80002d0:	4b21      	ldr	r3, [pc, #132]	@ (8000358 <MX_GPIO_Init+0xa8>)
 80002d2:	699b      	ldr	r3, [r3, #24]
 80002d4:	f003 0310 	and.w	r3, r3, #16
 80002d8:	60fb      	str	r3, [r7, #12]
 80002da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000358 <MX_GPIO_Init+0xa8>)
 80002de:	699b      	ldr	r3, [r3, #24]
 80002e0:	4a1d      	ldr	r2, [pc, #116]	@ (8000358 <MX_GPIO_Init+0xa8>)
 80002e2:	f043 0320 	orr.w	r3, r3, #32
 80002e6:	6193      	str	r3, [r2, #24]
 80002e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000358 <MX_GPIO_Init+0xa8>)
 80002ea:	699b      	ldr	r3, [r3, #24]
 80002ec:	f003 0320 	and.w	r3, r3, #32
 80002f0:	60bb      	str	r3, [r7, #8]
 80002f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f4:	4b18      	ldr	r3, [pc, #96]	@ (8000358 <MX_GPIO_Init+0xa8>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a17      	ldr	r2, [pc, #92]	@ (8000358 <MX_GPIO_Init+0xa8>)
 80002fa:	f043 0304 	orr.w	r3, r3, #4
 80002fe:	6193      	str	r3, [r2, #24]
 8000300:	4b15      	ldr	r3, [pc, #84]	@ (8000358 <MX_GPIO_Init+0xa8>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	f003 0304 	and.w	r3, r3, #4
 8000308:	607b      	str	r3, [r7, #4]
 800030a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000312:	4812      	ldr	r0, [pc, #72]	@ (800035c <MX_GPIO_Init+0xac>)
 8000314:	f001 f813 	bl	800133e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000318:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800031c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800031e:	2301      	movs	r3, #1
 8000320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000322:	2300      	movs	r3, #0
 8000324:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000326:	2302      	movs	r3, #2
 8000328:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800032a:	f107 0310 	add.w	r3, r7, #16
 800032e:	4619      	mov	r1, r3
 8000330:	480a      	ldr	r0, [pc, #40]	@ (800035c <MX_GPIO_Init+0xac>)
 8000332:	f000 fe71 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000336:	2301      	movs	r3, #1
 8000338:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800033a:	2300      	movs	r3, #0
 800033c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033e:	2300      	movs	r3, #0
 8000340:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000342:	f107 0310 	add.w	r3, r7, #16
 8000346:	4619      	mov	r1, r3
 8000348:	4805      	ldr	r0, [pc, #20]	@ (8000360 <MX_GPIO_Init+0xb0>)
 800034a:	f000 fe65 	bl	8001018 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800034e:	bf00      	nop
 8000350:	3720      	adds	r7, #32
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40021000 	.word	0x40021000
 800035c:	40011000 	.word	0x40011000
 8000360:	40010800 	.word	0x40010800

08000364 <JumpToAddress>:
  return ch;
}


typedef void (*pFunction)(void);
void JumpToAddress(uint32_t addr) {
 8000364:	b580      	push	{r7, lr}
 8000366:	b086      	sub	sp, #24
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
    uint32_t JumpAddress = *(uint32_t *) (addr + 4);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	3304      	adds	r3, #4
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	617b      	str	r3, [r7, #20]
    pFunction Jump = (pFunction) JumpAddress;
 8000374:	697b      	ldr	r3, [r7, #20]
 8000376:	613b      	str	r3, [r7, #16]

    HAL_RCC_DeInit();
 8000378:	f001 f812 	bl	80013a0 <HAL_RCC_DeInit>
    HAL_DeInit();
 800037c:	f000 f9fe 	bl	800077c <HAL_DeInit>
    SysTick->CTRL = 0;
 8000380:	4b0c      	ldr	r3, [pc, #48]	@ (80003b4 <JumpToAddress+0x50>)
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
    SysTick->LOAD = 0;
 8000386:	4b0b      	ldr	r3, [pc, #44]	@ (80003b4 <JumpToAddress+0x50>)
 8000388:	2200      	movs	r2, #0
 800038a:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 800038c:	4b09      	ldr	r3, [pc, #36]	@ (80003b4 <JumpToAddress+0x50>)
 800038e:	2200      	movs	r2, #0
 8000390:	609a      	str	r2, [r3, #8]

    SCB->VTOR = addr;
 8000392:	4a09      	ldr	r2, [pc, #36]	@ (80003b8 <JumpToAddress+0x54>)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	6093      	str	r3, [r2, #8]
    __set_MSP(*(uint32_t *) addr);
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	f383 8808 	msr	MSP, r3
}
 80003a4:	bf00      	nop

    Jump();
 80003a6:	693b      	ldr	r3, [r7, #16]
 80003a8:	4798      	blx	r3
}
 80003aa:	bf00      	nop
 80003ac:	3718      	adds	r7, #24
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	e000e010 	.word	0xe000e010
 80003b8:	e000ed00 	.word	0xe000ed00

080003bc <goto_app>:

void goto_app(uint32_t addr) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
    JumpToAddress(addr);
 80003c4:	6878      	ldr	r0, [r7, #4]
 80003c6:	f7ff ffcd 	bl	8000364 <JumpToAddress>
}
 80003ca:	bf00      	nop
 80003cc:	3708      	adds	r7, #8
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
	...

080003d4 <bootloader_main>:




void bootloader_main(uint32_t APP_ADD)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b0c4      	sub	sp, #272	@ 0x110
 80003d8:	af00      	add	r7, sp, #0
 80003da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80003de:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80003e2:	6018      	str	r0, [r3, #0]
    uint8_t rx_buf[CHUNK_SIZE];
    uint32_t flash_addr = APP_ADD;
 80003e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80003e8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
    uint32_t total_received = 0;
 80003f2:	2300      	movs	r3, #0
 80003f4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    memset(tx_buffer, 0, TX_BUF_SIZE);
 80003f8:	2284      	movs	r2, #132	@ 0x84
 80003fa:	2100      	movs	r1, #0
 80003fc:	4831      	ldr	r0, [pc, #196]	@ (80004c4 <bootloader_main+0xf0>)
 80003fe:	f002 fb25 	bl	8002a4c <memset>
    	  memset(rx_buffer, 0, RX_BUF_SIZE);
 8000402:	2284      	movs	r2, #132	@ 0x84
 8000404:	2100      	movs	r1, #0
 8000406:	4830      	ldr	r0, [pc, #192]	@ (80004c8 <bootloader_main+0xf4>)
 8000408:	f002 fb20 	bl	8002a4c <memset>
          strcpy((char*)tx_buffer, (char*)msg1);
 800040c:	4b2f      	ldr	r3, [pc, #188]	@ (80004cc <bootloader_main+0xf8>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4619      	mov	r1, r3
 8000412:	482c      	ldr	r0, [pc, #176]	@ (80004c4 <bootloader_main+0xf0>)
 8000414:	f002 fb46 	bl	8002aa4 <strcpy>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET );    // Green LED ON
 8000418:	2200      	movs	r2, #0
 800041a:	2101      	movs	r1, #1
 800041c:	482c      	ldr	r0, [pc, #176]	@ (80004d0 <bootloader_main+0xfc>)
 800041e:	f000 ff8e 	bl	800133e <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart1, tx_buffer, strlen(tx_buffer), HAL_MAX_DELAY);
 8000422:	4828      	ldr	r0, [pc, #160]	@ (80004c4 <bootloader_main+0xf0>)
 8000424:	f7ff fe92 	bl	800014c <strlen>
 8000428:	4603      	mov	r3, r0
 800042a:	b29a      	uxth	r2, r3
 800042c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000430:	4924      	ldr	r1, [pc, #144]	@ (80004c4 <bootloader_main+0xf0>)
 8000432:	4828      	ldr	r0, [pc, #160]	@ (80004d4 <bootloader_main+0x100>)
 8000434:	f001 fcae 	bl	8001d94 <HAL_UART_Transmit>

    HAL_Delay(100);
 8000438:	2064      	movs	r0, #100	@ 0x64
 800043a:	f000 fa09 	bl	8000850 <HAL_Delay>
    erase_app_flash(APP_ADD);
 800043e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000442:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000446:	6818      	ldr	r0, [r3, #0]
 8000448:	f000 f846 	bl	80004d8 <erase_app_flash>

    while (total_received < MAX_FW_SIZE) {
 800044c:	e028      	b.n	80004a0 <bootloader_main+0xcc>
        memset(rx_buf, 0xFF, CHUNK_SIZE);
 800044e:	f107 0308 	add.w	r3, r7, #8
 8000452:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000456:	21ff      	movs	r1, #255	@ 0xff
 8000458:	4618      	mov	r0, r3
 800045a:	f002 faf7 	bl	8002a4c <memset>
        if (HAL_UART_Receive(&huart1, rx_buf, CHUNK_SIZE, 1000) == HAL_OK) {
 800045e:	f107 0108 	add.w	r1, r7, #8
 8000462:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000466:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800046a:	481a      	ldr	r0, [pc, #104]	@ (80004d4 <bootloader_main+0x100>)
 800046c:	f001 fd1d 	bl	8001eaa <HAL_UART_Receive>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d114      	bne.n	80004a0 <bootloader_main+0xcc>
            write_flash(flash_addr, rx_buf, CHUNK_SIZE);
 8000476:	f107 0308 	add.w	r3, r7, #8
 800047a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800047e:	4619      	mov	r1, r3
 8000480:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8000484:	f000 f842 	bl	800050c <write_flash>
            flash_addr += CHUNK_SIZE;
 8000488:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800048c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000490:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            total_received += CHUNK_SIZE;
 8000494:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8000498:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800049c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
    while (total_received < MAX_FW_SIZE) {
 80004a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80004a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80004a8:	d3d1      	bcc.n	800044e <bootloader_main+0x7a>
        }
    }

    goto_app(APP_ADD);
 80004aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80004ae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80004b2:	6818      	ldr	r0, [r3, #0]
 80004b4:	f7ff ff82 	bl	80003bc <goto_app>
}
 80004b8:	bf00      	nop
 80004ba:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	200000fc 	.word	0x200000fc
 80004c8:	20000078 	.word	0x20000078
 80004cc:	20000000 	.word	0x20000000
 80004d0:	40010c00 	.word	0x40010c00
 80004d4:	2000002c 	.word	0x2000002c

080004d8 <erase_app_flash>:

static void erase_app_flash(uint32_t APP_ADD)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 80004e0:	f000 fc0a 	bl	8000cf8 <HAL_FLASH_Unlock>
    FLASH_EraseInitTypeDef erase;
    uint32_t error;

    erase.TypeErase = FLASH_TYPEERASE_PAGES;
 80004e4:	2300      	movs	r3, #0
 80004e6:	613b      	str	r3, [r7, #16]
    erase.PageAddress = APP_ADD;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	61bb      	str	r3, [r7, #24]
    erase.NbPages = MAX_FW_SIZE / FLASH_PAGE_SIZE;
 80004ec:	2308      	movs	r3, #8
 80004ee:	61fb      	str	r3, [r7, #28]
    HAL_FLASHEx_Erase(&erase, &error);
 80004f0:	f107 020c 	add.w	r2, r7, #12
 80004f4:	f107 0310 	add.w	r3, r7, #16
 80004f8:	4611      	mov	r1, r2
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 fce4 	bl	8000ec8 <HAL_FLASHEx_Erase>
    HAL_FLASH_Lock();
 8000500:	f000 fc20 	bl	8000d44 <HAL_FLASH_Lock>
}
 8000504:	bf00      	nop
 8000506:	3720      	adds	r7, #32
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}

0800050c <write_flash>:

static void write_flash(uint32_t address, uint8_t *data, uint32_t size)
{
 800050c:	b5b0      	push	{r4, r5, r7, lr}
 800050e:	b086      	sub	sp, #24
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
    HAL_FLASH_Unlock();
 8000518:	f000 fbee 	bl	8000cf8 <HAL_FLASH_Unlock>
    for (uint32_t i = 0; i < size; i += 2) {
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	e01e      	b.n	8000560 <write_flash+0x54>
        uint16_t halfword = data[i] | (data[i+1] << 8);
 8000522:	68ba      	ldr	r2, [r7, #8]
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	4413      	add	r3, r2
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	b21a      	sxth	r2, r3
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	3301      	adds	r3, #1
 8000530:	68b9      	ldr	r1, [r7, #8]
 8000532:	440b      	add	r3, r1
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	b21b      	sxth	r3, r3
 8000538:	021b      	lsls	r3, r3, #8
 800053a:	b21b      	sxth	r3, r3
 800053c:	4313      	orrs	r3, r2
 800053e:	b21b      	sxth	r3, r3
 8000540:	827b      	strh	r3, [r7, #18]
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, address + i, halfword);
 8000542:	68fa      	ldr	r2, [r7, #12]
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	18d1      	adds	r1, r2, r3
 8000548:	8a7b      	ldrh	r3, [r7, #18]
 800054a:	2200      	movs	r2, #0
 800054c:	461c      	mov	r4, r3
 800054e:	4615      	mov	r5, r2
 8000550:	4622      	mov	r2, r4
 8000552:	462b      	mov	r3, r5
 8000554:	2001      	movs	r0, #1
 8000556:	f000 fb5f 	bl	8000c18 <HAL_FLASH_Program>
    for (uint32_t i = 0; i < size; i += 2) {
 800055a:	697b      	ldr	r3, [r7, #20]
 800055c:	3302      	adds	r3, #2
 800055e:	617b      	str	r3, [r7, #20]
 8000560:	697a      	ldr	r2, [r7, #20]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	429a      	cmp	r2, r3
 8000566:	d3dc      	bcc.n	8000522 <write_flash+0x16>
    }
    HAL_FLASH_Lock();
 8000568:	f000 fbec 	bl	8000d44 <HAL_FLASH_Lock>
}
 800056c:	bf00      	nop
 800056e:	3718      	adds	r7, #24
 8000570:	46bd      	mov	sp, r7
 8000572:	bdb0      	pop	{r4, r5, r7, pc}

08000574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000578:	b672      	cpsid	i
}
 800057a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <Error_Handler+0x8>

08000580 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000586:	4b15      	ldr	r3, [pc, #84]	@ (80005dc <HAL_MspInit+0x5c>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	4a14      	ldr	r2, [pc, #80]	@ (80005dc <HAL_MspInit+0x5c>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6193      	str	r3, [r2, #24]
 8000592:	4b12      	ldr	r3, [pc, #72]	@ (80005dc <HAL_MspInit+0x5c>)
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800059e:	4b0f      	ldr	r3, [pc, #60]	@ (80005dc <HAL_MspInit+0x5c>)
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	4a0e      	ldr	r2, [pc, #56]	@ (80005dc <HAL_MspInit+0x5c>)
 80005a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a8:	61d3      	str	r3, [r2, #28]
 80005aa:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <HAL_MspInit+0x5c>)
 80005ac:	69db      	ldr	r3, [r3, #28]
 80005ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80005b6:	4b0a      	ldr	r3, [pc, #40]	@ (80005e0 <HAL_MspInit+0x60>)
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	4a04      	ldr	r2, [pc, #16]	@ (80005e0 <HAL_MspInit+0x60>)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40010000 	.word	0x40010000

080005e4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ec:	f107 0310 	add.w	r3, r7, #16
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a20      	ldr	r2, [pc, #128]	@ (8000680 <HAL_UART_MspInit+0x9c>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d139      	bne.n	8000678 <HAL_UART_MspInit+0x94>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000604:	4b1f      	ldr	r3, [pc, #124]	@ (8000684 <HAL_UART_MspInit+0xa0>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	4a1e      	ldr	r2, [pc, #120]	@ (8000684 <HAL_UART_MspInit+0xa0>)
 800060a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800060e:	6193      	str	r3, [r2, #24]
 8000610:	4b1c      	ldr	r3, [pc, #112]	@ (8000684 <HAL_UART_MspInit+0xa0>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061c:	4b19      	ldr	r3, [pc, #100]	@ (8000684 <HAL_UART_MspInit+0xa0>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4a18      	ldr	r2, [pc, #96]	@ (8000684 <HAL_UART_MspInit+0xa0>)
 8000622:	f043 0304 	orr.w	r3, r3, #4
 8000626:	6193      	str	r3, [r2, #24]
 8000628:	4b16      	ldr	r3, [pc, #88]	@ (8000684 <HAL_UART_MspInit+0xa0>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f003 0304 	and.w	r3, r3, #4
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12;
 8000634:	f44f 5390 	mov.w	r3, #4608	@ 0x1200
 8000638:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063a:	2302      	movs	r3, #2
 800063c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800063e:	2303      	movs	r3, #3
 8000640:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000642:	f107 0310 	add.w	r3, r7, #16
 8000646:	4619      	mov	r1, r3
 8000648:	480f      	ldr	r0, [pc, #60]	@ (8000688 <HAL_UART_MspInit+0xa4>)
 800064a:	f000 fce5 	bl	8001018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800064e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000652:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065c:	f107 0310 	add.w	r3, r7, #16
 8000660:	4619      	mov	r1, r3
 8000662:	4809      	ldr	r0, [pc, #36]	@ (8000688 <HAL_UART_MspInit+0xa4>)
 8000664:	f000 fcd8 	bl	8001018 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2100      	movs	r1, #0
 800066c:	2025      	movs	r0, #37	@ 0x25
 800066e:	f000 f9ea 	bl	8000a46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000672:	2025      	movs	r0, #37	@ 0x25
 8000674:	f000 fa03 	bl	8000a7e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000678:	bf00      	nop
 800067a:	3720      	adds	r7, #32
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40013800 	.word	0x40013800
 8000684:	40021000 	.word	0x40021000
 8000688:	40010800 	.word	0x40010800

0800068c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000690:	bf00      	nop
 8000692:	e7fd      	b.n	8000690 <NMI_Handler+0x4>

08000694 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000698:	bf00      	nop
 800069a:	e7fd      	b.n	8000698 <HardFault_Handler+0x4>

0800069c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <MemManage_Handler+0x4>

080006a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <BusFault_Handler+0x4>

080006ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <UsageFault_Handler+0x4>

080006b4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bc80      	pop	{r7}
 80006ca:	4770      	bx	lr

080006cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006d0:	bf00      	nop
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr

080006d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006dc:	f000 f89c 	bl	8000818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006e8:	4802      	ldr	r0, [pc, #8]	@ (80006f4 <USART1_IRQHandler+0x10>)
 80006ea:	f001 fc75 	bl	8001fd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	2000002c 	.word	0x2000002c

080006f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	bc80      	pop	{r7}
 8000702:	4770      	bx	lr

08000704 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000704:	f7ff fff8 	bl	80006f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000708:	480b      	ldr	r0, [pc, #44]	@ (8000738 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800070a:	490c      	ldr	r1, [pc, #48]	@ (800073c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800070c:	4a0c      	ldr	r2, [pc, #48]	@ (8000740 <LoopFillZerobss+0x16>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000710:	e002      	b.n	8000718 <LoopCopyDataInit>

08000712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000716:	3304      	adds	r3, #4

08000718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800071c:	d3f9      	bcc.n	8000712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071e:	4a09      	ldr	r2, [pc, #36]	@ (8000744 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000720:	4c09      	ldr	r4, [pc, #36]	@ (8000748 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000724:	e001      	b.n	800072a <LoopFillZerobss>

08000726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000728:	3204      	adds	r2, #4

0800072a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800072c:	d3fb      	bcc.n	8000726 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800072e:	f002 f995 	bl	8002a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000732:	f7ff fd13 	bl	800015c <main>
  bx lr
 8000736:	4770      	bx	lr
  ldr r0, =_sdata
 8000738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800073c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000740:	08002b18 	.word	0x08002b18
  ldr r2, =_sbss
 8000744:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000748:	200001a8 	.word	0x200001a8

0800074c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800074c:	e7fe      	b.n	800074c <ADC1_2_IRQHandler>
	...

08000750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000754:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <HAL_Init+0x28>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a07      	ldr	r2, [pc, #28]	@ (8000778 <HAL_Init+0x28>)
 800075a:	f043 0310 	orr.w	r3, r3, #16
 800075e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000760:	2003      	movs	r0, #3
 8000762:	f000 f965 	bl	8000a30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000766:	200f      	movs	r0, #15
 8000768:	f000 f826 	bl	80007b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800076c:	f7ff ff08 	bl	8000580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000770:	2300      	movs	r3, #0
}
 8000772:	4618      	mov	r0, r3
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40022000 	.word	0x40022000

0800077c <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000780:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <HAL_DeInit+0x2c>)
 8000782:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000786:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000788:	4b07      	ldr	r3, [pc, #28]	@ (80007a8 <HAL_DeInit+0x2c>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 800078e:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <HAL_DeInit+0x2c>)
 8000790:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000794:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8000796:	4b04      	ldr	r3, [pc, #16]	@ (80007a8 <HAL_DeInit+0x2c>)
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 800079c:	f000 f806 	bl	80007ac <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000

080007ac <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 80007b0:	bf00      	nop
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr

080007b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007c0:	4b12      	ldr	r3, [pc, #72]	@ (800080c <HAL_InitTick+0x54>)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <HAL_InitTick+0x58>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	4619      	mov	r1, r3
 80007ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80007d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80007d6:	4618      	mov	r0, r3
 80007d8:	f000 f95f 	bl	8000a9a <HAL_SYSTICK_Config>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007e2:	2301      	movs	r3, #1
 80007e4:	e00e      	b.n	8000804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2b0f      	cmp	r3, #15
 80007ea:	d80a      	bhi.n	8000802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007ec:	2200      	movs	r2, #0
 80007ee:	6879      	ldr	r1, [r7, #4]
 80007f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007f4:	f000 f927 	bl	8000a46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007f8:	4a06      	ldr	r2, [pc, #24]	@ (8000814 <HAL_InitTick+0x5c>)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007fe:	2300      	movs	r3, #0
 8000800:	e000      	b.n	8000804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000802:	2301      	movs	r3, #1
}
 8000804:	4618      	mov	r0, r3
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000004 	.word	0x20000004
 8000810:	2000000c 	.word	0x2000000c
 8000814:	20000008 	.word	0x20000008

08000818 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800081c:	4b05      	ldr	r3, [pc, #20]	@ (8000834 <HAL_IncTick+0x1c>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	461a      	mov	r2, r3
 8000822:	4b05      	ldr	r3, [pc, #20]	@ (8000838 <HAL_IncTick+0x20>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4413      	add	r3, r2
 8000828:	4a03      	ldr	r2, [pc, #12]	@ (8000838 <HAL_IncTick+0x20>)
 800082a:	6013      	str	r3, [r2, #0]
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr
 8000834:	2000000c 	.word	0x2000000c
 8000838:	20000180 	.word	0x20000180

0800083c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  return uwTick;
 8000840:	4b02      	ldr	r3, [pc, #8]	@ (800084c <HAL_GetTick+0x10>)
 8000842:	681b      	ldr	r3, [r3, #0]
}
 8000844:	4618      	mov	r0, r3
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	20000180 	.word	0x20000180

08000850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000858:	f7ff fff0 	bl	800083c <HAL_GetTick>
 800085c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000868:	d005      	beq.n	8000876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800086a:	4b0a      	ldr	r3, [pc, #40]	@ (8000894 <HAL_Delay+0x44>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	461a      	mov	r2, r3
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	4413      	add	r3, r2
 8000874:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000876:	bf00      	nop
 8000878:	f7ff ffe0 	bl	800083c <HAL_GetTick>
 800087c:	4602      	mov	r2, r0
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	429a      	cmp	r2, r3
 8000886:	d8f7      	bhi.n	8000878 <HAL_Delay+0x28>
  {
  }
}
 8000888:	bf00      	nop
 800088a:	bf00      	nop
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2000000c 	.word	0x2000000c

08000898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f003 0307 	and.w	r3, r3, #7
 80008a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a8:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <__NVIC_SetPriorityGrouping+0x44>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008b4:	4013      	ands	r3, r2
 80008b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ca:	4a04      	ldr	r2, [pc, #16]	@ (80008dc <__NVIC_SetPriorityGrouping+0x44>)
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	60d3      	str	r3, [r2, #12]
}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e4:	4b04      	ldr	r3, [pc, #16]	@ (80008f8 <__NVIC_GetPriorityGrouping+0x18>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	f003 0307 	and.w	r3, r3, #7
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090a:	2b00      	cmp	r3, #0
 800090c:	db0b      	blt.n	8000926 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	f003 021f 	and.w	r2, r3, #31
 8000914:	4906      	ldr	r1, [pc, #24]	@ (8000930 <__NVIC_EnableIRQ+0x34>)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	095b      	lsrs	r3, r3, #5
 800091c:	2001      	movs	r0, #1
 800091e:	fa00 f202 	lsl.w	r2, r0, r2
 8000922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000926:	bf00      	nop
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	bc80      	pop	{r7}
 800092e:	4770      	bx	lr
 8000930:	e000e100 	.word	0xe000e100

08000934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	6039      	str	r1, [r7, #0]
 800093e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000944:	2b00      	cmp	r3, #0
 8000946:	db0a      	blt.n	800095e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	b2da      	uxtb	r2, r3
 800094c:	490c      	ldr	r1, [pc, #48]	@ (8000980 <__NVIC_SetPriority+0x4c>)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	0112      	lsls	r2, r2, #4
 8000954:	b2d2      	uxtb	r2, r2
 8000956:	440b      	add	r3, r1
 8000958:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800095c:	e00a      	b.n	8000974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4908      	ldr	r1, [pc, #32]	@ (8000984 <__NVIC_SetPriority+0x50>)
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	f003 030f 	and.w	r3, r3, #15
 800096a:	3b04      	subs	r3, #4
 800096c:	0112      	lsls	r2, r2, #4
 800096e:	b2d2      	uxtb	r2, r2
 8000970:	440b      	add	r3, r1
 8000972:	761a      	strb	r2, [r3, #24]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000e100 	.word	0xe000e100
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000988:	b480      	push	{r7}
 800098a:	b089      	sub	sp, #36	@ 0x24
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	f1c3 0307 	rsb	r3, r3, #7
 80009a2:	2b04      	cmp	r3, #4
 80009a4:	bf28      	it	cs
 80009a6:	2304      	movcs	r3, #4
 80009a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3304      	adds	r3, #4
 80009ae:	2b06      	cmp	r3, #6
 80009b0:	d902      	bls.n	80009b8 <NVIC_EncodePriority+0x30>
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	3b03      	subs	r3, #3
 80009b6:	e000      	b.n	80009ba <NVIC_EncodePriority+0x32>
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43da      	mvns	r2, r3
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	401a      	ands	r2, r3
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	fa01 f303 	lsl.w	r3, r1, r3
 80009da:	43d9      	mvns	r1, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e0:	4313      	orrs	r3, r2
         );
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3724      	adds	r7, #36	@ 0x24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009fc:	d301      	bcc.n	8000a02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009fe:	2301      	movs	r3, #1
 8000a00:	e00f      	b.n	8000a22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a02:	4a0a      	ldr	r2, [pc, #40]	@ (8000a2c <SysTick_Config+0x40>)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	3b01      	subs	r3, #1
 8000a08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a0a:	210f      	movs	r1, #15
 8000a0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a10:	f7ff ff90 	bl	8000934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a14:	4b05      	ldr	r3, [pc, #20]	@ (8000a2c <SysTick_Config+0x40>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a1a:	4b04      	ldr	r3, [pc, #16]	@ (8000a2c <SysTick_Config+0x40>)
 8000a1c:	2207      	movs	r2, #7
 8000a1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	e000e010 	.word	0xe000e010

08000a30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a38:	6878      	ldr	r0, [r7, #4]
 8000a3a:	f7ff ff2d 	bl	8000898 <__NVIC_SetPriorityGrouping>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b086      	sub	sp, #24
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	60b9      	str	r1, [r7, #8]
 8000a50:	607a      	str	r2, [r7, #4]
 8000a52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a58:	f7ff ff42 	bl	80008e0 <__NVIC_GetPriorityGrouping>
 8000a5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	68b9      	ldr	r1, [r7, #8]
 8000a62:	6978      	ldr	r0, [r7, #20]
 8000a64:	f7ff ff90 	bl	8000988 <NVIC_EncodePriority>
 8000a68:	4602      	mov	r2, r0
 8000a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a6e:	4611      	mov	r1, r2
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff5f 	bl	8000934 <__NVIC_SetPriority>
}
 8000a76:	bf00      	nop
 8000a78:	3718      	adds	r7, #24
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b082      	sub	sp, #8
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	4603      	mov	r3, r0
 8000a86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ff35 	bl	80008fc <__NVIC_EnableIRQ>
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aa2:	6878      	ldr	r0, [r7, #4]
 8000aa4:	f7ff ffa2 	bl	80009ec <SysTick_Config>
 8000aa8:	4603      	mov	r3, r0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b085      	sub	sp, #20
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000aba:	2300      	movs	r3, #0
 8000abc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b02      	cmp	r3, #2
 8000ac8:	d008      	beq.n	8000adc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2204      	movs	r2, #4
 8000ace:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e020      	b.n	8000b1e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f022 020e 	bic.w	r2, r2, #14
 8000aea:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f022 0201 	bic.w	r2, r2, #1
 8000afa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b04:	2101      	movs	r1, #1
 8000b06:	fa01 f202 	lsl.w	r2, r1, r2
 8000b0a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2201      	movs	r2, #1
 8000b10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2200      	movs	r2, #0
 8000b18:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b30:	2300      	movs	r3, #0
 8000b32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	d005      	beq.n	8000b4c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2204      	movs	r2, #4
 8000b44:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	73fb      	strb	r3, [r7, #15]
 8000b4a:	e051      	b.n	8000bf0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	681a      	ldr	r2, [r3, #0]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f022 020e 	bic.w	r2, r2, #14
 8000b5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f022 0201 	bic.w	r2, r2, #1
 8000b6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a22      	ldr	r2, [pc, #136]	@ (8000bfc <HAL_DMA_Abort_IT+0xd4>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d029      	beq.n	8000bca <HAL_DMA_Abort_IT+0xa2>
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a21      	ldr	r2, [pc, #132]	@ (8000c00 <HAL_DMA_Abort_IT+0xd8>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	d022      	beq.n	8000bc6 <HAL_DMA_Abort_IT+0x9e>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a1f      	ldr	r2, [pc, #124]	@ (8000c04 <HAL_DMA_Abort_IT+0xdc>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d01a      	beq.n	8000bc0 <HAL_DMA_Abort_IT+0x98>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4a1e      	ldr	r2, [pc, #120]	@ (8000c08 <HAL_DMA_Abort_IT+0xe0>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d012      	beq.n	8000bba <HAL_DMA_Abort_IT+0x92>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a1c      	ldr	r2, [pc, #112]	@ (8000c0c <HAL_DMA_Abort_IT+0xe4>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d00a      	beq.n	8000bb4 <HAL_DMA_Abort_IT+0x8c>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a1b      	ldr	r2, [pc, #108]	@ (8000c10 <HAL_DMA_Abort_IT+0xe8>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d102      	bne.n	8000bae <HAL_DMA_Abort_IT+0x86>
 8000ba8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000bac:	e00e      	b.n	8000bcc <HAL_DMA_Abort_IT+0xa4>
 8000bae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000bb2:	e00b      	b.n	8000bcc <HAL_DMA_Abort_IT+0xa4>
 8000bb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bb8:	e008      	b.n	8000bcc <HAL_DMA_Abort_IT+0xa4>
 8000bba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bbe:	e005      	b.n	8000bcc <HAL_DMA_Abort_IT+0xa4>
 8000bc0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bc4:	e002      	b.n	8000bcc <HAL_DMA_Abort_IT+0xa4>
 8000bc6:	2310      	movs	r3, #16
 8000bc8:	e000      	b.n	8000bcc <HAL_DMA_Abort_IT+0xa4>
 8000bca:	2301      	movs	r3, #1
 8000bcc:	4a11      	ldr	r2, [pc, #68]	@ (8000c14 <HAL_DMA_Abort_IT+0xec>)
 8000bce:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	2200      	movs	r2, #0
 8000bdc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d003      	beq.n	8000bf0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	4798      	blx	r3
    } 
  }
  return status;
 8000bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40020008 	.word	0x40020008
 8000c00:	4002001c 	.word	0x4002001c
 8000c04:	40020030 	.word	0x40020030
 8000c08:	40020044 	.word	0x40020044
 8000c0c:	40020058 	.word	0x40020058
 8000c10:	4002006c 	.word	0x4002006c
 8000c14:	40020000 	.word	0x40020000

08000c18 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c1a:	b087      	sub	sp, #28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	60f8      	str	r0, [r7, #12]
 8000c20:	60b9      	str	r1, [r7, #8]
 8000c22:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000c32:	4b2f      	ldr	r3, [pc, #188]	@ (8000cf0 <HAL_FLASH_Program+0xd8>)
 8000c34:	7e1b      	ldrb	r3, [r3, #24]
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d101      	bne.n	8000c3e <HAL_FLASH_Program+0x26>
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	e054      	b.n	8000ce8 <HAL_FLASH_Program+0xd0>
 8000c3e:	4b2c      	ldr	r3, [pc, #176]	@ (8000cf0 <HAL_FLASH_Program+0xd8>)
 8000c40:	2201      	movs	r2, #1
 8000c42:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000c44:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000c48:	f000 f8a8 	bl	8000d9c <FLASH_WaitForLastOperation>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000c50:	7dfb      	ldrb	r3, [r7, #23]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d144      	bne.n	8000ce0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d102      	bne.n	8000c62 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	757b      	strb	r3, [r7, #21]
 8000c60:	e007      	b.n	8000c72 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d102      	bne.n	8000c6e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	757b      	strb	r3, [r7, #21]
 8000c6c:	e001      	b.n	8000c72 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000c6e:	2304      	movs	r3, #4
 8000c70:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000c72:	2300      	movs	r3, #0
 8000c74:	75bb      	strb	r3, [r7, #22]
 8000c76:	e02d      	b.n	8000cd4 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000c78:	7dbb      	ldrb	r3, [r7, #22]
 8000c7a:	005a      	lsls	r2, r3, #1
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	eb02 0c03 	add.w	ip, r2, r3
 8000c82:	7dbb      	ldrb	r3, [r7, #22]
 8000c84:	0119      	lsls	r1, r3, #4
 8000c86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000c8a:	f1c1 0620 	rsb	r6, r1, #32
 8000c8e:	f1a1 0020 	sub.w	r0, r1, #32
 8000c92:	fa22 f401 	lsr.w	r4, r2, r1
 8000c96:	fa03 f606 	lsl.w	r6, r3, r6
 8000c9a:	4334      	orrs	r4, r6
 8000c9c:	fa23 f000 	lsr.w	r0, r3, r0
 8000ca0:	4304      	orrs	r4, r0
 8000ca2:	fa23 f501 	lsr.w	r5, r3, r1
 8000ca6:	b2a3      	uxth	r3, r4
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4660      	mov	r0, ip
 8000cac:	f000 f85a 	bl	8000d64 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000cb0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000cb4:	f000 f872 	bl	8000d9c <FLASH_WaitForLastOperation>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000cbc:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf4 <HAL_FLASH_Program+0xdc>)
 8000cbe:	691b      	ldr	r3, [r3, #16]
 8000cc0:	4a0c      	ldr	r2, [pc, #48]	@ (8000cf4 <HAL_FLASH_Program+0xdc>)
 8000cc2:	f023 0301 	bic.w	r3, r3, #1
 8000cc6:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000cc8:	7dfb      	ldrb	r3, [r7, #23]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d107      	bne.n	8000cde <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000cce:	7dbb      	ldrb	r3, [r7, #22]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	75bb      	strb	r3, [r7, #22]
 8000cd4:	7dba      	ldrb	r2, [r7, #22]
 8000cd6:	7d7b      	ldrb	r3, [r7, #21]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d3cd      	bcc.n	8000c78 <HAL_FLASH_Program+0x60>
 8000cdc:	e000      	b.n	8000ce0 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000cde:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000ce0:	4b03      	ldr	r3, [pc, #12]	@ (8000cf0 <HAL_FLASH_Program+0xd8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	761a      	strb	r2, [r3, #24]

  return status;
 8000ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	371c      	adds	r7, #28
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cf0:	20000188 	.word	0x20000188
 8000cf4:	40022000 	.word	0x40022000

08000cf8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000d02:	4b0d      	ldr	r3, [pc, #52]	@ (8000d38 <HAL_FLASH_Unlock+0x40>)
 8000d04:	691b      	ldr	r3, [r3, #16]
 8000d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d00d      	beq.n	8000d2a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d38 <HAL_FLASH_Unlock+0x40>)
 8000d10:	4a0a      	ldr	r2, [pc, #40]	@ (8000d3c <HAL_FLASH_Unlock+0x44>)
 8000d12:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000d14:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <HAL_FLASH_Unlock+0x40>)
 8000d16:	4a0a      	ldr	r2, [pc, #40]	@ (8000d40 <HAL_FLASH_Unlock+0x48>)
 8000d18:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000d1a:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <HAL_FLASH_Unlock+0x40>)
 8000d1c:	691b      	ldr	r3, [r3, #16]
 8000d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	40022000 	.word	0x40022000
 8000d3c:	45670123 	.word	0x45670123
 8000d40:	cdef89ab 	.word	0xcdef89ab

08000d44 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8000d48:	4b05      	ldr	r3, [pc, #20]	@ (8000d60 <HAL_FLASH_Lock+0x1c>)
 8000d4a:	691b      	ldr	r3, [r3, #16]
 8000d4c:	4a04      	ldr	r2, [pc, #16]	@ (8000d60 <HAL_FLASH_Lock+0x1c>)
 8000d4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d52:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	40022000 	.word	0x40022000

08000d64 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000d70:	4b08      	ldr	r3, [pc, #32]	@ (8000d94 <FLASH_Program_HalfWord+0x30>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000d76:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <FLASH_Program_HalfWord+0x34>)
 8000d78:	691b      	ldr	r3, [r3, #16]
 8000d7a:	4a07      	ldr	r2, [pc, #28]	@ (8000d98 <FLASH_Program_HalfWord+0x34>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	887a      	ldrh	r2, [r7, #2]
 8000d86:	801a      	strh	r2, [r3, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000188 	.word	0x20000188
 8000d98:	40022000 	.word	0x40022000

08000d9c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000da4:	f7ff fd4a 	bl	800083c <HAL_GetTick>
 8000da8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000daa:	e010      	b.n	8000dce <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000db2:	d00c      	beq.n	8000dce <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d007      	beq.n	8000dca <FLASH_WaitForLastOperation+0x2e>
 8000dba:	f7ff fd3f 	bl	800083c <HAL_GetTick>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d201      	bcs.n	8000dce <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e025      	b.n	8000e1a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000dce:	4b15      	ldr	r3, [pc, #84]	@ (8000e24 <FLASH_WaitForLastOperation+0x88>)
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1e8      	bne.n	8000dac <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000dda:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <FLASH_WaitForLastOperation+0x88>)
 8000ddc:	68db      	ldr	r3, [r3, #12]
 8000dde:	f003 0320 	and.w	r3, r3, #32
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d002      	beq.n	8000dec <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000de6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <FLASH_WaitForLastOperation+0x88>)
 8000de8:	2220      	movs	r2, #32
 8000dea:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000dec:	4b0d      	ldr	r3, [pc, #52]	@ (8000e24 <FLASH_WaitForLastOperation+0x88>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	f003 0310 	and.w	r3, r3, #16
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d10b      	bne.n	8000e10 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000df8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <FLASH_WaitForLastOperation+0x88>)
 8000dfa:	69db      	ldr	r3, [r3, #28]
 8000dfc:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d105      	bne.n	8000e10 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e04:	4b07      	ldr	r3, [pc, #28]	@ (8000e24 <FLASH_WaitForLastOperation+0x88>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d003      	beq.n	8000e18 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000e10:	f000 f80a 	bl	8000e28 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	e000      	b.n	8000e1a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3710      	adds	r7, #16
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40022000 	.word	0x40022000

08000e28 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000e32:	4b23      	ldr	r3, [pc, #140]	@ (8000ec0 <FLASH_SetErrorCode+0x98>)
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	f003 0310 	and.w	r3, r3, #16
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d009      	beq.n	8000e52 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000e3e:	4b21      	ldr	r3, [pc, #132]	@ (8000ec4 <FLASH_SetErrorCode+0x9c>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	f043 0302 	orr.w	r3, r3, #2
 8000e46:	4a1f      	ldr	r2, [pc, #124]	@ (8000ec4 <FLASH_SetErrorCode+0x9c>)
 8000e48:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f043 0310 	orr.w	r3, r3, #16
 8000e50:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000e52:	4b1b      	ldr	r3, [pc, #108]	@ (8000ec0 <FLASH_SetErrorCode+0x98>)
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d009      	beq.n	8000e72 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000e5e:	4b19      	ldr	r3, [pc, #100]	@ (8000ec4 <FLASH_SetErrorCode+0x9c>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	4a17      	ldr	r2, [pc, #92]	@ (8000ec4 <FLASH_SetErrorCode+0x9c>)
 8000e68:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000e72:	4b13      	ldr	r3, [pc, #76]	@ (8000ec0 <FLASH_SetErrorCode+0x98>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d00b      	beq.n	8000e96 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ec4 <FLASH_SetErrorCode+0x9c>)
 8000e80:	69db      	ldr	r3, [r3, #28]
 8000e82:	f043 0304 	orr.w	r3, r3, #4
 8000e86:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec4 <FLASH_SetErrorCode+0x9c>)
 8000e88:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <FLASH_SetErrorCode+0x98>)
 8000e8c:	69db      	ldr	r3, [r3, #28]
 8000e8e:	4a0c      	ldr	r2, [pc, #48]	@ (8000ec0 <FLASH_SetErrorCode+0x98>)
 8000e90:	f023 0301 	bic.w	r3, r3, #1
 8000e94:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f240 1201 	movw	r2, #257	@ 0x101
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	d106      	bne.n	8000eae <FLASH_SetErrorCode+0x86>
 8000ea0:	4b07      	ldr	r3, [pc, #28]	@ (8000ec0 <FLASH_SetErrorCode+0x98>)
 8000ea2:	69db      	ldr	r3, [r3, #28]
 8000ea4:	4a06      	ldr	r2, [pc, #24]	@ (8000ec0 <FLASH_SetErrorCode+0x98>)
 8000ea6:	f023 0301 	bic.w	r3, r3, #1
 8000eaa:	61d3      	str	r3, [r2, #28]
}  
 8000eac:	e002      	b.n	8000eb4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000eae:	4a04      	ldr	r2, [pc, #16]	@ (8000ec0 <FLASH_SetErrorCode+0x98>)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	60d3      	str	r3, [r2, #12]
}  
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	40022000 	.word	0x40022000
 8000ec4:	20000188 	.word	0x20000188

08000ec8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
 8000ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000eda:	4b2f      	ldr	r3, [pc, #188]	@ (8000f98 <HAL_FLASHEx_Erase+0xd0>)
 8000edc:	7e1b      	ldrb	r3, [r3, #24]
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d101      	bne.n	8000ee6 <HAL_FLASHEx_Erase+0x1e>
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	e053      	b.n	8000f8e <HAL_FLASHEx_Erase+0xc6>
 8000ee6:	4b2c      	ldr	r3, [pc, #176]	@ (8000f98 <HAL_FLASHEx_Erase+0xd0>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d116      	bne.n	8000f22 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000ef4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000ef8:	f7ff ff50 	bl	8000d9c <FLASH_WaitForLastOperation>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d141      	bne.n	8000f86 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8000f02:	2001      	movs	r0, #1
 8000f04:	f000 f84c 	bl	8000fa0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f08:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000f0c:	f7ff ff46 	bl	8000d9c <FLASH_WaitForLastOperation>
 8000f10:	4603      	mov	r3, r0
 8000f12:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8000f14:	4b21      	ldr	r3, [pc, #132]	@ (8000f9c <HAL_FLASHEx_Erase+0xd4>)
 8000f16:	691b      	ldr	r3, [r3, #16]
 8000f18:	4a20      	ldr	r2, [pc, #128]	@ (8000f9c <HAL_FLASHEx_Erase+0xd4>)
 8000f1a:	f023 0304 	bic.w	r3, r3, #4
 8000f1e:	6113      	str	r3, [r2, #16]
 8000f20:	e031      	b.n	8000f86 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8000f22:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000f26:	f7ff ff39 	bl	8000d9c <FLASH_WaitForLastOperation>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d12a      	bne.n	8000f86 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f36:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	e019      	b.n	8000f74 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8000f40:	68b8      	ldr	r0, [r7, #8]
 8000f42:	f000 f849 	bl	8000fd8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f46:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000f4a:	f7ff ff27 	bl	8000d9c <FLASH_WaitForLastOperation>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8000f52:	4b12      	ldr	r3, [pc, #72]	@ (8000f9c <HAL_FLASHEx_Erase+0xd4>)
 8000f54:	691b      	ldr	r3, [r3, #16]
 8000f56:	4a11      	ldr	r2, [pc, #68]	@ (8000f9c <HAL_FLASHEx_Erase+0xd4>)
 8000f58:	f023 0302 	bic.w	r3, r3, #2
 8000f5c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8000f5e:	7bfb      	ldrb	r3, [r7, #15]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d003      	beq.n	8000f6c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68ba      	ldr	r2, [r7, #8]
 8000f68:	601a      	str	r2, [r3, #0]
            break;
 8000f6a:	e00c      	b.n	8000f86 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8000f72:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	029a      	lsls	r2, r3, #10
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	4413      	add	r3, r2
 8000f80:	68ba      	ldr	r2, [r7, #8]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d3dc      	bcc.n	8000f40 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000f86:	4b04      	ldr	r3, [pc, #16]	@ (8000f98 <HAL_FLASHEx_Erase+0xd0>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	761a      	strb	r2, [r3, #24]

  return status;
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3710      	adds	r7, #16
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000188 	.word	0x20000188
 8000f9c:	40022000 	.word	0x40022000

08000fa0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	@ (8000fd0 <FLASH_MassErase+0x30>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8000fae:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <FLASH_MassErase+0x34>)
 8000fb0:	691b      	ldr	r3, [r3, #16]
 8000fb2:	4a08      	ldr	r2, [pc, #32]	@ (8000fd4 <FLASH_MassErase+0x34>)
 8000fb4:	f043 0304 	orr.w	r3, r3, #4
 8000fb8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000fba:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <FLASH_MassErase+0x34>)
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	4a05      	ldr	r2, [pc, #20]	@ (8000fd4 <FLASH_MassErase+0x34>)
 8000fc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fc4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	20000188 	.word	0x20000188
 8000fd4:	40022000 	.word	0x40022000

08000fd8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <FLASH_PageErase+0x38>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8001014 <FLASH_PageErase+0x3c>)
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	4a0a      	ldr	r2, [pc, #40]	@ (8001014 <FLASH_PageErase+0x3c>)
 8000fec:	f043 0302 	orr.w	r3, r3, #2
 8000ff0:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8000ff2:	4a08      	ldr	r2, [pc, #32]	@ (8001014 <FLASH_PageErase+0x3c>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8000ff8:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <FLASH_PageErase+0x3c>)
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	4a05      	ldr	r2, [pc, #20]	@ (8001014 <FLASH_PageErase+0x3c>)
 8000ffe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001002:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000188 	.word	0x20000188
 8001014:	40022000 	.word	0x40022000

08001018 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001018:	b480      	push	{r7}
 800101a:	b08b      	sub	sp, #44	@ 0x2c
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001026:	2300      	movs	r3, #0
 8001028:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800102a:	e161      	b.n	80012f0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800102c:	2201      	movs	r2, #1
 800102e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	69fa      	ldr	r2, [r7, #28]
 800103c:	4013      	ands	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	429a      	cmp	r2, r3
 8001046:	f040 8150 	bne.w	80012ea <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	4a97      	ldr	r2, [pc, #604]	@ (80012ac <HAL_GPIO_Init+0x294>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d05e      	beq.n	8001112 <HAL_GPIO_Init+0xfa>
 8001054:	4a95      	ldr	r2, [pc, #596]	@ (80012ac <HAL_GPIO_Init+0x294>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d875      	bhi.n	8001146 <HAL_GPIO_Init+0x12e>
 800105a:	4a95      	ldr	r2, [pc, #596]	@ (80012b0 <HAL_GPIO_Init+0x298>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d058      	beq.n	8001112 <HAL_GPIO_Init+0xfa>
 8001060:	4a93      	ldr	r2, [pc, #588]	@ (80012b0 <HAL_GPIO_Init+0x298>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d86f      	bhi.n	8001146 <HAL_GPIO_Init+0x12e>
 8001066:	4a93      	ldr	r2, [pc, #588]	@ (80012b4 <HAL_GPIO_Init+0x29c>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d052      	beq.n	8001112 <HAL_GPIO_Init+0xfa>
 800106c:	4a91      	ldr	r2, [pc, #580]	@ (80012b4 <HAL_GPIO_Init+0x29c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d869      	bhi.n	8001146 <HAL_GPIO_Init+0x12e>
 8001072:	4a91      	ldr	r2, [pc, #580]	@ (80012b8 <HAL_GPIO_Init+0x2a0>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d04c      	beq.n	8001112 <HAL_GPIO_Init+0xfa>
 8001078:	4a8f      	ldr	r2, [pc, #572]	@ (80012b8 <HAL_GPIO_Init+0x2a0>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d863      	bhi.n	8001146 <HAL_GPIO_Init+0x12e>
 800107e:	4a8f      	ldr	r2, [pc, #572]	@ (80012bc <HAL_GPIO_Init+0x2a4>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d046      	beq.n	8001112 <HAL_GPIO_Init+0xfa>
 8001084:	4a8d      	ldr	r2, [pc, #564]	@ (80012bc <HAL_GPIO_Init+0x2a4>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d85d      	bhi.n	8001146 <HAL_GPIO_Init+0x12e>
 800108a:	2b12      	cmp	r3, #18
 800108c:	d82a      	bhi.n	80010e4 <HAL_GPIO_Init+0xcc>
 800108e:	2b12      	cmp	r3, #18
 8001090:	d859      	bhi.n	8001146 <HAL_GPIO_Init+0x12e>
 8001092:	a201      	add	r2, pc, #4	@ (adr r2, 8001098 <HAL_GPIO_Init+0x80>)
 8001094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001098:	08001113 	.word	0x08001113
 800109c:	080010ed 	.word	0x080010ed
 80010a0:	080010ff 	.word	0x080010ff
 80010a4:	08001141 	.word	0x08001141
 80010a8:	08001147 	.word	0x08001147
 80010ac:	08001147 	.word	0x08001147
 80010b0:	08001147 	.word	0x08001147
 80010b4:	08001147 	.word	0x08001147
 80010b8:	08001147 	.word	0x08001147
 80010bc:	08001147 	.word	0x08001147
 80010c0:	08001147 	.word	0x08001147
 80010c4:	08001147 	.word	0x08001147
 80010c8:	08001147 	.word	0x08001147
 80010cc:	08001147 	.word	0x08001147
 80010d0:	08001147 	.word	0x08001147
 80010d4:	08001147 	.word	0x08001147
 80010d8:	08001147 	.word	0x08001147
 80010dc:	080010f5 	.word	0x080010f5
 80010e0:	08001109 	.word	0x08001109
 80010e4:	4a76      	ldr	r2, [pc, #472]	@ (80012c0 <HAL_GPIO_Init+0x2a8>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d013      	beq.n	8001112 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010ea:	e02c      	b.n	8001146 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	623b      	str	r3, [r7, #32]
          break;
 80010f2:	e029      	b.n	8001148 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	3304      	adds	r3, #4
 80010fa:	623b      	str	r3, [r7, #32]
          break;
 80010fc:	e024      	b.n	8001148 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	68db      	ldr	r3, [r3, #12]
 8001102:	3308      	adds	r3, #8
 8001104:	623b      	str	r3, [r7, #32]
          break;
 8001106:	e01f      	b.n	8001148 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	330c      	adds	r3, #12
 800110e:	623b      	str	r3, [r7, #32]
          break;
 8001110:	e01a      	b.n	8001148 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d102      	bne.n	8001120 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800111a:	2304      	movs	r3, #4
 800111c:	623b      	str	r3, [r7, #32]
          break;
 800111e:	e013      	b.n	8001148 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	2b01      	cmp	r3, #1
 8001126:	d105      	bne.n	8001134 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001128:	2308      	movs	r3, #8
 800112a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	69fa      	ldr	r2, [r7, #28]
 8001130:	611a      	str	r2, [r3, #16]
          break;
 8001132:	e009      	b.n	8001148 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001134:	2308      	movs	r3, #8
 8001136:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69fa      	ldr	r2, [r7, #28]
 800113c:	615a      	str	r2, [r3, #20]
          break;
 800113e:	e003      	b.n	8001148 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001140:	2300      	movs	r3, #0
 8001142:	623b      	str	r3, [r7, #32]
          break;
 8001144:	e000      	b.n	8001148 <HAL_GPIO_Init+0x130>
          break;
 8001146:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	2bff      	cmp	r3, #255	@ 0xff
 800114c:	d801      	bhi.n	8001152 <HAL_GPIO_Init+0x13a>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	e001      	b.n	8001156 <HAL_GPIO_Init+0x13e>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3304      	adds	r3, #4
 8001156:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	2bff      	cmp	r3, #255	@ 0xff
 800115c:	d802      	bhi.n	8001164 <HAL_GPIO_Init+0x14c>
 800115e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	e002      	b.n	800116a <HAL_GPIO_Init+0x152>
 8001164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001166:	3b08      	subs	r3, #8
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	210f      	movs	r1, #15
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	fa01 f303 	lsl.w	r3, r1, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	401a      	ands	r2, r3
 800117c:	6a39      	ldr	r1, [r7, #32]
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	fa01 f303 	lsl.w	r3, r1, r3
 8001184:	431a      	orrs	r2, r3
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001192:	2b00      	cmp	r3, #0
 8001194:	f000 80a9 	beq.w	80012ea <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001198:	4b4a      	ldr	r3, [pc, #296]	@ (80012c4 <HAL_GPIO_Init+0x2ac>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	4a49      	ldr	r2, [pc, #292]	@ (80012c4 <HAL_GPIO_Init+0x2ac>)
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	6193      	str	r3, [r2, #24]
 80011a4:	4b47      	ldr	r3, [pc, #284]	@ (80012c4 <HAL_GPIO_Init+0x2ac>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011b0:	4a45      	ldr	r2, [pc, #276]	@ (80012c8 <HAL_GPIO_Init+0x2b0>)
 80011b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011b4:	089b      	lsrs	r3, r3, #2
 80011b6:	3302      	adds	r3, #2
 80011b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c0:	f003 0303 	and.w	r3, r3, #3
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	220f      	movs	r2, #15
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	4013      	ands	r3, r2
 80011d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a3d      	ldr	r2, [pc, #244]	@ (80012cc <HAL_GPIO_Init+0x2b4>)
 80011d8:	4293      	cmp	r3, r2
 80011da:	d00d      	beq.n	80011f8 <HAL_GPIO_Init+0x1e0>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4a3c      	ldr	r2, [pc, #240]	@ (80012d0 <HAL_GPIO_Init+0x2b8>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d007      	beq.n	80011f4 <HAL_GPIO_Init+0x1dc>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a3b      	ldr	r2, [pc, #236]	@ (80012d4 <HAL_GPIO_Init+0x2bc>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d101      	bne.n	80011f0 <HAL_GPIO_Init+0x1d8>
 80011ec:	2302      	movs	r3, #2
 80011ee:	e004      	b.n	80011fa <HAL_GPIO_Init+0x1e2>
 80011f0:	2303      	movs	r3, #3
 80011f2:	e002      	b.n	80011fa <HAL_GPIO_Init+0x1e2>
 80011f4:	2301      	movs	r3, #1
 80011f6:	e000      	b.n	80011fa <HAL_GPIO_Init+0x1e2>
 80011f8:	2300      	movs	r3, #0
 80011fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011fc:	f002 0203 	and.w	r2, r2, #3
 8001200:	0092      	lsls	r2, r2, #2
 8001202:	4093      	lsls	r3, r2
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	4313      	orrs	r3, r2
 8001208:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800120a:	492f      	ldr	r1, [pc, #188]	@ (80012c8 <HAL_GPIO_Init+0x2b0>)
 800120c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120e:	089b      	lsrs	r3, r3, #2
 8001210:	3302      	adds	r3, #2
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d006      	beq.n	8001232 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001224:	4b2c      	ldr	r3, [pc, #176]	@ (80012d8 <HAL_GPIO_Init+0x2c0>)
 8001226:	689a      	ldr	r2, [r3, #8]
 8001228:	492b      	ldr	r1, [pc, #172]	@ (80012d8 <HAL_GPIO_Init+0x2c0>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	608b      	str	r3, [r1, #8]
 8001230:	e006      	b.n	8001240 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001232:	4b29      	ldr	r3, [pc, #164]	@ (80012d8 <HAL_GPIO_Init+0x2c0>)
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	43db      	mvns	r3, r3
 800123a:	4927      	ldr	r1, [pc, #156]	@ (80012d8 <HAL_GPIO_Init+0x2c0>)
 800123c:	4013      	ands	r3, r2
 800123e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d006      	beq.n	800125a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800124c:	4b22      	ldr	r3, [pc, #136]	@ (80012d8 <HAL_GPIO_Init+0x2c0>)
 800124e:	68da      	ldr	r2, [r3, #12]
 8001250:	4921      	ldr	r1, [pc, #132]	@ (80012d8 <HAL_GPIO_Init+0x2c0>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	60cb      	str	r3, [r1, #12]
 8001258:	e006      	b.n	8001268 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800125a:	4b1f      	ldr	r3, [pc, #124]	@ (80012d8 <HAL_GPIO_Init+0x2c0>)
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	43db      	mvns	r3, r3
 8001262:	491d      	ldr	r1, [pc, #116]	@ (80012d8 <HAL_GPIO_Init+0x2c0>)
 8001264:	4013      	ands	r3, r2
 8001266:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d006      	beq.n	8001282 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001274:	4b18      	ldr	r3, [pc, #96]	@ (80012d8 <HAL_GPIO_Init+0x2c0>)
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	4917      	ldr	r1, [pc, #92]	@ (80012d8 <HAL_GPIO_Init+0x2c0>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	604b      	str	r3, [r1, #4]
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001282:	4b15      	ldr	r3, [pc, #84]	@ (80012d8 <HAL_GPIO_Init+0x2c0>)
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	43db      	mvns	r3, r3
 800128a:	4913      	ldr	r1, [pc, #76]	@ (80012d8 <HAL_GPIO_Init+0x2c0>)
 800128c:	4013      	ands	r3, r2
 800128e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d01f      	beq.n	80012dc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800129c:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <HAL_GPIO_Init+0x2c0>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	490d      	ldr	r1, [pc, #52]	@ (80012d8 <HAL_GPIO_Init+0x2c0>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	600b      	str	r3, [r1, #0]
 80012a8:	e01f      	b.n	80012ea <HAL_GPIO_Init+0x2d2>
 80012aa:	bf00      	nop
 80012ac:	10320000 	.word	0x10320000
 80012b0:	10310000 	.word	0x10310000
 80012b4:	10220000 	.word	0x10220000
 80012b8:	10210000 	.word	0x10210000
 80012bc:	10120000 	.word	0x10120000
 80012c0:	10110000 	.word	0x10110000
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40010000 	.word	0x40010000
 80012cc:	40010800 	.word	0x40010800
 80012d0:	40010c00 	.word	0x40010c00
 80012d4:	40011000 	.word	0x40011000
 80012d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012dc:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <HAL_GPIO_Init+0x2f4>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	4909      	ldr	r1, [pc, #36]	@ (800130c <HAL_GPIO_Init+0x2f4>)
 80012e6:	4013      	ands	r3, r2
 80012e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80012ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ec:	3301      	adds	r3, #1
 80012ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012f6:	fa22 f303 	lsr.w	r3, r2, r3
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f47f ae96 	bne.w	800102c <HAL_GPIO_Init+0x14>
  }
}
 8001300:	bf00      	nop
 8001302:	bf00      	nop
 8001304:	372c      	adds	r7, #44	@ 0x2c
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	40010400 	.word	0x40010400

08001310 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	887b      	ldrh	r3, [r7, #2]
 8001322:	4013      	ands	r3, r2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001328:	2301      	movs	r3, #1
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	e001      	b.n	8001332 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001332:	7bfb      	ldrb	r3, [r7, #15]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr

0800133e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	460b      	mov	r3, r1
 8001348:	807b      	strh	r3, [r7, #2]
 800134a:	4613      	mov	r3, r2
 800134c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800134e:	787b      	ldrb	r3, [r7, #1]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d003      	beq.n	800135c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001354:	887a      	ldrh	r2, [r7, #2]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800135a:	e003      	b.n	8001364 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800135c:	887b      	ldrh	r3, [r7, #2]
 800135e:	041a      	lsls	r2, r3, #16
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	611a      	str	r2, [r3, #16]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	bc80      	pop	{r7}
 800136c:	4770      	bx	lr

0800136e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800136e:	b480      	push	{r7}
 8001370:	b085      	sub	sp, #20
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	460b      	mov	r3, r1
 8001378:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001380:	887a      	ldrh	r2, [r7, #2]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4013      	ands	r3, r2
 8001386:	041a      	lsls	r2, r3, #16
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	43d9      	mvns	r1, r3
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	400b      	ands	r3, r1
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	611a      	str	r2, [r3, #16]
}
 8001396:	bf00      	nop
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80013a6:	f7ff fa49 	bl	800083c <HAL_GetTick>
 80013aa:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80013ac:	4b45      	ldr	r3, [pc, #276]	@ (80014c4 <HAL_RCC_DeInit+0x124>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a44      	ldr	r2, [pc, #272]	@ (80014c4 <HAL_RCC_DeInit+0x124>)
 80013b2:	f043 0301 	orr.w	r3, r3, #1
 80013b6:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80013b8:	e008      	b.n	80013cc <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ba:	f7ff fa3f 	bl	800083c <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e077      	b.n	80014bc <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80013cc:	4b3d      	ldr	r3, [pc, #244]	@ (80014c4 <HAL_RCC_DeInit+0x124>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 80013d8:	4b3a      	ldr	r3, [pc, #232]	@ (80014c4 <HAL_RCC_DeInit+0x124>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80013e0:	4a38      	ldr	r2, [pc, #224]	@ (80014c4 <HAL_RCC_DeInit+0x124>)
 80013e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013e6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80013e8:	f7ff fa28 	bl	800083c <HAL_GetTick>
 80013ec:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80013ee:	4b35      	ldr	r3, [pc, #212]	@ (80014c4 <HAL_RCC_DeInit+0x124>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80013f4:	e00a      	b.n	800140c <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013f6:	f7ff fa21 	bl	800083c <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001404:	4293      	cmp	r3, r2
 8001406:	d901      	bls.n	800140c <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e057      	b.n	80014bc <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800140c:	4b2d      	ldr	r3, [pc, #180]	@ (80014c4 <HAL_RCC_DeInit+0x124>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 030c 	and.w	r3, r3, #12
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1ee      	bne.n	80013f6 <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8001418:	4b2b      	ldr	r3, [pc, #172]	@ (80014c8 <HAL_RCC_DeInit+0x128>)
 800141a:	4a2c      	ldr	r2, [pc, #176]	@ (80014cc <HAL_RCC_DeInit+0x12c>)
 800141c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800141e:	4b2c      	ldr	r3, [pc, #176]	@ (80014d0 <HAL_RCC_DeInit+0x130>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f9c8 	bl	80007b8 <HAL_InitTick>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e044      	b.n	80014bc <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001432:	f7ff fa03 	bl	800083c <HAL_GetTick>
 8001436:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001438:	4b22      	ldr	r3, [pc, #136]	@ (80014c4 <HAL_RCC_DeInit+0x124>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a21      	ldr	r2, [pc, #132]	@ (80014c4 <HAL_RCC_DeInit+0x124>)
 800143e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001442:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001444:	e008      	b.n	8001458 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001446:	f7ff f9f9 	bl	800083c <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d901      	bls.n	8001458 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e031      	b.n	80014bc <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001458:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <HAL_RCC_DeInit+0x124>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1f0      	bne.n	8001446 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8001464:	4b17      	ldr	r3, [pc, #92]	@ (80014c4 <HAL_RCC_DeInit+0x124>)
 8001466:	2200      	movs	r2, #0
 8001468:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800146a:	f7ff f9e7 	bl	800083c <HAL_GetTick>
 800146e:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8001470:	4b14      	ldr	r3, [pc, #80]	@ (80014c4 <HAL_RCC_DeInit+0x124>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a13      	ldr	r2, [pc, #76]	@ (80014c4 <HAL_RCC_DeInit+0x124>)
 8001476:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 800147a:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800147c:	e008      	b.n	8001490 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800147e:	f7ff f9dd 	bl	800083c <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b64      	cmp	r3, #100	@ 0x64
 800148a:	d901      	bls.n	8001490 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e015      	b.n	80014bc <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001490:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <HAL_RCC_DeInit+0x124>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1f0      	bne.n	800147e <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800149c:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <HAL_RCC_DeInit+0x124>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a08      	ldr	r2, [pc, #32]	@ (80014c4 <HAL_RCC_DeInit+0x124>)
 80014a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014a6:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80014a8:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_RCC_DeInit+0x124>)
 80014aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ac:	4a05      	ldr	r2, [pc, #20]	@ (80014c4 <HAL_RCC_DeInit+0x124>)
 80014ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80014b2:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 80014b4:	4b03      	ldr	r3, [pc, #12]	@ (80014c4 <HAL_RCC_DeInit+0x124>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40021000 	.word	0x40021000
 80014c8:	20000004 	.word	0x20000004
 80014cc:	007a1200 	.word	0x007a1200
 80014d0:	20000008 	.word	0x20000008

080014d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e272      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 8087 	beq.w	8001602 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014f4:	4b92      	ldr	r3, [pc, #584]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 030c 	and.w	r3, r3, #12
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d00c      	beq.n	800151a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001500:	4b8f      	ldr	r3, [pc, #572]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 030c 	and.w	r3, r3, #12
 8001508:	2b08      	cmp	r3, #8
 800150a:	d112      	bne.n	8001532 <HAL_RCC_OscConfig+0x5e>
 800150c:	4b8c      	ldr	r3, [pc, #560]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001518:	d10b      	bne.n	8001532 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800151a:	4b89      	ldr	r3, [pc, #548]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d06c      	beq.n	8001600 <HAL_RCC_OscConfig+0x12c>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d168      	bne.n	8001600 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e24c      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800153a:	d106      	bne.n	800154a <HAL_RCC_OscConfig+0x76>
 800153c:	4b80      	ldr	r3, [pc, #512]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a7f      	ldr	r2, [pc, #508]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001542:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	e02e      	b.n	80015a8 <HAL_RCC_OscConfig+0xd4>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d10c      	bne.n	800156c <HAL_RCC_OscConfig+0x98>
 8001552:	4b7b      	ldr	r3, [pc, #492]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a7a      	ldr	r2, [pc, #488]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001558:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	4b78      	ldr	r3, [pc, #480]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a77      	ldr	r2, [pc, #476]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001564:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	e01d      	b.n	80015a8 <HAL_RCC_OscConfig+0xd4>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001574:	d10c      	bne.n	8001590 <HAL_RCC_OscConfig+0xbc>
 8001576:	4b72      	ldr	r3, [pc, #456]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a71      	ldr	r2, [pc, #452]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 800157c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	4b6f      	ldr	r3, [pc, #444]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a6e      	ldr	r2, [pc, #440]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001588:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e00b      	b.n	80015a8 <HAL_RCC_OscConfig+0xd4>
 8001590:	4b6b      	ldr	r3, [pc, #428]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a6a      	ldr	r2, [pc, #424]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001596:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b68      	ldr	r3, [pc, #416]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a67      	ldr	r2, [pc, #412]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 80015a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d013      	beq.n	80015d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff f944 	bl	800083c <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b8:	f7ff f940 	bl	800083c <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	@ 0x64
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e200      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0xe4>
 80015d6:	e014      	b.n	8001602 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff f930 	bl	800083c <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e0:	f7ff f92c 	bl	800083c <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b64      	cmp	r3, #100	@ 0x64
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e1ec      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015f2:	4b53      	ldr	r3, [pc, #332]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x10c>
 80015fe:	e000      	b.n	8001602 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d063      	beq.n	80016d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800160e:	4b4c      	ldr	r3, [pc, #304]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	2b00      	cmp	r3, #0
 8001618:	d00b      	beq.n	8001632 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800161a:	4b49      	ldr	r3, [pc, #292]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 030c 	and.w	r3, r3, #12
 8001622:	2b08      	cmp	r3, #8
 8001624:	d11c      	bne.n	8001660 <HAL_RCC_OscConfig+0x18c>
 8001626:	4b46      	ldr	r3, [pc, #280]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d116      	bne.n	8001660 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001632:	4b43      	ldr	r3, [pc, #268]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d005      	beq.n	800164a <HAL_RCC_OscConfig+0x176>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	691b      	ldr	r3, [r3, #16]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d001      	beq.n	800164a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e1c0      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164a:	4b3d      	ldr	r3, [pc, #244]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	4939      	ldr	r1, [pc, #228]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 800165a:	4313      	orrs	r3, r2
 800165c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165e:	e03a      	b.n	80016d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691b      	ldr	r3, [r3, #16]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d020      	beq.n	80016aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001668:	4b36      	ldr	r3, [pc, #216]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 800166a:	2201      	movs	r2, #1
 800166c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166e:	f7ff f8e5 	bl	800083c <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001676:	f7ff f8e1 	bl	800083c <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e1a1      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001688:	4b2d      	ldr	r3, [pc, #180]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0f0      	beq.n	8001676 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001694:	4b2a      	ldr	r3, [pc, #168]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	4927      	ldr	r1, [pc, #156]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	600b      	str	r3, [r1, #0]
 80016a8:	e015      	b.n	80016d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016aa:	4b26      	ldr	r3, [pc, #152]	@ (8001744 <HAL_RCC_OscConfig+0x270>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff f8c4 	bl	800083c <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b8:	f7ff f8c0 	bl	800083c <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e180      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1f0      	bne.n	80016b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0308 	and.w	r3, r3, #8
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d03a      	beq.n	8001758 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	699b      	ldr	r3, [r3, #24]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d019      	beq.n	800171e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016ea:	4b17      	ldr	r3, [pc, #92]	@ (8001748 <HAL_RCC_OscConfig+0x274>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f0:	f7ff f8a4 	bl	800083c <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016f8:	f7ff f8a0 	bl	800083c <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e160      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800170a:	4b0d      	ldr	r3, [pc, #52]	@ (8001740 <HAL_RCC_OscConfig+0x26c>)
 800170c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001716:	2001      	movs	r0, #1
 8001718:	f000 face 	bl	8001cb8 <RCC_Delay>
 800171c:	e01c      	b.n	8001758 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800171e:	4b0a      	ldr	r3, [pc, #40]	@ (8001748 <HAL_RCC_OscConfig+0x274>)
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001724:	f7ff f88a 	bl	800083c <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800172a:	e00f      	b.n	800174c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800172c:	f7ff f886 	bl	800083c <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d908      	bls.n	800174c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e146      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
 800173e:	bf00      	nop
 8001740:	40021000 	.word	0x40021000
 8001744:	42420000 	.word	0x42420000
 8001748:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800174c:	4b92      	ldr	r3, [pc, #584]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 800174e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1e9      	bne.n	800172c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 80a6 	beq.w	80018b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800176a:	4b8b      	ldr	r3, [pc, #556]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10d      	bne.n	8001792 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	4b88      	ldr	r3, [pc, #544]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	4a87      	ldr	r2, [pc, #540]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 800177c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001780:	61d3      	str	r3, [r2, #28]
 8001782:	4b85      	ldr	r3, [pc, #532]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800178e:	2301      	movs	r3, #1
 8001790:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001792:	4b82      	ldr	r3, [pc, #520]	@ (800199c <HAL_RCC_OscConfig+0x4c8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800179a:	2b00      	cmp	r3, #0
 800179c:	d118      	bne.n	80017d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800179e:	4b7f      	ldr	r3, [pc, #508]	@ (800199c <HAL_RCC_OscConfig+0x4c8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a7e      	ldr	r2, [pc, #504]	@ (800199c <HAL_RCC_OscConfig+0x4c8>)
 80017a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017aa:	f7ff f847 	bl	800083c <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b0:	e008      	b.n	80017c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017b2:	f7ff f843 	bl	800083c <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b64      	cmp	r3, #100	@ 0x64
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e103      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c4:	4b75      	ldr	r3, [pc, #468]	@ (800199c <HAL_RCC_OscConfig+0x4c8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0f0      	beq.n	80017b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d106      	bne.n	80017e6 <HAL_RCC_OscConfig+0x312>
 80017d8:	4b6f      	ldr	r3, [pc, #444]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	4a6e      	ldr	r2, [pc, #440]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6213      	str	r3, [r2, #32]
 80017e4:	e02d      	b.n	8001842 <HAL_RCC_OscConfig+0x36e>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10c      	bne.n	8001808 <HAL_RCC_OscConfig+0x334>
 80017ee:	4b6a      	ldr	r3, [pc, #424]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	4a69      	ldr	r2, [pc, #420]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 80017f4:	f023 0301 	bic.w	r3, r3, #1
 80017f8:	6213      	str	r3, [r2, #32]
 80017fa:	4b67      	ldr	r3, [pc, #412]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	4a66      	ldr	r2, [pc, #408]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 8001800:	f023 0304 	bic.w	r3, r3, #4
 8001804:	6213      	str	r3, [r2, #32]
 8001806:	e01c      	b.n	8001842 <HAL_RCC_OscConfig+0x36e>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	2b05      	cmp	r3, #5
 800180e:	d10c      	bne.n	800182a <HAL_RCC_OscConfig+0x356>
 8001810:	4b61      	ldr	r3, [pc, #388]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	4a60      	ldr	r2, [pc, #384]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 8001816:	f043 0304 	orr.w	r3, r3, #4
 800181a:	6213      	str	r3, [r2, #32]
 800181c:	4b5e      	ldr	r3, [pc, #376]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	4a5d      	ldr	r2, [pc, #372]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6213      	str	r3, [r2, #32]
 8001828:	e00b      	b.n	8001842 <HAL_RCC_OscConfig+0x36e>
 800182a:	4b5b      	ldr	r3, [pc, #364]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	4a5a      	ldr	r2, [pc, #360]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 8001830:	f023 0301 	bic.w	r3, r3, #1
 8001834:	6213      	str	r3, [r2, #32]
 8001836:	4b58      	ldr	r3, [pc, #352]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	4a57      	ldr	r2, [pc, #348]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 800183c:	f023 0304 	bic.w	r3, r3, #4
 8001840:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d015      	beq.n	8001876 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184a:	f7fe fff7 	bl	800083c <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001850:	e00a      	b.n	8001868 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001852:	f7fe fff3 	bl	800083c <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001860:	4293      	cmp	r3, r2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e0b1      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001868:	4b4b      	ldr	r3, [pc, #300]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d0ee      	beq.n	8001852 <HAL_RCC_OscConfig+0x37e>
 8001874:	e014      	b.n	80018a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001876:	f7fe ffe1 	bl	800083c <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800187c:	e00a      	b.n	8001894 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187e:	f7fe ffdd 	bl	800083c <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	f241 3288 	movw	r2, #5000	@ 0x1388
 800188c:	4293      	cmp	r3, r2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e09b      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001894:	4b40      	ldr	r3, [pc, #256]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 8001896:	6a1b      	ldr	r3, [r3, #32]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1ee      	bne.n	800187e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018a0:	7dfb      	ldrb	r3, [r7, #23]
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d105      	bne.n	80018b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	4a3b      	ldr	r2, [pc, #236]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 80018ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	f000 8087 	beq.w	80019ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018bc:	4b36      	ldr	r3, [pc, #216]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 030c 	and.w	r3, r3, #12
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d061      	beq.n	800198c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d146      	bne.n	800195e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d0:	4b33      	ldr	r3, [pc, #204]	@ (80019a0 <HAL_RCC_OscConfig+0x4cc>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d6:	f7fe ffb1 	bl	800083c <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018de:	f7fe ffad 	bl	800083c <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e06d      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f0:	4b29      	ldr	r3, [pc, #164]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1f0      	bne.n	80018de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001904:	d108      	bne.n	8001918 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001906:	4b24      	ldr	r3, [pc, #144]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	4921      	ldr	r1, [pc, #132]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 8001914:	4313      	orrs	r3, r2
 8001916:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001918:	4b1f      	ldr	r3, [pc, #124]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a19      	ldr	r1, [r3, #32]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001928:	430b      	orrs	r3, r1
 800192a:	491b      	ldr	r1, [pc, #108]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 800192c:	4313      	orrs	r3, r2
 800192e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001930:	4b1b      	ldr	r3, [pc, #108]	@ (80019a0 <HAL_RCC_OscConfig+0x4cc>)
 8001932:	2201      	movs	r2, #1
 8001934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001936:	f7fe ff81 	bl	800083c <HAL_GetTick>
 800193a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800193c:	e008      	b.n	8001950 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800193e:	f7fe ff7d 	bl	800083c <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	2b02      	cmp	r3, #2
 800194a:	d901      	bls.n	8001950 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e03d      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001950:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d0f0      	beq.n	800193e <HAL_RCC_OscConfig+0x46a>
 800195c:	e035      	b.n	80019ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195e:	4b10      	ldr	r3, [pc, #64]	@ (80019a0 <HAL_RCC_OscConfig+0x4cc>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7fe ff6a 	bl	800083c <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196c:	f7fe ff66 	bl	800083c <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e026      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800197e:	4b06      	ldr	r3, [pc, #24]	@ (8001998 <HAL_RCC_OscConfig+0x4c4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x498>
 800198a:	e01e      	b.n	80019ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69db      	ldr	r3, [r3, #28]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d107      	bne.n	80019a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e019      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
 8001998:	40021000 	.word	0x40021000
 800199c:	40007000 	.word	0x40007000
 80019a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019a4:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <HAL_RCC_OscConfig+0x500>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d106      	bne.n	80019c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d001      	beq.n	80019ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e000      	b.n	80019cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40021000 	.word	0x40021000

080019d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0d0      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019ec:	4b6a      	ldr	r3, [pc, #424]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d910      	bls.n	8001a1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fa:	4b67      	ldr	r3, [pc, #412]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 0207 	bic.w	r2, r3, #7
 8001a02:	4965      	ldr	r1, [pc, #404]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c0>)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0a:	4b63      	ldr	r3, [pc, #396]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d001      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0b8      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d020      	beq.n	8001a6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d005      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a34:	4b59      	ldr	r3, [pc, #356]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	4a58      	ldr	r2, [pc, #352]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d005      	beq.n	8001a58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a4c:	4b53      	ldr	r3, [pc, #332]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	4a52      	ldr	r2, [pc, #328]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a52:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001a56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a58:	4b50      	ldr	r3, [pc, #320]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	494d      	ldr	r1, [pc, #308]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d040      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d107      	bne.n	8001a8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7e:	4b47      	ldr	r3, [pc, #284]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d115      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e07f      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d107      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a96:	4b41      	ldr	r3, [pc, #260]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d109      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e073      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aa6:	4b3d      	ldr	r3, [pc, #244]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e06b      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ab6:	4b39      	ldr	r3, [pc, #228]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f023 0203 	bic.w	r2, r3, #3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	4936      	ldr	r1, [pc, #216]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ac8:	f7fe feb8 	bl	800083c <HAL_GetTick>
 8001acc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ace:	e00a      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad0:	f7fe feb4 	bl	800083c <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e053      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae6:	4b2d      	ldr	r3, [pc, #180]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 020c 	and.w	r2, r3, #12
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d1eb      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001af8:	4b27      	ldr	r3, [pc, #156]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c0>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d210      	bcs.n	8001b28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b06:	4b24      	ldr	r3, [pc, #144]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f023 0207 	bic.w	r2, r3, #7
 8001b0e:	4922      	ldr	r1, [pc, #136]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c0>)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b16:	4b20      	ldr	r3, [pc, #128]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d001      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e032      	b.n	8001b8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d008      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b34:	4b19      	ldr	r3, [pc, #100]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	4916      	ldr	r1, [pc, #88]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d009      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b52:	4b12      	ldr	r3, [pc, #72]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	490e      	ldr	r1, [pc, #56]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b66:	f000 f821 	bl	8001bac <HAL_RCC_GetSysClockFreq>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001b9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	091b      	lsrs	r3, r3, #4
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	490a      	ldr	r1, [pc, #40]	@ (8001ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8001b78:	5ccb      	ldrb	r3, [r1, r3]
 8001b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7e:	4a09      	ldr	r2, [pc, #36]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1cc>)
 8001b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b82:	4b09      	ldr	r3, [pc, #36]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1d0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fe16 	bl	80007b8 <HAL_InitTick>

  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40022000 	.word	0x40022000
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	08002adc 	.word	0x08002adc
 8001ba4:	20000004 	.word	0x20000004
 8001ba8:	20000008 	.word	0x20000008

08001bac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b087      	sub	sp, #28
 8001bb0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	60fb      	str	r3, [r7, #12]
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	2300      	movs	r3, #0
 8001bbc:	617b      	str	r3, [r7, #20]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f003 030c 	and.w	r3, r3, #12
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	d002      	beq.n	8001bdc <HAL_RCC_GetSysClockFreq+0x30>
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d003      	beq.n	8001be2 <HAL_RCC_GetSysClockFreq+0x36>
 8001bda:	e027      	b.n	8001c2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bdc:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <HAL_RCC_GetSysClockFreq+0x98>)
 8001bde:	613b      	str	r3, [r7, #16]
      break;
 8001be0:	e027      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	0c9b      	lsrs	r3, r3, #18
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	4a17      	ldr	r2, [pc, #92]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bec:	5cd3      	ldrb	r3, [r2, r3]
 8001bee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d010      	beq.n	8001c1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001bfa:	4b11      	ldr	r3, [pc, #68]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	0c5b      	lsrs	r3, r3, #17
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	4a11      	ldr	r2, [pc, #68]	@ (8001c4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c06:	5cd3      	ldrb	r3, [r2, r3]
 8001c08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c44 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c0e:	fb03 f202 	mul.w	r2, r3, r2
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	e004      	b.n	8001c26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a0c      	ldr	r2, [pc, #48]	@ (8001c50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c20:	fb02 f303 	mul.w	r3, r2, r3
 8001c24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	613b      	str	r3, [r7, #16]
      break;
 8001c2a:	e002      	b.n	8001c32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c2c:	4b05      	ldr	r3, [pc, #20]	@ (8001c44 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c2e:	613b      	str	r3, [r7, #16]
      break;
 8001c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c32:	693b      	ldr	r3, [r7, #16]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	371c      	adds	r7, #28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000
 8001c44:	007a1200 	.word	0x007a1200
 8001c48:	08002af4 	.word	0x08002af4
 8001c4c:	08002b04 	.word	0x08002b04
 8001c50:	003d0900 	.word	0x003d0900

08001c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c58:	4b02      	ldr	r3, [pc, #8]	@ (8001c64 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr
 8001c64:	20000004 	.word	0x20000004

08001c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c6c:	f7ff fff2 	bl	8001c54 <HAL_RCC_GetHCLKFreq>
 8001c70:	4602      	mov	r2, r0
 8001c72:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	0a1b      	lsrs	r3, r3, #8
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	4903      	ldr	r1, [pc, #12]	@ (8001c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c7e:	5ccb      	ldrb	r3, [r1, r3]
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	08002aec 	.word	0x08002aec

08001c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c94:	f7ff ffde 	bl	8001c54 <HAL_RCC_GetHCLKFreq>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	0adb      	lsrs	r3, r3, #11
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	4903      	ldr	r1, [pc, #12]	@ (8001cb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ca6:	5ccb      	ldrb	r3, [r1, r3]
 8001ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	08002aec 	.word	0x08002aec

08001cb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8001cec <RCC_Delay+0x34>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf0 <RCC_Delay+0x38>)
 8001cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cca:	0a5b      	lsrs	r3, r3, #9
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	fb02 f303 	mul.w	r3, r2, r3
 8001cd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001cd4:	bf00      	nop
  }
  while (Delay --);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	1e5a      	subs	r2, r3, #1
 8001cda:	60fa      	str	r2, [r7, #12]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1f9      	bne.n	8001cd4 <RCC_Delay+0x1c>
}
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr
 8001cec:	20000004 	.word	0x20000004
 8001cf0:	10624dd3 	.word	0x10624dd3

08001cf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e042      	b.n	8001d8c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d106      	bne.n	8001d20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7fe fc62 	bl	80005e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2224      	movs	r2, #36	@ 0x24
 8001d24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 fdf9 	bl	8002930 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001d4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	695a      	ldr	r2, [r3, #20]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001d5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2220      	movs	r2, #32
 8001d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2220      	movs	r2, #32
 8001d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b08a      	sub	sp, #40	@ 0x28
 8001d98:	af02      	add	r7, sp, #8
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	4613      	mov	r3, r2
 8001da2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b20      	cmp	r3, #32
 8001db2:	d175      	bne.n	8001ea0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d002      	beq.n	8001dc0 <HAL_UART_Transmit+0x2c>
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e06e      	b.n	8001ea2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2221      	movs	r2, #33	@ 0x21
 8001dce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001dd2:	f7fe fd33 	bl	800083c <HAL_GetTick>
 8001dd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	88fa      	ldrh	r2, [r7, #6]
 8001ddc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	88fa      	ldrh	r2, [r7, #6]
 8001de2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dec:	d108      	bne.n	8001e00 <HAL_UART_Transmit+0x6c>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d104      	bne.n	8001e00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	61bb      	str	r3, [r7, #24]
 8001dfe:	e003      	b.n	8001e08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001e08:	e02e      	b.n	8001e68 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	2200      	movs	r2, #0
 8001e12:	2180      	movs	r1, #128	@ 0x80
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 fb97 	bl	8002548 <UART_WaitOnFlagUntilTimeout>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2220      	movs	r2, #32
 8001e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e03a      	b.n	8001ea2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10b      	bne.n	8001e4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e40:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	3302      	adds	r3, #2
 8001e46:	61bb      	str	r3, [r7, #24]
 8001e48:	e007      	b.n	8001e5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	781a      	ldrb	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	3301      	adds	r3, #1
 8001e58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1cb      	bne.n	8001e0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	9300      	str	r3, [sp, #0]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2140      	movs	r1, #64	@ 0x40
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f000 fb63 	bl	8002548 <UART_WaitOnFlagUntilTimeout>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e006      	b.n	8001ea2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2220      	movs	r2, #32
 8001e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	e000      	b.n	8001ea2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001ea0:	2302      	movs	r3, #2
  }
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3720      	adds	r7, #32
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b08a      	sub	sp, #40	@ 0x28
 8001eae:	af02      	add	r7, sp, #8
 8001eb0:	60f8      	str	r0, [r7, #12]
 8001eb2:	60b9      	str	r1, [r7, #8]
 8001eb4:	603b      	str	r3, [r7, #0]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b20      	cmp	r3, #32
 8001ec8:	f040 8081 	bne.w	8001fce <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d002      	beq.n	8001ed8 <HAL_UART_Receive+0x2e>
 8001ed2:	88fb      	ldrh	r3, [r7, #6]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e079      	b.n	8001fd0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2222      	movs	r2, #34	@ 0x22
 8001ee6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2200      	movs	r2, #0
 8001eee:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001ef0:	f7fe fca4 	bl	800083c <HAL_GetTick>
 8001ef4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	88fa      	ldrh	r2, [r7, #6]
 8001efa:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	88fa      	ldrh	r2, [r7, #6]
 8001f00:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f0a:	d108      	bne.n	8001f1e <HAL_UART_Receive+0x74>
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d104      	bne.n	8001f1e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	61bb      	str	r3, [r7, #24]
 8001f1c:	e003      	b.n	8001f26 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001f26:	e047      	b.n	8001fb8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2120      	movs	r1, #32
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f000 fb08 	bl	8002548 <UART_WaitOnFlagUntilTimeout>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d005      	beq.n	8001f4a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2220      	movs	r2, #32
 8001f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e042      	b.n	8001fd0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10c      	bne.n	8001f6a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	3302      	adds	r3, #2
 8001f66:	61bb      	str	r3, [r7, #24]
 8001f68:	e01f      	b.n	8001faa <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f72:	d007      	beq.n	8001f84 <HAL_UART_Receive+0xda>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10a      	bne.n	8001f92 <HAL_UART_Receive+0xe8>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d106      	bne.n	8001f92 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	701a      	strb	r2, [r3, #0]
 8001f90:	e008      	b.n	8001fa4 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1b2      	bne.n	8001f28 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e000      	b.n	8001fd0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001fce:	2302      	movs	r3, #2
  }
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3720      	adds	r7, #32
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b0ba      	sub	sp, #232	@ 0xe8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002004:	2300      	movs	r3, #0
 8002006:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800200a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002016:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10f      	bne.n	800203e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800201e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002022:	f003 0320 	and.w	r3, r3, #32
 8002026:	2b00      	cmp	r3, #0
 8002028:	d009      	beq.n	800203e <HAL_UART_IRQHandler+0x66>
 800202a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800202e:	f003 0320 	and.w	r3, r3, #32
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 fbbc 	bl	80027b4 <UART_Receive_IT>
      return;
 800203c:	e25b      	b.n	80024f6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800203e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 80de 	beq.w	8002204 <HAL_UART_IRQHandler+0x22c>
 8002048:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d106      	bne.n	8002062 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002058:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 80d1 	beq.w	8002204 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00b      	beq.n	8002086 <HAL_UART_IRQHandler+0xae>
 800206e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002076:	2b00      	cmp	r3, #0
 8002078:	d005      	beq.n	8002086 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207e:	f043 0201 	orr.w	r2, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800208a:	f003 0304 	and.w	r3, r3, #4
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00b      	beq.n	80020aa <HAL_UART_IRQHandler+0xd2>
 8002092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d005      	beq.n	80020aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020a2:	f043 0202 	orr.w	r2, r3, #2
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00b      	beq.n	80020ce <HAL_UART_IRQHandler+0xf6>
 80020b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d005      	beq.n	80020ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c6:	f043 0204 	orr.w	r2, r3, #4
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80020ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020d2:	f003 0308 	and.w	r3, r3, #8
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d011      	beq.n	80020fe <HAL_UART_IRQHandler+0x126>
 80020da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020de:	f003 0320 	and.w	r3, r3, #32
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d105      	bne.n	80020f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80020e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d005      	beq.n	80020fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f6:	f043 0208 	orr.w	r2, r3, #8
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 81f2 	beq.w	80024ec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800210c:	f003 0320 	and.w	r3, r3, #32
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <HAL_UART_IRQHandler+0x14e>
 8002114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002118:	f003 0320 	and.w	r3, r3, #32
 800211c:	2b00      	cmp	r3, #0
 800211e:	d002      	beq.n	8002126 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 fb47 	bl	80027b4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002130:	2b00      	cmp	r3, #0
 8002132:	bf14      	ite	ne
 8002134:	2301      	movne	r3, #1
 8002136:	2300      	moveq	r3, #0
 8002138:	b2db      	uxtb	r3, r3
 800213a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002142:	f003 0308 	and.w	r3, r3, #8
 8002146:	2b00      	cmp	r3, #0
 8002148:	d103      	bne.n	8002152 <HAL_UART_IRQHandler+0x17a>
 800214a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800214e:	2b00      	cmp	r3, #0
 8002150:	d04f      	beq.n	80021f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 fa51 	bl	80025fa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002162:	2b00      	cmp	r3, #0
 8002164:	d041      	beq.n	80021ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	3314      	adds	r3, #20
 800216c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002170:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002174:	e853 3f00 	ldrex	r3, [r3]
 8002178:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800217c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002180:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002184:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	3314      	adds	r3, #20
 800218e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002192:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002196:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800219a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800219e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80021a2:	e841 2300 	strex	r3, r2, [r1]
 80021a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80021aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1d9      	bne.n	8002166 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d013      	beq.n	80021e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021be:	4a7e      	ldr	r2, [pc, #504]	@ (80023b8 <HAL_UART_IRQHandler+0x3e0>)
 80021c0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7fe fcae 	bl	8000b28 <HAL_DMA_Abort_IT>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d016      	beq.n	8002200 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80021dc:	4610      	mov	r0, r2
 80021de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021e0:	e00e      	b.n	8002200 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f99c 	bl	8002520 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021e8:	e00a      	b.n	8002200 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f000 f998 	bl	8002520 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021f0:	e006      	b.n	8002200 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f994 	bl	8002520 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80021fe:	e175      	b.n	80024ec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002200:	bf00      	nop
    return;
 8002202:	e173      	b.n	80024ec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002208:	2b01      	cmp	r3, #1
 800220a:	f040 814f 	bne.w	80024ac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800220e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002212:	f003 0310 	and.w	r3, r3, #16
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 8148 	beq.w	80024ac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800221c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002220:	f003 0310 	and.w	r3, r3, #16
 8002224:	2b00      	cmp	r3, #0
 8002226:	f000 8141 	beq.w	80024ac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800222a:	2300      	movs	r3, #0
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 80b6 	beq.w	80023bc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800225c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 8145 	beq.w	80024f0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800226a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800226e:	429a      	cmp	r2, r3
 8002270:	f080 813e 	bcs.w	80024f0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800227a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	2b20      	cmp	r3, #32
 8002284:	f000 8088 	beq.w	8002398 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	330c      	adds	r3, #12
 800228e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002292:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002296:	e853 3f00 	ldrex	r3, [r3]
 800229a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800229e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80022a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	330c      	adds	r3, #12
 80022b0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80022b4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80022b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022bc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80022c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80022c4:	e841 2300 	strex	r3, r2, [r1]
 80022c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80022cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1d9      	bne.n	8002288 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	3314      	adds	r3, #20
 80022da:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022de:	e853 3f00 	ldrex	r3, [r3]
 80022e2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80022e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	3314      	adds	r3, #20
 80022f4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80022f8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80022fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022fe:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002300:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002304:	e841 2300 	strex	r3, r2, [r1]
 8002308:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800230a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1e1      	bne.n	80022d4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	3314      	adds	r3, #20
 8002316:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002318:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800231a:	e853 3f00 	ldrex	r3, [r3]
 800231e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002320:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002322:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002326:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	3314      	adds	r3, #20
 8002330:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002334:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002336:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002338:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800233a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800233c:	e841 2300 	strex	r3, r2, [r1]
 8002340:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002342:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1e3      	bne.n	8002310 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2220      	movs	r2, #32
 800234c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	330c      	adds	r3, #12
 800235c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800235e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002360:	e853 3f00 	ldrex	r3, [r3]
 8002364:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002366:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002368:	f023 0310 	bic.w	r3, r3, #16
 800236c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	330c      	adds	r3, #12
 8002376:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800237a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800237c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800237e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002380:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002382:	e841 2300 	strex	r3, r2, [r1]
 8002386:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002388:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1e3      	bne.n	8002356 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe fb8d 	bl	8000ab2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	4619      	mov	r1, r3
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f8bf 	bl	8002532 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80023b4:	e09c      	b.n	80024f0 <HAL_UART_IRQHandler+0x518>
 80023b6:	bf00      	nop
 80023b8:	080026bf 	.word	0x080026bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 808e 	beq.w	80024f4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80023d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80023dc:	2b00      	cmp	r3, #0
 80023de:	f000 8089 	beq.w	80024f4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	330c      	adds	r3, #12
 80023e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023ec:	e853 3f00 	ldrex	r3, [r3]
 80023f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80023f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80023f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	330c      	adds	r3, #12
 8002402:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002406:	647a      	str	r2, [r7, #68]	@ 0x44
 8002408:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800240a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800240c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800240e:	e841 2300 	strex	r3, r2, [r1]
 8002412:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1e3      	bne.n	80023e2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	3314      	adds	r3, #20
 8002420:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002424:	e853 3f00 	ldrex	r3, [r3]
 8002428:	623b      	str	r3, [r7, #32]
   return(result);
 800242a:	6a3b      	ldr	r3, [r7, #32]
 800242c:	f023 0301 	bic.w	r3, r3, #1
 8002430:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	3314      	adds	r3, #20
 800243a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800243e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002440:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002442:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002444:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002446:	e841 2300 	strex	r3, r2, [r1]
 800244a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800244c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1e3      	bne.n	800241a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2220      	movs	r2, #32
 8002456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	330c      	adds	r3, #12
 8002466:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	e853 3f00 	ldrex	r3, [r3]
 800246e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f023 0310 	bic.w	r3, r3, #16
 8002476:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	330c      	adds	r3, #12
 8002480:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002484:	61fa      	str	r2, [r7, #28]
 8002486:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002488:	69b9      	ldr	r1, [r7, #24]
 800248a:	69fa      	ldr	r2, [r7, #28]
 800248c:	e841 2300 	strex	r3, r2, [r1]
 8002490:	617b      	str	r3, [r7, #20]
   return(result);
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1e3      	bne.n	8002460 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800249e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80024a2:	4619      	mov	r1, r3
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f844 	bl	8002532 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80024aa:	e023      	b.n	80024f4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80024ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d009      	beq.n	80024cc <HAL_UART_IRQHandler+0x4f4>
 80024b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f90e 	bl	80026e6 <UART_Transmit_IT>
    return;
 80024ca:	e014      	b.n	80024f6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d00e      	beq.n	80024f6 <HAL_UART_IRQHandler+0x51e>
 80024d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80024e4:	6878      	ldr	r0, [r7, #4]
 80024e6:	f000 f94d 	bl	8002784 <UART_EndTransmit_IT>
    return;
 80024ea:	e004      	b.n	80024f6 <HAL_UART_IRQHandler+0x51e>
    return;
 80024ec:	bf00      	nop
 80024ee:	e002      	b.n	80024f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80024f0:	bf00      	nop
 80024f2:	e000      	b.n	80024f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80024f4:	bf00      	nop
  }
}
 80024f6:	37e8      	adds	r7, #232	@ 0xe8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr

0800250e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002516:	bf00      	nop
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr

08002520 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr

08002532 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
 800253a:	460b      	mov	r3, r1
 800253c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	bc80      	pop	{r7}
 8002546:	4770      	bx	lr

08002548 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	603b      	str	r3, [r7, #0]
 8002554:	4613      	mov	r3, r2
 8002556:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002558:	e03b      	b.n	80025d2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800255a:	6a3b      	ldr	r3, [r7, #32]
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002560:	d037      	beq.n	80025d2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002562:	f7fe f96b 	bl	800083c <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	6a3a      	ldr	r2, [r7, #32]
 800256e:	429a      	cmp	r2, r3
 8002570:	d302      	bcc.n	8002578 <UART_WaitOnFlagUntilTimeout+0x30>
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e03a      	b.n	80025f2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f003 0304 	and.w	r3, r3, #4
 8002586:	2b00      	cmp	r3, #0
 8002588:	d023      	beq.n	80025d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b80      	cmp	r3, #128	@ 0x80
 800258e:	d020      	beq.n	80025d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	2b40      	cmp	r3, #64	@ 0x40
 8002594:	d01d      	beq.n	80025d2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d116      	bne.n	80025d2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 f81d 	bl	80025fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2208      	movs	r2, #8
 80025c4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e00f      	b.n	80025f2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	4013      	ands	r3, r2
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	429a      	cmp	r2, r3
 80025e0:	bf0c      	ite	eq
 80025e2:	2301      	moveq	r3, #1
 80025e4:	2300      	movne	r3, #0
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	461a      	mov	r2, r3
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d0b4      	beq.n	800255a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3718      	adds	r7, #24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b095      	sub	sp, #84	@ 0x54
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	330c      	adds	r3, #12
 8002608:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800260a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800260c:	e853 3f00 	ldrex	r3, [r3]
 8002610:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002614:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002618:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	330c      	adds	r3, #12
 8002620:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002622:	643a      	str	r2, [r7, #64]	@ 0x40
 8002624:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002626:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002628:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800262a:	e841 2300 	strex	r3, r2, [r1]
 800262e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1e5      	bne.n	8002602 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	3314      	adds	r3, #20
 800263c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	e853 3f00 	ldrex	r3, [r3]
 8002644:	61fb      	str	r3, [r7, #28]
   return(result);
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	f023 0301 	bic.w	r3, r3, #1
 800264c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	3314      	adds	r3, #20
 8002654:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002656:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002658:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800265a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800265c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800265e:	e841 2300 	strex	r3, r2, [r1]
 8002662:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1e5      	bne.n	8002636 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266e:	2b01      	cmp	r3, #1
 8002670:	d119      	bne.n	80026a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	330c      	adds	r3, #12
 8002678:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	e853 3f00 	ldrex	r3, [r3]
 8002680:	60bb      	str	r3, [r7, #8]
   return(result);
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	f023 0310 	bic.w	r3, r3, #16
 8002688:	647b      	str	r3, [r7, #68]	@ 0x44
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	330c      	adds	r3, #12
 8002690:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002692:	61ba      	str	r2, [r7, #24]
 8002694:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002696:	6979      	ldr	r1, [r7, #20]
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	e841 2300 	strex	r3, r2, [r1]
 800269e:	613b      	str	r3, [r7, #16]
   return(result);
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d1e5      	bne.n	8002672 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2220      	movs	r2, #32
 80026aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80026b4:	bf00      	nop
 80026b6:	3754      	adds	r7, #84	@ 0x54
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bc80      	pop	{r7}
 80026bc:	4770      	bx	lr

080026be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b084      	sub	sp, #16
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f7ff ff21 	bl	8002520 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026de:	bf00      	nop
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b085      	sub	sp, #20
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b21      	cmp	r3, #33	@ 0x21
 80026f8:	d13e      	bne.n	8002778 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002702:	d114      	bne.n	800272e <UART_Transmit_IT+0x48>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d110      	bne.n	800272e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	881b      	ldrh	r3, [r3, #0]
 8002716:	461a      	mov	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002720:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	1c9a      	adds	r2, r3, #2
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	621a      	str	r2, [r3, #32]
 800272c:	e008      	b.n	8002740 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	1c59      	adds	r1, r3, #1
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6211      	str	r1, [r2, #32]
 8002738:	781a      	ldrb	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002744:	b29b      	uxth	r3, r3
 8002746:	3b01      	subs	r3, #1
 8002748:	b29b      	uxth	r3, r3
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	4619      	mov	r1, r3
 800274e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10f      	bne.n	8002774 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002762:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002772:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	e000      	b.n	800277a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002778:	2302      	movs	r3, #2
  }
}
 800277a:	4618      	mov	r0, r3
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr

08002784 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68da      	ldr	r2, [r3, #12]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800279a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff fea9 	bl	80024fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08c      	sub	sp, #48	@ 0x30
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b22      	cmp	r3, #34	@ 0x22
 80027c6:	f040 80ae 	bne.w	8002926 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027d2:	d117      	bne.n	8002804 <UART_Receive_IT+0x50>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d113      	bne.n	8002804 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80027dc:	2300      	movs	r3, #0
 80027de:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fc:	1c9a      	adds	r2, r3, #2
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	629a      	str	r2, [r3, #40]	@ 0x28
 8002802:	e026      	b.n	8002852 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002808:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800280a:	2300      	movs	r3, #0
 800280c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002816:	d007      	beq.n	8002828 <UART_Receive_IT+0x74>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d10a      	bne.n	8002836 <UART_Receive_IT+0x82>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d106      	bne.n	8002836 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	b2da      	uxtb	r2, r3
 8002830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002832:	701a      	strb	r2, [r3, #0]
 8002834:	e008      	b.n	8002848 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002842:	b2da      	uxtb	r2, r3
 8002844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002846:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002856:	b29b      	uxth	r3, r3
 8002858:	3b01      	subs	r3, #1
 800285a:	b29b      	uxth	r3, r3
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	4619      	mov	r1, r3
 8002860:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002862:	2b00      	cmp	r3, #0
 8002864:	d15d      	bne.n	8002922 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0220 	bic.w	r2, r2, #32
 8002874:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002884:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695a      	ldr	r2, [r3, #20]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0201 	bic.w	r2, r2, #1
 8002894:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2220      	movs	r2, #32
 800289a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d135      	bne.n	8002918 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	330c      	adds	r3, #12
 80028b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	e853 3f00 	ldrex	r3, [r3]
 80028c0:	613b      	str	r3, [r7, #16]
   return(result);
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	f023 0310 	bic.w	r3, r3, #16
 80028c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	330c      	adds	r3, #12
 80028d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028d2:	623a      	str	r2, [r7, #32]
 80028d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d6:	69f9      	ldr	r1, [r7, #28]
 80028d8:	6a3a      	ldr	r2, [r7, #32]
 80028da:	e841 2300 	strex	r3, r2, [r1]
 80028de:	61bb      	str	r3, [r7, #24]
   return(result);
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1e5      	bne.n	80028b2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0310 	and.w	r3, r3, #16
 80028f0:	2b10      	cmp	r3, #16
 80028f2:	d10a      	bne.n	800290a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028f4:	2300      	movs	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800290e:	4619      	mov	r1, r3
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7ff fe0e 	bl	8002532 <HAL_UARTEx_RxEventCallback>
 8002916:	e002      	b.n	800291e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff fdf8 	bl	800250e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800291e:	2300      	movs	r3, #0
 8002920:	e002      	b.n	8002928 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	e000      	b.n	8002928 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002926:	2302      	movs	r3, #2
  }
}
 8002928:	4618      	mov	r0, r3
 800292a:	3730      	adds	r7, #48	@ 0x30
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	4313      	orrs	r3, r2
 800295e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800296a:	f023 030c 	bic.w	r3, r3, #12
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6812      	ldr	r2, [r2, #0]
 8002972:	68b9      	ldr	r1, [r7, #8]
 8002974:	430b      	orrs	r3, r1
 8002976:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699a      	ldr	r2, [r3, #24]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a2c      	ldr	r2, [pc, #176]	@ (8002a44 <UART_SetConfig+0x114>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d103      	bne.n	80029a0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002998:	f7ff f97a 	bl	8001c90 <HAL_RCC_GetPCLK2Freq>
 800299c:	60f8      	str	r0, [r7, #12]
 800299e:	e002      	b.n	80029a6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80029a0:	f7ff f962 	bl	8001c68 <HAL_RCC_GetPCLK1Freq>
 80029a4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	009a      	lsls	r2, r3, #2
 80029b0:	441a      	add	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029bc:	4a22      	ldr	r2, [pc, #136]	@ (8002a48 <UART_SetConfig+0x118>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	095b      	lsrs	r3, r3, #5
 80029c4:	0119      	lsls	r1, r3, #4
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4613      	mov	r3, r2
 80029ca:	009b      	lsls	r3, r3, #2
 80029cc:	4413      	add	r3, r2
 80029ce:	009a      	lsls	r2, r3, #2
 80029d0:	441a      	add	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80029dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002a48 <UART_SetConfig+0x118>)
 80029de:	fba3 0302 	umull	r0, r3, r3, r2
 80029e2:	095b      	lsrs	r3, r3, #5
 80029e4:	2064      	movs	r0, #100	@ 0x64
 80029e6:	fb00 f303 	mul.w	r3, r0, r3
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	011b      	lsls	r3, r3, #4
 80029ee:	3332      	adds	r3, #50	@ 0x32
 80029f0:	4a15      	ldr	r2, [pc, #84]	@ (8002a48 <UART_SetConfig+0x118>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029fc:	4419      	add	r1, r3
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	4613      	mov	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	4413      	add	r3, r2
 8002a06:	009a      	lsls	r2, r3, #2
 8002a08:	441a      	add	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a14:	4b0c      	ldr	r3, [pc, #48]	@ (8002a48 <UART_SetConfig+0x118>)
 8002a16:	fba3 0302 	umull	r0, r3, r3, r2
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	2064      	movs	r0, #100	@ 0x64
 8002a1e:	fb00 f303 	mul.w	r3, r0, r3
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	3332      	adds	r3, #50	@ 0x32
 8002a28:	4a07      	ldr	r2, [pc, #28]	@ (8002a48 <UART_SetConfig+0x118>)
 8002a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	f003 020f 	and.w	r2, r3, #15
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	440a      	add	r2, r1
 8002a3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a3c:	bf00      	nop
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40013800 	.word	0x40013800
 8002a48:	51eb851f 	.word	0x51eb851f

08002a4c <memset>:
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	4402      	add	r2, r0
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d100      	bne.n	8002a56 <memset+0xa>
 8002a54:	4770      	bx	lr
 8002a56:	f803 1b01 	strb.w	r1, [r3], #1
 8002a5a:	e7f9      	b.n	8002a50 <memset+0x4>

08002a5c <__libc_init_array>:
 8002a5c:	b570      	push	{r4, r5, r6, lr}
 8002a5e:	2600      	movs	r6, #0
 8002a60:	4d0c      	ldr	r5, [pc, #48]	@ (8002a94 <__libc_init_array+0x38>)
 8002a62:	4c0d      	ldr	r4, [pc, #52]	@ (8002a98 <__libc_init_array+0x3c>)
 8002a64:	1b64      	subs	r4, r4, r5
 8002a66:	10a4      	asrs	r4, r4, #2
 8002a68:	42a6      	cmp	r6, r4
 8002a6a:	d109      	bne.n	8002a80 <__libc_init_array+0x24>
 8002a6c:	f000 f822 	bl	8002ab4 <_init>
 8002a70:	2600      	movs	r6, #0
 8002a72:	4d0a      	ldr	r5, [pc, #40]	@ (8002a9c <__libc_init_array+0x40>)
 8002a74:	4c0a      	ldr	r4, [pc, #40]	@ (8002aa0 <__libc_init_array+0x44>)
 8002a76:	1b64      	subs	r4, r4, r5
 8002a78:	10a4      	asrs	r4, r4, #2
 8002a7a:	42a6      	cmp	r6, r4
 8002a7c:	d105      	bne.n	8002a8a <__libc_init_array+0x2e>
 8002a7e:	bd70      	pop	{r4, r5, r6, pc}
 8002a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a84:	4798      	blx	r3
 8002a86:	3601      	adds	r6, #1
 8002a88:	e7ee      	b.n	8002a68 <__libc_init_array+0xc>
 8002a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a8e:	4798      	blx	r3
 8002a90:	3601      	adds	r6, #1
 8002a92:	e7f2      	b.n	8002a7a <__libc_init_array+0x1e>
 8002a94:	08002b10 	.word	0x08002b10
 8002a98:	08002b10 	.word	0x08002b10
 8002a9c:	08002b10 	.word	0x08002b10
 8002aa0:	08002b14 	.word	0x08002b14

08002aa4 <strcpy>:
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002aaa:	f803 2b01 	strb.w	r2, [r3], #1
 8002aae:	2a00      	cmp	r2, #0
 8002ab0:	d1f9      	bne.n	8002aa6 <strcpy+0x2>
 8002ab2:	4770      	bx	lr

08002ab4 <_init>:
 8002ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ab6:	bf00      	nop
 8002ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aba:	bc08      	pop	{r3}
 8002abc:	469e      	mov	lr, r3
 8002abe:	4770      	bx	lr

08002ac0 <_fini>:
 8002ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ac2:	bf00      	nop
 8002ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ac6:	bc08      	pop	{r3}
 8002ac8:	469e      	mov	lr, r3
 8002aca:	4770      	bx	lr
