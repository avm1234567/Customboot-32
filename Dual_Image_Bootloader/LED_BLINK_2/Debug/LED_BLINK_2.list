
LED_BLINK_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08006000  08006000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010c0  0800610c  0800610c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080071cc  080071cc  000021cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071f0  080071f0  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080071f0  080071f0  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080071f0  080071f0  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071f0  080071f0  000021f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080071f4  080071f4  000021f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080071f8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08007204  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08007204  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002bb0  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e8c  00000000  00000000  00005be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003d8  00000000  00000000  00006a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002be  00000000  00000000  00006e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001556f  00000000  00000000  0000710e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000049cc  00000000  00000000  0001c67d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079914  00000000  00000000  00021049  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009a95d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d50  00000000  00000000  0009a9a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0009b6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800610c <__do_global_dtors_aux>:
 800610c:	b510      	push	{r4, lr}
 800610e:	4c05      	ldr	r4, [pc, #20]	@ (8006124 <__do_global_dtors_aux+0x18>)
 8006110:	7823      	ldrb	r3, [r4, #0]
 8006112:	b933      	cbnz	r3, 8006122 <__do_global_dtors_aux+0x16>
 8006114:	4b04      	ldr	r3, [pc, #16]	@ (8006128 <__do_global_dtors_aux+0x1c>)
 8006116:	b113      	cbz	r3, 800611e <__do_global_dtors_aux+0x12>
 8006118:	4804      	ldr	r0, [pc, #16]	@ (800612c <__do_global_dtors_aux+0x20>)
 800611a:	f3af 8000 	nop.w
 800611e:	2301      	movs	r3, #1
 8006120:	7023      	strb	r3, [r4, #0]
 8006122:	bd10      	pop	{r4, pc}
 8006124:	2000000c 	.word	0x2000000c
 8006128:	00000000 	.word	0x00000000
 800612c:	080071b4 	.word	0x080071b4

08006130 <frame_dummy>:
 8006130:	b508      	push	{r3, lr}
 8006132:	4b03      	ldr	r3, [pc, #12]	@ (8006140 <frame_dummy+0x10>)
 8006134:	b11b      	cbz	r3, 800613e <frame_dummy+0xe>
 8006136:	4903      	ldr	r1, [pc, #12]	@ (8006144 <frame_dummy+0x14>)
 8006138:	4803      	ldr	r0, [pc, #12]	@ (8006148 <frame_dummy+0x18>)
 800613a:	f3af 8000 	nop.w
 800613e:	bd08      	pop	{r3, pc}
 8006140:	00000000 	.word	0x00000000
 8006144:	20000010 	.word	0x20000010
 8006148:	080071b4 	.word	0x080071b4

0800614c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006150:	f000 f928 	bl	80063a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006154:	f000 f81a 	bl	800618c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006158:	f000 f854 	bl	8006204 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800615c:	2200      	movs	r2, #0
 800615e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006162:	4809      	ldr	r0, [pc, #36]	@ (8006188 <main+0x3c>)
 8006164:	f000 fc04 	bl	8006970 <HAL_GPIO_WritePin>
	  	  HAL_Delay(2000);
 8006168:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800616c:	f000 f97c 	bl	8006468 <HAL_Delay>
	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8006170:	2201      	movs	r2, #1
 8006172:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006176:	4804      	ldr	r0, [pc, #16]	@ (8006188 <main+0x3c>)
 8006178:	f000 fbfa 	bl	8006970 <HAL_GPIO_WritePin>
	  	  HAL_Delay(2000);
 800617c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8006180:	f000 f972 	bl	8006468 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8006184:	bf00      	nop
 8006186:	e7e9      	b.n	800615c <main+0x10>
 8006188:	40011000 	.word	0x40011000

0800618c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b090      	sub	sp, #64	@ 0x40
 8006190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006192:	f107 0318 	add.w	r3, r7, #24
 8006196:	2228      	movs	r2, #40	@ 0x28
 8006198:	2100      	movs	r1, #0
 800619a:	4618      	mov	r0, r3
 800619c:	f000 ffde 	bl	800715c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80061a0:	1d3b      	adds	r3, r7, #4
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	605a      	str	r2, [r3, #4]
 80061a8:	609a      	str	r2, [r3, #8]
 80061aa:	60da      	str	r2, [r3, #12]
 80061ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80061ae:	2302      	movs	r3, #2
 80061b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80061b2:	2301      	movs	r3, #1
 80061b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80061b6:	2310      	movs	r3, #16
 80061b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80061ba:	2300      	movs	r3, #0
 80061bc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80061be:	f107 0318 	add.w	r3, r7, #24
 80061c2:	4618      	mov	r0, r3
 80061c4:	f000 fbec 	bl	80069a0 <HAL_RCC_OscConfig>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d001      	beq.n	80061d2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80061ce:	f000 f859 	bl	8006284 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80061d2:	230f      	movs	r3, #15
 80061d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80061d6:	2300      	movs	r3, #0
 80061d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80061da:	2300      	movs	r3, #0
 80061dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80061de:	2300      	movs	r3, #0
 80061e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80061e2:	2300      	movs	r3, #0
 80061e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80061e6:	1d3b      	adds	r3, r7, #4
 80061e8:	2100      	movs	r1, #0
 80061ea:	4618      	mov	r0, r3
 80061ec:	f000 fe5a 	bl	8006ea4 <HAL_RCC_ClockConfig>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80061f6:	f000 f845 	bl	8006284 <Error_Handler>
  }
}
 80061fa:	bf00      	nop
 80061fc:	3740      	adds	r7, #64	@ 0x40
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
	...

08006204 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b086      	sub	sp, #24
 8006208:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800620a:	f107 0308 	add.w	r3, r7, #8
 800620e:	2200      	movs	r2, #0
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	605a      	str	r2, [r3, #4]
 8006214:	609a      	str	r2, [r3, #8]
 8006216:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006218:	4b18      	ldr	r3, [pc, #96]	@ (800627c <MX_GPIO_Init+0x78>)
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	4a17      	ldr	r2, [pc, #92]	@ (800627c <MX_GPIO_Init+0x78>)
 800621e:	f043 0310 	orr.w	r3, r3, #16
 8006222:	6193      	str	r3, [r2, #24]
 8006224:	4b15      	ldr	r3, [pc, #84]	@ (800627c <MX_GPIO_Init+0x78>)
 8006226:	699b      	ldr	r3, [r3, #24]
 8006228:	f003 0310 	and.w	r3, r3, #16
 800622c:	607b      	str	r3, [r7, #4]
 800622e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006230:	4b12      	ldr	r3, [pc, #72]	@ (800627c <MX_GPIO_Init+0x78>)
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	4a11      	ldr	r2, [pc, #68]	@ (800627c <MX_GPIO_Init+0x78>)
 8006236:	f043 0320 	orr.w	r3, r3, #32
 800623a:	6193      	str	r3, [r2, #24]
 800623c:	4b0f      	ldr	r3, [pc, #60]	@ (800627c <MX_GPIO_Init+0x78>)
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	f003 0320 	and.w	r3, r3, #32
 8006244:	603b      	str	r3, [r7, #0]
 8006246:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8006248:	2200      	movs	r2, #0
 800624a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800624e:	480c      	ldr	r0, [pc, #48]	@ (8006280 <MX_GPIO_Init+0x7c>)
 8006250:	f000 fb8e 	bl	8006970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006254:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006258:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800625a:	2301      	movs	r3, #1
 800625c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800625e:	2300      	movs	r3, #0
 8006260:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006262:	2302      	movs	r3, #2
 8006264:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006266:	f107 0308 	add.w	r3, r7, #8
 800626a:	4619      	mov	r1, r3
 800626c:	4804      	ldr	r0, [pc, #16]	@ (8006280 <MX_GPIO_Init+0x7c>)
 800626e:	f000 fa03 	bl	8006678 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8006272:	bf00      	nop
 8006274:	3718      	adds	r7, #24
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	40021000 	.word	0x40021000
 8006280:	40011000 	.word	0x40011000

08006284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006284:	b480      	push	{r7}
 8006286:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006288:	b672      	cpsid	i
}
 800628a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800628c:	bf00      	nop
 800628e:	e7fd      	b.n	800628c <Error_Handler+0x8>

08006290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006296:	4b15      	ldr	r3, [pc, #84]	@ (80062ec <HAL_MspInit+0x5c>)
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	4a14      	ldr	r2, [pc, #80]	@ (80062ec <HAL_MspInit+0x5c>)
 800629c:	f043 0301 	orr.w	r3, r3, #1
 80062a0:	6193      	str	r3, [r2, #24]
 80062a2:	4b12      	ldr	r3, [pc, #72]	@ (80062ec <HAL_MspInit+0x5c>)
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	f003 0301 	and.w	r3, r3, #1
 80062aa:	60bb      	str	r3, [r7, #8]
 80062ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80062ae:	4b0f      	ldr	r3, [pc, #60]	@ (80062ec <HAL_MspInit+0x5c>)
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	4a0e      	ldr	r2, [pc, #56]	@ (80062ec <HAL_MspInit+0x5c>)
 80062b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062b8:	61d3      	str	r3, [r2, #28]
 80062ba:	4b0c      	ldr	r3, [pc, #48]	@ (80062ec <HAL_MspInit+0x5c>)
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80062c2:	607b      	str	r3, [r7, #4]
 80062c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80062c6:	4b0a      	ldr	r3, [pc, #40]	@ (80062f0 <HAL_MspInit+0x60>)
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80062d2:	60fb      	str	r3, [r7, #12]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80062da:	60fb      	str	r3, [r7, #12]
 80062dc:	4a04      	ldr	r2, [pc, #16]	@ (80062f0 <HAL_MspInit+0x60>)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80062e2:	bf00      	nop
 80062e4:	3714      	adds	r7, #20
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bc80      	pop	{r7}
 80062ea:	4770      	bx	lr
 80062ec:	40021000 	.word	0x40021000
 80062f0:	40010000 	.word	0x40010000

080062f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80062f8:	bf00      	nop
 80062fa:	e7fd      	b.n	80062f8 <NMI_Handler+0x4>

080062fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80062fc:	b480      	push	{r7}
 80062fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006300:	bf00      	nop
 8006302:	e7fd      	b.n	8006300 <HardFault_Handler+0x4>

08006304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006304:	b480      	push	{r7}
 8006306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006308:	bf00      	nop
 800630a:	e7fd      	b.n	8006308 <MemManage_Handler+0x4>

0800630c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006310:	bf00      	nop
 8006312:	e7fd      	b.n	8006310 <BusFault_Handler+0x4>

08006314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006314:	b480      	push	{r7}
 8006316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006318:	bf00      	nop
 800631a:	e7fd      	b.n	8006318 <UsageFault_Handler+0x4>

0800631c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800631c:	b480      	push	{r7}
 800631e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006320:	bf00      	nop
 8006322:	46bd      	mov	sp, r7
 8006324:	bc80      	pop	{r7}
 8006326:	4770      	bx	lr

08006328 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800632c:	bf00      	nop
 800632e:	46bd      	mov	sp, r7
 8006330:	bc80      	pop	{r7}
 8006332:	4770      	bx	lr

08006334 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006334:	b480      	push	{r7}
 8006336:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006338:	bf00      	nop
 800633a:	46bd      	mov	sp, r7
 800633c:	bc80      	pop	{r7}
 800633e:	4770      	bx	lr

08006340 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006344:	f000 f874 	bl	8006430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006348:	bf00      	nop
 800634a:	bd80      	pop	{r7, pc}

0800634c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800634c:	b480      	push	{r7}
 800634e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006350:	bf00      	nop
 8006352:	46bd      	mov	sp, r7
 8006354:	bc80      	pop	{r7}
 8006356:	4770      	bx	lr

08006358 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006358:	f7ff fff8 	bl	800634c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800635c:	480b      	ldr	r0, [pc, #44]	@ (800638c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800635e:	490c      	ldr	r1, [pc, #48]	@ (8006390 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8006360:	4a0c      	ldr	r2, [pc, #48]	@ (8006394 <LoopFillZerobss+0x16>)
  movs r3, #0
 8006362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006364:	e002      	b.n	800636c <LoopCopyDataInit>

08006366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800636a:	3304      	adds	r3, #4

0800636c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800636c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800636e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006370:	d3f9      	bcc.n	8006366 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006372:	4a09      	ldr	r2, [pc, #36]	@ (8006398 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8006374:	4c09      	ldr	r4, [pc, #36]	@ (800639c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006378:	e001      	b.n	800637e <LoopFillZerobss>

0800637a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800637a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800637c:	3204      	adds	r2, #4

0800637e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800637e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006380:	d3fb      	bcc.n	800637a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006382:	f000 fef3 	bl	800716c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006386:	f7ff fee1 	bl	800614c <main>
  bx lr
 800638a:	4770      	bx	lr
  ldr r0, =_sdata
 800638c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006390:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8006394:	080071f8 	.word	0x080071f8
  ldr r2, =_sbss
 8006398:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800639c:	2000002c 	.word	0x2000002c

080063a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80063a0:	e7fe      	b.n	80063a0 <ADC1_2_IRQHandler>
	...

080063a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80063a8:	4b08      	ldr	r3, [pc, #32]	@ (80063cc <HAL_Init+0x28>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a07      	ldr	r2, [pc, #28]	@ (80063cc <HAL_Init+0x28>)
 80063ae:	f043 0310 	orr.w	r3, r3, #16
 80063b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80063b4:	2003      	movs	r0, #3
 80063b6:	f000 f92b 	bl	8006610 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80063ba:	200f      	movs	r0, #15
 80063bc:	f000 f808 	bl	80063d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80063c0:	f7ff ff66 	bl	8006290 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	40022000 	.word	0x40022000

080063d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80063d8:	4b12      	ldr	r3, [pc, #72]	@ (8006424 <HAL_InitTick+0x54>)
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	4b12      	ldr	r3, [pc, #72]	@ (8006428 <HAL_InitTick+0x58>)
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	4619      	mov	r1, r3
 80063e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80063e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80063ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 f935 	bl	800665e <HAL_SYSTICK_Config>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d001      	beq.n	80063fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e00e      	b.n	800641c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b0f      	cmp	r3, #15
 8006402:	d80a      	bhi.n	800641a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006404:	2200      	movs	r2, #0
 8006406:	6879      	ldr	r1, [r7, #4]
 8006408:	f04f 30ff 	mov.w	r0, #4294967295
 800640c:	f000 f90b 	bl	8006626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006410:	4a06      	ldr	r2, [pc, #24]	@ (800642c <HAL_InitTick+0x5c>)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006416:	2300      	movs	r3, #0
 8006418:	e000      	b.n	800641c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
}
 800641c:	4618      	mov	r0, r3
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	20000000 	.word	0x20000000
 8006428:	20000008 	.word	0x20000008
 800642c:	20000004 	.word	0x20000004

08006430 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006430:	b480      	push	{r7}
 8006432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006434:	4b05      	ldr	r3, [pc, #20]	@ (800644c <HAL_IncTick+0x1c>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	461a      	mov	r2, r3
 800643a:	4b05      	ldr	r3, [pc, #20]	@ (8006450 <HAL_IncTick+0x20>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4413      	add	r3, r2
 8006440:	4a03      	ldr	r2, [pc, #12]	@ (8006450 <HAL_IncTick+0x20>)
 8006442:	6013      	str	r3, [r2, #0]
}
 8006444:	bf00      	nop
 8006446:	46bd      	mov	sp, r7
 8006448:	bc80      	pop	{r7}
 800644a:	4770      	bx	lr
 800644c:	20000008 	.word	0x20000008
 8006450:	20000028 	.word	0x20000028

08006454 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006454:	b480      	push	{r7}
 8006456:	af00      	add	r7, sp, #0
  return uwTick;
 8006458:	4b02      	ldr	r3, [pc, #8]	@ (8006464 <HAL_GetTick+0x10>)
 800645a:	681b      	ldr	r3, [r3, #0]
}
 800645c:	4618      	mov	r0, r3
 800645e:	46bd      	mov	sp, r7
 8006460:	bc80      	pop	{r7}
 8006462:	4770      	bx	lr
 8006464:	20000028 	.word	0x20000028

08006468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006470:	f7ff fff0 	bl	8006454 <HAL_GetTick>
 8006474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006480:	d005      	beq.n	800648e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006482:	4b0a      	ldr	r3, [pc, #40]	@ (80064ac <HAL_Delay+0x44>)
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	461a      	mov	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	4413      	add	r3, r2
 800648c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800648e:	bf00      	nop
 8006490:	f7ff ffe0 	bl	8006454 <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	429a      	cmp	r2, r3
 800649e:	d8f7      	bhi.n	8006490 <HAL_Delay+0x28>
  {
  }
}
 80064a0:	bf00      	nop
 80064a2:	bf00      	nop
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	20000008 	.word	0x20000008

080064b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f003 0307 	and.w	r3, r3, #7
 80064be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80064c0:	4b0c      	ldr	r3, [pc, #48]	@ (80064f4 <__NVIC_SetPriorityGrouping+0x44>)
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80064cc:	4013      	ands	r3, r2
 80064ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80064d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80064dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80064e2:	4a04      	ldr	r2, [pc, #16]	@ (80064f4 <__NVIC_SetPriorityGrouping+0x44>)
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	60d3      	str	r3, [r2, #12]
}
 80064e8:	bf00      	nop
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bc80      	pop	{r7}
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	e000ed00 	.word	0xe000ed00

080064f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80064f8:	b480      	push	{r7}
 80064fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064fc:	4b04      	ldr	r3, [pc, #16]	@ (8006510 <__NVIC_GetPriorityGrouping+0x18>)
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	0a1b      	lsrs	r3, r3, #8
 8006502:	f003 0307 	and.w	r3, r3, #7
}
 8006506:	4618      	mov	r0, r3
 8006508:	46bd      	mov	sp, r7
 800650a:	bc80      	pop	{r7}
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	e000ed00 	.word	0xe000ed00

08006514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006514:	b480      	push	{r7}
 8006516:	b083      	sub	sp, #12
 8006518:	af00      	add	r7, sp, #0
 800651a:	4603      	mov	r3, r0
 800651c:	6039      	str	r1, [r7, #0]
 800651e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006524:	2b00      	cmp	r3, #0
 8006526:	db0a      	blt.n	800653e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	b2da      	uxtb	r2, r3
 800652c:	490c      	ldr	r1, [pc, #48]	@ (8006560 <__NVIC_SetPriority+0x4c>)
 800652e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006532:	0112      	lsls	r2, r2, #4
 8006534:	b2d2      	uxtb	r2, r2
 8006536:	440b      	add	r3, r1
 8006538:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800653c:	e00a      	b.n	8006554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	b2da      	uxtb	r2, r3
 8006542:	4908      	ldr	r1, [pc, #32]	@ (8006564 <__NVIC_SetPriority+0x50>)
 8006544:	79fb      	ldrb	r3, [r7, #7]
 8006546:	f003 030f 	and.w	r3, r3, #15
 800654a:	3b04      	subs	r3, #4
 800654c:	0112      	lsls	r2, r2, #4
 800654e:	b2d2      	uxtb	r2, r2
 8006550:	440b      	add	r3, r1
 8006552:	761a      	strb	r2, [r3, #24]
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	bc80      	pop	{r7}
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	e000e100 	.word	0xe000e100
 8006564:	e000ed00 	.word	0xe000ed00

08006568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006568:	b480      	push	{r7}
 800656a:	b089      	sub	sp, #36	@ 0x24
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f003 0307 	and.w	r3, r3, #7
 800657a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	f1c3 0307 	rsb	r3, r3, #7
 8006582:	2b04      	cmp	r3, #4
 8006584:	bf28      	it	cs
 8006586:	2304      	movcs	r3, #4
 8006588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	3304      	adds	r3, #4
 800658e:	2b06      	cmp	r3, #6
 8006590:	d902      	bls.n	8006598 <NVIC_EncodePriority+0x30>
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	3b03      	subs	r3, #3
 8006596:	e000      	b.n	800659a <NVIC_EncodePriority+0x32>
 8006598:	2300      	movs	r3, #0
 800659a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800659c:	f04f 32ff 	mov.w	r2, #4294967295
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	fa02 f303 	lsl.w	r3, r2, r3
 80065a6:	43da      	mvns	r2, r3
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	401a      	ands	r2, r3
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80065b0:	f04f 31ff 	mov.w	r1, #4294967295
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	fa01 f303 	lsl.w	r3, r1, r3
 80065ba:	43d9      	mvns	r1, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80065c0:	4313      	orrs	r3, r2
         );
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3724      	adds	r7, #36	@ 0x24
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bc80      	pop	{r7}
 80065ca:	4770      	bx	lr

080065cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3b01      	subs	r3, #1
 80065d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065dc:	d301      	bcc.n	80065e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80065de:	2301      	movs	r3, #1
 80065e0:	e00f      	b.n	8006602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80065e2:	4a0a      	ldr	r2, [pc, #40]	@ (800660c <SysTick_Config+0x40>)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	3b01      	subs	r3, #1
 80065e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80065ea:	210f      	movs	r1, #15
 80065ec:	f04f 30ff 	mov.w	r0, #4294967295
 80065f0:	f7ff ff90 	bl	8006514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80065f4:	4b05      	ldr	r3, [pc, #20]	@ (800660c <SysTick_Config+0x40>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80065fa:	4b04      	ldr	r3, [pc, #16]	@ (800660c <SysTick_Config+0x40>)
 80065fc:	2207      	movs	r2, #7
 80065fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3708      	adds	r7, #8
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	e000e010 	.word	0xe000e010

08006610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f7ff ff49 	bl	80064b0 <__NVIC_SetPriorityGrouping>
}
 800661e:	bf00      	nop
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006626:	b580      	push	{r7, lr}
 8006628:	b086      	sub	sp, #24
 800662a:	af00      	add	r7, sp, #0
 800662c:	4603      	mov	r3, r0
 800662e:	60b9      	str	r1, [r7, #8]
 8006630:	607a      	str	r2, [r7, #4]
 8006632:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006634:	2300      	movs	r3, #0
 8006636:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006638:	f7ff ff5e 	bl	80064f8 <__NVIC_GetPriorityGrouping>
 800663c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	68b9      	ldr	r1, [r7, #8]
 8006642:	6978      	ldr	r0, [r7, #20]
 8006644:	f7ff ff90 	bl	8006568 <NVIC_EncodePriority>
 8006648:	4602      	mov	r2, r0
 800664a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800664e:	4611      	mov	r1, r2
 8006650:	4618      	mov	r0, r3
 8006652:	f7ff ff5f 	bl	8006514 <__NVIC_SetPriority>
}
 8006656:	bf00      	nop
 8006658:	3718      	adds	r7, #24
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b082      	sub	sp, #8
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f7ff ffb0 	bl	80065cc <SysTick_Config>
 800666c:	4603      	mov	r3, r0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3708      	adds	r7, #8
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
	...

08006678 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006678:	b480      	push	{r7}
 800667a:	b08b      	sub	sp, #44	@ 0x2c
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006682:	2300      	movs	r3, #0
 8006684:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006686:	2300      	movs	r3, #0
 8006688:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800668a:	e161      	b.n	8006950 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800668c:	2201      	movs	r2, #1
 800668e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006690:	fa02 f303 	lsl.w	r3, r2, r3
 8006694:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	69fa      	ldr	r2, [r7, #28]
 800669c:	4013      	ands	r3, r2
 800669e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	f040 8150 	bne.w	800694a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	4a97      	ldr	r2, [pc, #604]	@ (800690c <HAL_GPIO_Init+0x294>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d05e      	beq.n	8006772 <HAL_GPIO_Init+0xfa>
 80066b4:	4a95      	ldr	r2, [pc, #596]	@ (800690c <HAL_GPIO_Init+0x294>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d875      	bhi.n	80067a6 <HAL_GPIO_Init+0x12e>
 80066ba:	4a95      	ldr	r2, [pc, #596]	@ (8006910 <HAL_GPIO_Init+0x298>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d058      	beq.n	8006772 <HAL_GPIO_Init+0xfa>
 80066c0:	4a93      	ldr	r2, [pc, #588]	@ (8006910 <HAL_GPIO_Init+0x298>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d86f      	bhi.n	80067a6 <HAL_GPIO_Init+0x12e>
 80066c6:	4a93      	ldr	r2, [pc, #588]	@ (8006914 <HAL_GPIO_Init+0x29c>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d052      	beq.n	8006772 <HAL_GPIO_Init+0xfa>
 80066cc:	4a91      	ldr	r2, [pc, #580]	@ (8006914 <HAL_GPIO_Init+0x29c>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d869      	bhi.n	80067a6 <HAL_GPIO_Init+0x12e>
 80066d2:	4a91      	ldr	r2, [pc, #580]	@ (8006918 <HAL_GPIO_Init+0x2a0>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d04c      	beq.n	8006772 <HAL_GPIO_Init+0xfa>
 80066d8:	4a8f      	ldr	r2, [pc, #572]	@ (8006918 <HAL_GPIO_Init+0x2a0>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d863      	bhi.n	80067a6 <HAL_GPIO_Init+0x12e>
 80066de:	4a8f      	ldr	r2, [pc, #572]	@ (800691c <HAL_GPIO_Init+0x2a4>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d046      	beq.n	8006772 <HAL_GPIO_Init+0xfa>
 80066e4:	4a8d      	ldr	r2, [pc, #564]	@ (800691c <HAL_GPIO_Init+0x2a4>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d85d      	bhi.n	80067a6 <HAL_GPIO_Init+0x12e>
 80066ea:	2b12      	cmp	r3, #18
 80066ec:	d82a      	bhi.n	8006744 <HAL_GPIO_Init+0xcc>
 80066ee:	2b12      	cmp	r3, #18
 80066f0:	d859      	bhi.n	80067a6 <HAL_GPIO_Init+0x12e>
 80066f2:	a201      	add	r2, pc, #4	@ (adr r2, 80066f8 <HAL_GPIO_Init+0x80>)
 80066f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f8:	08006773 	.word	0x08006773
 80066fc:	0800674d 	.word	0x0800674d
 8006700:	0800675f 	.word	0x0800675f
 8006704:	080067a1 	.word	0x080067a1
 8006708:	080067a7 	.word	0x080067a7
 800670c:	080067a7 	.word	0x080067a7
 8006710:	080067a7 	.word	0x080067a7
 8006714:	080067a7 	.word	0x080067a7
 8006718:	080067a7 	.word	0x080067a7
 800671c:	080067a7 	.word	0x080067a7
 8006720:	080067a7 	.word	0x080067a7
 8006724:	080067a7 	.word	0x080067a7
 8006728:	080067a7 	.word	0x080067a7
 800672c:	080067a7 	.word	0x080067a7
 8006730:	080067a7 	.word	0x080067a7
 8006734:	080067a7 	.word	0x080067a7
 8006738:	080067a7 	.word	0x080067a7
 800673c:	08006755 	.word	0x08006755
 8006740:	08006769 	.word	0x08006769
 8006744:	4a76      	ldr	r2, [pc, #472]	@ (8006920 <HAL_GPIO_Init+0x2a8>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d013      	beq.n	8006772 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800674a:	e02c      	b.n	80067a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	623b      	str	r3, [r7, #32]
          break;
 8006752:	e029      	b.n	80067a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	3304      	adds	r3, #4
 800675a:	623b      	str	r3, [r7, #32]
          break;
 800675c:	e024      	b.n	80067a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	3308      	adds	r3, #8
 8006764:	623b      	str	r3, [r7, #32]
          break;
 8006766:	e01f      	b.n	80067a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	68db      	ldr	r3, [r3, #12]
 800676c:	330c      	adds	r3, #12
 800676e:	623b      	str	r3, [r7, #32]
          break;
 8006770:	e01a      	b.n	80067a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d102      	bne.n	8006780 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800677a:	2304      	movs	r3, #4
 800677c:	623b      	str	r3, [r7, #32]
          break;
 800677e:	e013      	b.n	80067a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d105      	bne.n	8006794 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006788:	2308      	movs	r3, #8
 800678a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	69fa      	ldr	r2, [r7, #28]
 8006790:	611a      	str	r2, [r3, #16]
          break;
 8006792:	e009      	b.n	80067a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006794:	2308      	movs	r3, #8
 8006796:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	69fa      	ldr	r2, [r7, #28]
 800679c:	615a      	str	r2, [r3, #20]
          break;
 800679e:	e003      	b.n	80067a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80067a0:	2300      	movs	r3, #0
 80067a2:	623b      	str	r3, [r7, #32]
          break;
 80067a4:	e000      	b.n	80067a8 <HAL_GPIO_Init+0x130>
          break;
 80067a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	2bff      	cmp	r3, #255	@ 0xff
 80067ac:	d801      	bhi.n	80067b2 <HAL_GPIO_Init+0x13a>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	e001      	b.n	80067b6 <HAL_GPIO_Init+0x13e>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	3304      	adds	r3, #4
 80067b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	2bff      	cmp	r3, #255	@ 0xff
 80067bc:	d802      	bhi.n	80067c4 <HAL_GPIO_Init+0x14c>
 80067be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	e002      	b.n	80067ca <HAL_GPIO_Init+0x152>
 80067c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c6:	3b08      	subs	r3, #8
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	210f      	movs	r1, #15
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	fa01 f303 	lsl.w	r3, r1, r3
 80067d8:	43db      	mvns	r3, r3
 80067da:	401a      	ands	r2, r3
 80067dc:	6a39      	ldr	r1, [r7, #32]
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	fa01 f303 	lsl.w	r3, r1, r3
 80067e4:	431a      	orrs	r2, r3
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 80a9 	beq.w	800694a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80067f8:	4b4a      	ldr	r3, [pc, #296]	@ (8006924 <HAL_GPIO_Init+0x2ac>)
 80067fa:	699b      	ldr	r3, [r3, #24]
 80067fc:	4a49      	ldr	r2, [pc, #292]	@ (8006924 <HAL_GPIO_Init+0x2ac>)
 80067fe:	f043 0301 	orr.w	r3, r3, #1
 8006802:	6193      	str	r3, [r2, #24]
 8006804:	4b47      	ldr	r3, [pc, #284]	@ (8006924 <HAL_GPIO_Init+0x2ac>)
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	60bb      	str	r3, [r7, #8]
 800680e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006810:	4a45      	ldr	r2, [pc, #276]	@ (8006928 <HAL_GPIO_Init+0x2b0>)
 8006812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006814:	089b      	lsrs	r3, r3, #2
 8006816:	3302      	adds	r3, #2
 8006818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800681c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800681e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006820:	f003 0303 	and.w	r3, r3, #3
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	220f      	movs	r2, #15
 8006828:	fa02 f303 	lsl.w	r3, r2, r3
 800682c:	43db      	mvns	r3, r3
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	4013      	ands	r3, r2
 8006832:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a3d      	ldr	r2, [pc, #244]	@ (800692c <HAL_GPIO_Init+0x2b4>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d00d      	beq.n	8006858 <HAL_GPIO_Init+0x1e0>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a3c      	ldr	r2, [pc, #240]	@ (8006930 <HAL_GPIO_Init+0x2b8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d007      	beq.n	8006854 <HAL_GPIO_Init+0x1dc>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a3b      	ldr	r2, [pc, #236]	@ (8006934 <HAL_GPIO_Init+0x2bc>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d101      	bne.n	8006850 <HAL_GPIO_Init+0x1d8>
 800684c:	2302      	movs	r3, #2
 800684e:	e004      	b.n	800685a <HAL_GPIO_Init+0x1e2>
 8006850:	2303      	movs	r3, #3
 8006852:	e002      	b.n	800685a <HAL_GPIO_Init+0x1e2>
 8006854:	2301      	movs	r3, #1
 8006856:	e000      	b.n	800685a <HAL_GPIO_Init+0x1e2>
 8006858:	2300      	movs	r3, #0
 800685a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800685c:	f002 0203 	and.w	r2, r2, #3
 8006860:	0092      	lsls	r2, r2, #2
 8006862:	4093      	lsls	r3, r2
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	4313      	orrs	r3, r2
 8006868:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800686a:	492f      	ldr	r1, [pc, #188]	@ (8006928 <HAL_GPIO_Init+0x2b0>)
 800686c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686e:	089b      	lsrs	r3, r3, #2
 8006870:	3302      	adds	r3, #2
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d006      	beq.n	8006892 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006884:	4b2c      	ldr	r3, [pc, #176]	@ (8006938 <HAL_GPIO_Init+0x2c0>)
 8006886:	689a      	ldr	r2, [r3, #8]
 8006888:	492b      	ldr	r1, [pc, #172]	@ (8006938 <HAL_GPIO_Init+0x2c0>)
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	4313      	orrs	r3, r2
 800688e:	608b      	str	r3, [r1, #8]
 8006890:	e006      	b.n	80068a0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006892:	4b29      	ldr	r3, [pc, #164]	@ (8006938 <HAL_GPIO_Init+0x2c0>)
 8006894:	689a      	ldr	r2, [r3, #8]
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	43db      	mvns	r3, r3
 800689a:	4927      	ldr	r1, [pc, #156]	@ (8006938 <HAL_GPIO_Init+0x2c0>)
 800689c:	4013      	ands	r3, r2
 800689e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d006      	beq.n	80068ba <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80068ac:	4b22      	ldr	r3, [pc, #136]	@ (8006938 <HAL_GPIO_Init+0x2c0>)
 80068ae:	68da      	ldr	r2, [r3, #12]
 80068b0:	4921      	ldr	r1, [pc, #132]	@ (8006938 <HAL_GPIO_Init+0x2c0>)
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	60cb      	str	r3, [r1, #12]
 80068b8:	e006      	b.n	80068c8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80068ba:	4b1f      	ldr	r3, [pc, #124]	@ (8006938 <HAL_GPIO_Init+0x2c0>)
 80068bc:	68da      	ldr	r2, [r3, #12]
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	43db      	mvns	r3, r3
 80068c2:	491d      	ldr	r1, [pc, #116]	@ (8006938 <HAL_GPIO_Init+0x2c0>)
 80068c4:	4013      	ands	r3, r2
 80068c6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d006      	beq.n	80068e2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80068d4:	4b18      	ldr	r3, [pc, #96]	@ (8006938 <HAL_GPIO_Init+0x2c0>)
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	4917      	ldr	r1, [pc, #92]	@ (8006938 <HAL_GPIO_Init+0x2c0>)
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	4313      	orrs	r3, r2
 80068de:	604b      	str	r3, [r1, #4]
 80068e0:	e006      	b.n	80068f0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80068e2:	4b15      	ldr	r3, [pc, #84]	@ (8006938 <HAL_GPIO_Init+0x2c0>)
 80068e4:	685a      	ldr	r2, [r3, #4]
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	43db      	mvns	r3, r3
 80068ea:	4913      	ldr	r1, [pc, #76]	@ (8006938 <HAL_GPIO_Init+0x2c0>)
 80068ec:	4013      	ands	r3, r2
 80068ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d01f      	beq.n	800693c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80068fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006938 <HAL_GPIO_Init+0x2c0>)
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	490d      	ldr	r1, [pc, #52]	@ (8006938 <HAL_GPIO_Init+0x2c0>)
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	4313      	orrs	r3, r2
 8006906:	600b      	str	r3, [r1, #0]
 8006908:	e01f      	b.n	800694a <HAL_GPIO_Init+0x2d2>
 800690a:	bf00      	nop
 800690c:	10320000 	.word	0x10320000
 8006910:	10310000 	.word	0x10310000
 8006914:	10220000 	.word	0x10220000
 8006918:	10210000 	.word	0x10210000
 800691c:	10120000 	.word	0x10120000
 8006920:	10110000 	.word	0x10110000
 8006924:	40021000 	.word	0x40021000
 8006928:	40010000 	.word	0x40010000
 800692c:	40010800 	.word	0x40010800
 8006930:	40010c00 	.word	0x40010c00
 8006934:	40011000 	.word	0x40011000
 8006938:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800693c:	4b0b      	ldr	r3, [pc, #44]	@ (800696c <HAL_GPIO_Init+0x2f4>)
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	43db      	mvns	r3, r3
 8006944:	4909      	ldr	r1, [pc, #36]	@ (800696c <HAL_GPIO_Init+0x2f4>)
 8006946:	4013      	ands	r3, r2
 8006948:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800694a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800694c:	3301      	adds	r3, #1
 800694e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006956:	fa22 f303 	lsr.w	r3, r2, r3
 800695a:	2b00      	cmp	r3, #0
 800695c:	f47f ae96 	bne.w	800668c <HAL_GPIO_Init+0x14>
  }
}
 8006960:	bf00      	nop
 8006962:	bf00      	nop
 8006964:	372c      	adds	r7, #44	@ 0x2c
 8006966:	46bd      	mov	sp, r7
 8006968:	bc80      	pop	{r7}
 800696a:	4770      	bx	lr
 800696c:	40010400 	.word	0x40010400

08006970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	460b      	mov	r3, r1
 800697a:	807b      	strh	r3, [r7, #2]
 800697c:	4613      	mov	r3, r2
 800697e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006980:	787b      	ldrb	r3, [r7, #1]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d003      	beq.n	800698e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006986:	887a      	ldrh	r2, [r7, #2]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800698c:	e003      	b.n	8006996 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800698e:	887b      	ldrh	r3, [r7, #2]
 8006990:	041a      	lsls	r2, r3, #16
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	611a      	str	r2, [r3, #16]
}
 8006996:	bf00      	nop
 8006998:	370c      	adds	r7, #12
 800699a:	46bd      	mov	sp, r7
 800699c:	bc80      	pop	{r7}
 800699e:	4770      	bx	lr

080069a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80069ae:	2301      	movs	r3, #1
 80069b0:	e272      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 8087 	beq.w	8006ace <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80069c0:	4b92      	ldr	r3, [pc, #584]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f003 030c 	and.w	r3, r3, #12
 80069c8:	2b04      	cmp	r3, #4
 80069ca:	d00c      	beq.n	80069e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80069cc:	4b8f      	ldr	r3, [pc, #572]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f003 030c 	and.w	r3, r3, #12
 80069d4:	2b08      	cmp	r3, #8
 80069d6:	d112      	bne.n	80069fe <HAL_RCC_OscConfig+0x5e>
 80069d8:	4b8c      	ldr	r3, [pc, #560]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069e4:	d10b      	bne.n	80069fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069e6:	4b89      	ldr	r3, [pc, #548]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d06c      	beq.n	8006acc <HAL_RCC_OscConfig+0x12c>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d168      	bne.n	8006acc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e24c      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a06:	d106      	bne.n	8006a16 <HAL_RCC_OscConfig+0x76>
 8006a08:	4b80      	ldr	r3, [pc, #512]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a7f      	ldr	r2, [pc, #508]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a12:	6013      	str	r3, [r2, #0]
 8006a14:	e02e      	b.n	8006a74 <HAL_RCC_OscConfig+0xd4>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10c      	bne.n	8006a38 <HAL_RCC_OscConfig+0x98>
 8006a1e:	4b7b      	ldr	r3, [pc, #492]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a7a      	ldr	r2, [pc, #488]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a28:	6013      	str	r3, [r2, #0]
 8006a2a:	4b78      	ldr	r3, [pc, #480]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a77      	ldr	r2, [pc, #476]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a30:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a34:	6013      	str	r3, [r2, #0]
 8006a36:	e01d      	b.n	8006a74 <HAL_RCC_OscConfig+0xd4>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006a40:	d10c      	bne.n	8006a5c <HAL_RCC_OscConfig+0xbc>
 8006a42:	4b72      	ldr	r3, [pc, #456]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a71      	ldr	r2, [pc, #452]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006a4c:	6013      	str	r3, [r2, #0]
 8006a4e:	4b6f      	ldr	r3, [pc, #444]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a6e      	ldr	r2, [pc, #440]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a58:	6013      	str	r3, [r2, #0]
 8006a5a:	e00b      	b.n	8006a74 <HAL_RCC_OscConfig+0xd4>
 8006a5c:	4b6b      	ldr	r3, [pc, #428]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a6a      	ldr	r2, [pc, #424]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a66:	6013      	str	r3, [r2, #0]
 8006a68:	4b68      	ldr	r3, [pc, #416]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a67      	ldr	r2, [pc, #412]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006a72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d013      	beq.n	8006aa4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a7c:	f7ff fcea 	bl	8006454 <HAL_GetTick>
 8006a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a82:	e008      	b.n	8006a96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a84:	f7ff fce6 	bl	8006454 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	2b64      	cmp	r3, #100	@ 0x64
 8006a90:	d901      	bls.n	8006a96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e200      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a96:	4b5d      	ldr	r3, [pc, #372]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0f0      	beq.n	8006a84 <HAL_RCC_OscConfig+0xe4>
 8006aa2:	e014      	b.n	8006ace <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aa4:	f7ff fcd6 	bl	8006454 <HAL_GetTick>
 8006aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006aaa:	e008      	b.n	8006abe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006aac:	f7ff fcd2 	bl	8006454 <HAL_GetTick>
 8006ab0:	4602      	mov	r2, r0
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	2b64      	cmp	r3, #100	@ 0x64
 8006ab8:	d901      	bls.n	8006abe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e1ec      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006abe:	4b53      	ldr	r3, [pc, #332]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1f0      	bne.n	8006aac <HAL_RCC_OscConfig+0x10c>
 8006aca:	e000      	b.n	8006ace <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0302 	and.w	r3, r3, #2
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d063      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006ada:	4b4c      	ldr	r3, [pc, #304]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	f003 030c 	and.w	r3, r3, #12
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00b      	beq.n	8006afe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006ae6:	4b49      	ldr	r3, [pc, #292]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	f003 030c 	and.w	r3, r3, #12
 8006aee:	2b08      	cmp	r3, #8
 8006af0:	d11c      	bne.n	8006b2c <HAL_RCC_OscConfig+0x18c>
 8006af2:	4b46      	ldr	r3, [pc, #280]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d116      	bne.n	8006b2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006afe:	4b43      	ldr	r3, [pc, #268]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d005      	beq.n	8006b16 <HAL_RCC_OscConfig+0x176>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d001      	beq.n	8006b16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e1c0      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b16:	4b3d      	ldr	r3, [pc, #244]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	695b      	ldr	r3, [r3, #20]
 8006b22:	00db      	lsls	r3, r3, #3
 8006b24:	4939      	ldr	r1, [pc, #228]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b2a:	e03a      	b.n	8006ba2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d020      	beq.n	8006b76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b34:	4b36      	ldr	r3, [pc, #216]	@ (8006c10 <HAL_RCC_OscConfig+0x270>)
 8006b36:	2201      	movs	r2, #1
 8006b38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b3a:	f7ff fc8b 	bl	8006454 <HAL_GetTick>
 8006b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b40:	e008      	b.n	8006b54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b42:	f7ff fc87 	bl	8006454 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e1a1      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b54:	4b2d      	ldr	r3, [pc, #180]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0302 	and.w	r3, r3, #2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d0f0      	beq.n	8006b42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b60:	4b2a      	ldr	r3, [pc, #168]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	695b      	ldr	r3, [r3, #20]
 8006b6c:	00db      	lsls	r3, r3, #3
 8006b6e:	4927      	ldr	r1, [pc, #156]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006b70:	4313      	orrs	r3, r2
 8006b72:	600b      	str	r3, [r1, #0]
 8006b74:	e015      	b.n	8006ba2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b76:	4b26      	ldr	r3, [pc, #152]	@ (8006c10 <HAL_RCC_OscConfig+0x270>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b7c:	f7ff fc6a 	bl	8006454 <HAL_GetTick>
 8006b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b82:	e008      	b.n	8006b96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b84:	f7ff fc66 	bl	8006454 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	2b02      	cmp	r3, #2
 8006b90:	d901      	bls.n	8006b96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006b92:	2303      	movs	r3, #3
 8006b94:	e180      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b96:	4b1d      	ldr	r3, [pc, #116]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 0302 	and.w	r3, r3, #2
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1f0      	bne.n	8006b84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0308 	and.w	r3, r3, #8
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d03a      	beq.n	8006c24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d019      	beq.n	8006bea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006bb6:	4b17      	ldr	r3, [pc, #92]	@ (8006c14 <HAL_RCC_OscConfig+0x274>)
 8006bb8:	2201      	movs	r2, #1
 8006bba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bbc:	f7ff fc4a 	bl	8006454 <HAL_GetTick>
 8006bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bc2:	e008      	b.n	8006bd6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bc4:	f7ff fc46 	bl	8006454 <HAL_GetTick>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d901      	bls.n	8006bd6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e160      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8006c0c <HAL_RCC_OscConfig+0x26c>)
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d0f0      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006be2:	2001      	movs	r0, #1
 8006be4:	f000 fa9c 	bl	8007120 <RCC_Delay>
 8006be8:	e01c      	b.n	8006c24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bea:	4b0a      	ldr	r3, [pc, #40]	@ (8006c14 <HAL_RCC_OscConfig+0x274>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bf0:	f7ff fc30 	bl	8006454 <HAL_GetTick>
 8006bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bf6:	e00f      	b.n	8006c18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bf8:	f7ff fc2c 	bl	8006454 <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d908      	bls.n	8006c18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006c06:	2303      	movs	r3, #3
 8006c08:	e146      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
 8006c0a:	bf00      	nop
 8006c0c:	40021000 	.word	0x40021000
 8006c10:	42420000 	.word	0x42420000
 8006c14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c18:	4b92      	ldr	r3, [pc, #584]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c1c:	f003 0302 	and.w	r3, r3, #2
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1e9      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f003 0304 	and.w	r3, r3, #4
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 80a6 	beq.w	8006d7e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c32:	2300      	movs	r3, #0
 8006c34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c36:	4b8b      	ldr	r3, [pc, #556]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10d      	bne.n	8006c5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c42:	4b88      	ldr	r3, [pc, #544]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	4a87      	ldr	r2, [pc, #540]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006c48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c4c:	61d3      	str	r3, [r2, #28]
 8006c4e:	4b85      	ldr	r3, [pc, #532]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c56:	60bb      	str	r3, [r7, #8]
 8006c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c5e:	4b82      	ldr	r3, [pc, #520]	@ (8006e68 <HAL_RCC_OscConfig+0x4c8>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d118      	bne.n	8006c9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c6a:	4b7f      	ldr	r3, [pc, #508]	@ (8006e68 <HAL_RCC_OscConfig+0x4c8>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a7e      	ldr	r2, [pc, #504]	@ (8006e68 <HAL_RCC_OscConfig+0x4c8>)
 8006c70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c76:	f7ff fbed 	bl	8006454 <HAL_GetTick>
 8006c7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c7c:	e008      	b.n	8006c90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c7e:	f7ff fbe9 	bl	8006454 <HAL_GetTick>
 8006c82:	4602      	mov	r2, r0
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	1ad3      	subs	r3, r2, r3
 8006c88:	2b64      	cmp	r3, #100	@ 0x64
 8006c8a:	d901      	bls.n	8006c90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	e103      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c90:	4b75      	ldr	r3, [pc, #468]	@ (8006e68 <HAL_RCC_OscConfig+0x4c8>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d0f0      	beq.n	8006c7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d106      	bne.n	8006cb2 <HAL_RCC_OscConfig+0x312>
 8006ca4:	4b6f      	ldr	r3, [pc, #444]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006ca6:	6a1b      	ldr	r3, [r3, #32]
 8006ca8:	4a6e      	ldr	r2, [pc, #440]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006caa:	f043 0301 	orr.w	r3, r3, #1
 8006cae:	6213      	str	r3, [r2, #32]
 8006cb0:	e02d      	b.n	8006d0e <HAL_RCC_OscConfig+0x36e>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68db      	ldr	r3, [r3, #12]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10c      	bne.n	8006cd4 <HAL_RCC_OscConfig+0x334>
 8006cba:	4b6a      	ldr	r3, [pc, #424]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	4a69      	ldr	r2, [pc, #420]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006cc0:	f023 0301 	bic.w	r3, r3, #1
 8006cc4:	6213      	str	r3, [r2, #32]
 8006cc6:	4b67      	ldr	r3, [pc, #412]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	4a66      	ldr	r2, [pc, #408]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006ccc:	f023 0304 	bic.w	r3, r3, #4
 8006cd0:	6213      	str	r3, [r2, #32]
 8006cd2:	e01c      	b.n	8006d0e <HAL_RCC_OscConfig+0x36e>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	2b05      	cmp	r3, #5
 8006cda:	d10c      	bne.n	8006cf6 <HAL_RCC_OscConfig+0x356>
 8006cdc:	4b61      	ldr	r3, [pc, #388]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006cde:	6a1b      	ldr	r3, [r3, #32]
 8006ce0:	4a60      	ldr	r2, [pc, #384]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006ce2:	f043 0304 	orr.w	r3, r3, #4
 8006ce6:	6213      	str	r3, [r2, #32]
 8006ce8:	4b5e      	ldr	r3, [pc, #376]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006cea:	6a1b      	ldr	r3, [r3, #32]
 8006cec:	4a5d      	ldr	r2, [pc, #372]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006cee:	f043 0301 	orr.w	r3, r3, #1
 8006cf2:	6213      	str	r3, [r2, #32]
 8006cf4:	e00b      	b.n	8006d0e <HAL_RCC_OscConfig+0x36e>
 8006cf6:	4b5b      	ldr	r3, [pc, #364]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006cf8:	6a1b      	ldr	r3, [r3, #32]
 8006cfa:	4a5a      	ldr	r2, [pc, #360]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006cfc:	f023 0301 	bic.w	r3, r3, #1
 8006d00:	6213      	str	r3, [r2, #32]
 8006d02:	4b58      	ldr	r3, [pc, #352]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	4a57      	ldr	r2, [pc, #348]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006d08:	f023 0304 	bic.w	r3, r3, #4
 8006d0c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d015      	beq.n	8006d42 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d16:	f7ff fb9d 	bl	8006454 <HAL_GetTick>
 8006d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d1c:	e00a      	b.n	8006d34 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d1e:	f7ff fb99 	bl	8006454 <HAL_GetTick>
 8006d22:	4602      	mov	r2, r0
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d901      	bls.n	8006d34 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e0b1      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d34:	4b4b      	ldr	r3, [pc, #300]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	f003 0302 	and.w	r3, r3, #2
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d0ee      	beq.n	8006d1e <HAL_RCC_OscConfig+0x37e>
 8006d40:	e014      	b.n	8006d6c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d42:	f7ff fb87 	bl	8006454 <HAL_GetTick>
 8006d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d48:	e00a      	b.n	8006d60 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d4a:	f7ff fb83 	bl	8006454 <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d901      	bls.n	8006d60 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e09b      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d60:	4b40      	ldr	r3, [pc, #256]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	f003 0302 	and.w	r3, r3, #2
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1ee      	bne.n	8006d4a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006d6c:	7dfb      	ldrb	r3, [r7, #23]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d105      	bne.n	8006d7e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d72:	4b3c      	ldr	r3, [pc, #240]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006d74:	69db      	ldr	r3, [r3, #28]
 8006d76:	4a3b      	ldr	r2, [pc, #236]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006d78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d7c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 8087 	beq.w	8006e96 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d88:	4b36      	ldr	r3, [pc, #216]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f003 030c 	and.w	r3, r3, #12
 8006d90:	2b08      	cmp	r3, #8
 8006d92:	d061      	beq.n	8006e58 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	69db      	ldr	r3, [r3, #28]
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d146      	bne.n	8006e2a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d9c:	4b33      	ldr	r3, [pc, #204]	@ (8006e6c <HAL_RCC_OscConfig+0x4cc>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006da2:	f7ff fb57 	bl	8006454 <HAL_GetTick>
 8006da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006da8:	e008      	b.n	8006dbc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006daa:	f7ff fb53 	bl	8006454 <HAL_GetTick>
 8006dae:	4602      	mov	r2, r0
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	1ad3      	subs	r3, r2, r3
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d901      	bls.n	8006dbc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006db8:	2303      	movs	r3, #3
 8006dba:	e06d      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006dbc:	4b29      	ldr	r3, [pc, #164]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1f0      	bne.n	8006daa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a1b      	ldr	r3, [r3, #32]
 8006dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dd0:	d108      	bne.n	8006de4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006dd2:	4b24      	ldr	r3, [pc, #144]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	4921      	ldr	r1, [pc, #132]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006de0:	4313      	orrs	r3, r2
 8006de2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006de4:	4b1f      	ldr	r3, [pc, #124]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6a19      	ldr	r1, [r3, #32]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006df4:	430b      	orrs	r3, r1
 8006df6:	491b      	ldr	r1, [pc, #108]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8006e6c <HAL_RCC_OscConfig+0x4cc>)
 8006dfe:	2201      	movs	r2, #1
 8006e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e02:	f7ff fb27 	bl	8006454 <HAL_GetTick>
 8006e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e08:	e008      	b.n	8006e1c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e0a:	f7ff fb23 	bl	8006454 <HAL_GetTick>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	1ad3      	subs	r3, r2, r3
 8006e14:	2b02      	cmp	r3, #2
 8006e16:	d901      	bls.n	8006e1c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e03d      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e1c:	4b11      	ldr	r3, [pc, #68]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d0f0      	beq.n	8006e0a <HAL_RCC_OscConfig+0x46a>
 8006e28:	e035      	b.n	8006e96 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e2a:	4b10      	ldr	r3, [pc, #64]	@ (8006e6c <HAL_RCC_OscConfig+0x4cc>)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e30:	f7ff fb10 	bl	8006454 <HAL_GetTick>
 8006e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e36:	e008      	b.n	8006e4a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e38:	f7ff fb0c 	bl	8006454 <HAL_GetTick>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d901      	bls.n	8006e4a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006e46:	2303      	movs	r3, #3
 8006e48:	e026      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e4a:	4b06      	ldr	r3, [pc, #24]	@ (8006e64 <HAL_RCC_OscConfig+0x4c4>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1f0      	bne.n	8006e38 <HAL_RCC_OscConfig+0x498>
 8006e56:	e01e      	b.n	8006e96 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	69db      	ldr	r3, [r3, #28]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d107      	bne.n	8006e70 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e019      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
 8006e64:	40021000 	.word	0x40021000
 8006e68:	40007000 	.word	0x40007000
 8006e6c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006e70:	4b0b      	ldr	r3, [pc, #44]	@ (8006ea0 <HAL_RCC_OscConfig+0x500>)
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6a1b      	ldr	r3, [r3, #32]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d106      	bne.n	8006e92 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d001      	beq.n	8006e96 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e000      	b.n	8006e98 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3718      	adds	r7, #24
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	40021000 	.word	0x40021000

08006ea4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d101      	bne.n	8006eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e0d0      	b.n	800705a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006eb8:	4b6a      	ldr	r3, [pc, #424]	@ (8007064 <HAL_RCC_ClockConfig+0x1c0>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0307 	and.w	r3, r3, #7
 8006ec0:	683a      	ldr	r2, [r7, #0]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d910      	bls.n	8006ee8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ec6:	4b67      	ldr	r3, [pc, #412]	@ (8007064 <HAL_RCC_ClockConfig+0x1c0>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f023 0207 	bic.w	r2, r3, #7
 8006ece:	4965      	ldr	r1, [pc, #404]	@ (8007064 <HAL_RCC_ClockConfig+0x1c0>)
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ed6:	4b63      	ldr	r3, [pc, #396]	@ (8007064 <HAL_RCC_ClockConfig+0x1c0>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0307 	and.w	r3, r3, #7
 8006ede:	683a      	ldr	r2, [r7, #0]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d001      	beq.n	8006ee8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e0b8      	b.n	800705a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0302 	and.w	r3, r3, #2
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d020      	beq.n	8006f36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f003 0304 	and.w	r3, r3, #4
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d005      	beq.n	8006f0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f00:	4b59      	ldr	r3, [pc, #356]	@ (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	4a58      	ldr	r2, [pc, #352]	@ (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 8006f06:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006f0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0308 	and.w	r3, r3, #8
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d005      	beq.n	8006f24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f18:	4b53      	ldr	r3, [pc, #332]	@ (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	4a52      	ldr	r2, [pc, #328]	@ (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 8006f1e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8006f22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f24:	4b50      	ldr	r3, [pc, #320]	@ (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	494d      	ldr	r1, [pc, #308]	@ (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0301 	and.w	r3, r3, #1
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d040      	beq.n	8006fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d107      	bne.n	8006f5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f4a:	4b47      	ldr	r3, [pc, #284]	@ (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d115      	bne.n	8006f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e07f      	b.n	800705a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	685b      	ldr	r3, [r3, #4]
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d107      	bne.n	8006f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f62:	4b41      	ldr	r3, [pc, #260]	@ (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d109      	bne.n	8006f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e073      	b.n	800705a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f72:	4b3d      	ldr	r3, [pc, #244]	@ (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0302 	and.w	r3, r3, #2
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e06b      	b.n	800705a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f82:	4b39      	ldr	r3, [pc, #228]	@ (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f023 0203 	bic.w	r2, r3, #3
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	4936      	ldr	r1, [pc, #216]	@ (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f94:	f7ff fa5e 	bl	8006454 <HAL_GetTick>
 8006f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f9a:	e00a      	b.n	8006fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f9c:	f7ff fa5a 	bl	8006454 <HAL_GetTick>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d901      	bls.n	8006fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e053      	b.n	800705a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fb2:	4b2d      	ldr	r3, [pc, #180]	@ (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f003 020c 	and.w	r2, r3, #12
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d1eb      	bne.n	8006f9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006fc4:	4b27      	ldr	r3, [pc, #156]	@ (8007064 <HAL_RCC_ClockConfig+0x1c0>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0307 	and.w	r3, r3, #7
 8006fcc:	683a      	ldr	r2, [r7, #0]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d210      	bcs.n	8006ff4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fd2:	4b24      	ldr	r3, [pc, #144]	@ (8007064 <HAL_RCC_ClockConfig+0x1c0>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f023 0207 	bic.w	r2, r3, #7
 8006fda:	4922      	ldr	r1, [pc, #136]	@ (8007064 <HAL_RCC_ClockConfig+0x1c0>)
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fe2:	4b20      	ldr	r3, [pc, #128]	@ (8007064 <HAL_RCC_ClockConfig+0x1c0>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0307 	and.w	r3, r3, #7
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	429a      	cmp	r2, r3
 8006fee:	d001      	beq.n	8006ff4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e032      	b.n	800705a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0304 	and.w	r3, r3, #4
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d008      	beq.n	8007012 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007000:	4b19      	ldr	r3, [pc, #100]	@ (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	4916      	ldr	r1, [pc, #88]	@ (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 800700e:	4313      	orrs	r3, r2
 8007010:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0308 	and.w	r3, r3, #8
 800701a:	2b00      	cmp	r3, #0
 800701c:	d009      	beq.n	8007032 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800701e:	4b12      	ldr	r3, [pc, #72]	@ (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	00db      	lsls	r3, r3, #3
 800702c:	490e      	ldr	r1, [pc, #56]	@ (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 800702e:	4313      	orrs	r3, r2
 8007030:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007032:	f000 f821 	bl	8007078 <HAL_RCC_GetSysClockFreq>
 8007036:	4602      	mov	r2, r0
 8007038:	4b0b      	ldr	r3, [pc, #44]	@ (8007068 <HAL_RCC_ClockConfig+0x1c4>)
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	091b      	lsrs	r3, r3, #4
 800703e:	f003 030f 	and.w	r3, r3, #15
 8007042:	490a      	ldr	r1, [pc, #40]	@ (800706c <HAL_RCC_ClockConfig+0x1c8>)
 8007044:	5ccb      	ldrb	r3, [r1, r3]
 8007046:	fa22 f303 	lsr.w	r3, r2, r3
 800704a:	4a09      	ldr	r2, [pc, #36]	@ (8007070 <HAL_RCC_ClockConfig+0x1cc>)
 800704c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800704e:	4b09      	ldr	r3, [pc, #36]	@ (8007074 <HAL_RCC_ClockConfig+0x1d0>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4618      	mov	r0, r3
 8007054:	f7ff f9bc 	bl	80063d0 <HAL_InitTick>

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	40022000 	.word	0x40022000
 8007068:	40021000 	.word	0x40021000
 800706c:	080071cc 	.word	0x080071cc
 8007070:	20000000 	.word	0x20000000
 8007074:	20000004 	.word	0x20000004

08007078 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007078:	b480      	push	{r7}
 800707a:	b087      	sub	sp, #28
 800707c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800707e:	2300      	movs	r3, #0
 8007080:	60fb      	str	r3, [r7, #12]
 8007082:	2300      	movs	r3, #0
 8007084:	60bb      	str	r3, [r7, #8]
 8007086:	2300      	movs	r3, #0
 8007088:	617b      	str	r3, [r7, #20]
 800708a:	2300      	movs	r3, #0
 800708c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800708e:	2300      	movs	r3, #0
 8007090:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007092:	4b1e      	ldr	r3, [pc, #120]	@ (800710c <HAL_RCC_GetSysClockFreq+0x94>)
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f003 030c 	and.w	r3, r3, #12
 800709e:	2b04      	cmp	r3, #4
 80070a0:	d002      	beq.n	80070a8 <HAL_RCC_GetSysClockFreq+0x30>
 80070a2:	2b08      	cmp	r3, #8
 80070a4:	d003      	beq.n	80070ae <HAL_RCC_GetSysClockFreq+0x36>
 80070a6:	e027      	b.n	80070f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80070a8:	4b19      	ldr	r3, [pc, #100]	@ (8007110 <HAL_RCC_GetSysClockFreq+0x98>)
 80070aa:	613b      	str	r3, [r7, #16]
      break;
 80070ac:	e027      	b.n	80070fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	0c9b      	lsrs	r3, r3, #18
 80070b2:	f003 030f 	and.w	r3, r3, #15
 80070b6:	4a17      	ldr	r2, [pc, #92]	@ (8007114 <HAL_RCC_GetSysClockFreq+0x9c>)
 80070b8:	5cd3      	ldrb	r3, [r2, r3]
 80070ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d010      	beq.n	80070e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80070c6:	4b11      	ldr	r3, [pc, #68]	@ (800710c <HAL_RCC_GetSysClockFreq+0x94>)
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	0c5b      	lsrs	r3, r3, #17
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	4a11      	ldr	r2, [pc, #68]	@ (8007118 <HAL_RCC_GetSysClockFreq+0xa0>)
 80070d2:	5cd3      	ldrb	r3, [r2, r3]
 80070d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a0d      	ldr	r2, [pc, #52]	@ (8007110 <HAL_RCC_GetSysClockFreq+0x98>)
 80070da:	fb03 f202 	mul.w	r2, r3, r2
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070e4:	617b      	str	r3, [r7, #20]
 80070e6:	e004      	b.n	80070f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a0c      	ldr	r2, [pc, #48]	@ (800711c <HAL_RCC_GetSysClockFreq+0xa4>)
 80070ec:	fb02 f303 	mul.w	r3, r2, r3
 80070f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	613b      	str	r3, [r7, #16]
      break;
 80070f6:	e002      	b.n	80070fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80070f8:	4b05      	ldr	r3, [pc, #20]	@ (8007110 <HAL_RCC_GetSysClockFreq+0x98>)
 80070fa:	613b      	str	r3, [r7, #16]
      break;
 80070fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070fe:	693b      	ldr	r3, [r7, #16]
}
 8007100:	4618      	mov	r0, r3
 8007102:	371c      	adds	r7, #28
 8007104:	46bd      	mov	sp, r7
 8007106:	bc80      	pop	{r7}
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	40021000 	.word	0x40021000
 8007110:	007a1200 	.word	0x007a1200
 8007114:	080071dc 	.word	0x080071dc
 8007118:	080071ec 	.word	0x080071ec
 800711c:	003d0900 	.word	0x003d0900

08007120 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007128:	4b0a      	ldr	r3, [pc, #40]	@ (8007154 <RCC_Delay+0x34>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a0a      	ldr	r2, [pc, #40]	@ (8007158 <RCC_Delay+0x38>)
 800712e:	fba2 2303 	umull	r2, r3, r2, r3
 8007132:	0a5b      	lsrs	r3, r3, #9
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	fb02 f303 	mul.w	r3, r2, r3
 800713a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800713c:	bf00      	nop
  }
  while (Delay --);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	1e5a      	subs	r2, r3, #1
 8007142:	60fa      	str	r2, [r7, #12]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1f9      	bne.n	800713c <RCC_Delay+0x1c>
}
 8007148:	bf00      	nop
 800714a:	bf00      	nop
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	bc80      	pop	{r7}
 8007152:	4770      	bx	lr
 8007154:	20000000 	.word	0x20000000
 8007158:	10624dd3 	.word	0x10624dd3

0800715c <memset>:
 800715c:	4603      	mov	r3, r0
 800715e:	4402      	add	r2, r0
 8007160:	4293      	cmp	r3, r2
 8007162:	d100      	bne.n	8007166 <memset+0xa>
 8007164:	4770      	bx	lr
 8007166:	f803 1b01 	strb.w	r1, [r3], #1
 800716a:	e7f9      	b.n	8007160 <memset+0x4>

0800716c <__libc_init_array>:
 800716c:	b570      	push	{r4, r5, r6, lr}
 800716e:	2600      	movs	r6, #0
 8007170:	4d0c      	ldr	r5, [pc, #48]	@ (80071a4 <__libc_init_array+0x38>)
 8007172:	4c0d      	ldr	r4, [pc, #52]	@ (80071a8 <__libc_init_array+0x3c>)
 8007174:	1b64      	subs	r4, r4, r5
 8007176:	10a4      	asrs	r4, r4, #2
 8007178:	42a6      	cmp	r6, r4
 800717a:	d109      	bne.n	8007190 <__libc_init_array+0x24>
 800717c:	f000 f81a 	bl	80071b4 <_init>
 8007180:	2600      	movs	r6, #0
 8007182:	4d0a      	ldr	r5, [pc, #40]	@ (80071ac <__libc_init_array+0x40>)
 8007184:	4c0a      	ldr	r4, [pc, #40]	@ (80071b0 <__libc_init_array+0x44>)
 8007186:	1b64      	subs	r4, r4, r5
 8007188:	10a4      	asrs	r4, r4, #2
 800718a:	42a6      	cmp	r6, r4
 800718c:	d105      	bne.n	800719a <__libc_init_array+0x2e>
 800718e:	bd70      	pop	{r4, r5, r6, pc}
 8007190:	f855 3b04 	ldr.w	r3, [r5], #4
 8007194:	4798      	blx	r3
 8007196:	3601      	adds	r6, #1
 8007198:	e7ee      	b.n	8007178 <__libc_init_array+0xc>
 800719a:	f855 3b04 	ldr.w	r3, [r5], #4
 800719e:	4798      	blx	r3
 80071a0:	3601      	adds	r6, #1
 80071a2:	e7f2      	b.n	800718a <__libc_init_array+0x1e>
 80071a4:	080071f0 	.word	0x080071f0
 80071a8:	080071f0 	.word	0x080071f0
 80071ac:	080071f0 	.word	0x080071f0
 80071b0:	080071f4 	.word	0x080071f4

080071b4 <_init>:
 80071b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071b6:	bf00      	nop
 80071b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ba:	bc08      	pop	{r3}
 80071bc:	469e      	mov	lr, r3
 80071be:	4770      	bx	lr

080071c0 <_fini>:
 80071c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c2:	bf00      	nop
 80071c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071c6:	bc08      	pop	{r3}
 80071c8:	469e      	mov	lr, r3
 80071ca:	4770      	bx	lr
