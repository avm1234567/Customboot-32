
LED_BLINK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08004000  08004000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010d0  0800410c  0800410c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080051dc  080051dc  000021dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005200  08005200  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005200  08005200  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005200  08005200  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005200  08005200  00002200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005204  08005204  00002204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005208  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08005214  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08005214  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002a9a  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e1c  00000000  00000000  00005acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003d0  00000000  00000000  000068f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002b8  00000000  00000000  00006cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001602a  00000000  00000000  00006f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004af5  00000000  00000000  0001cfa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007d10a  00000000  00000000  00021a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009eba1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d2c  00000000  00000000  0009ebe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  0009f910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800410c <__do_global_dtors_aux>:
 800410c:	b510      	push	{r4, lr}
 800410e:	4c05      	ldr	r4, [pc, #20]	@ (8004124 <__do_global_dtors_aux+0x18>)
 8004110:	7823      	ldrb	r3, [r4, #0]
 8004112:	b933      	cbnz	r3, 8004122 <__do_global_dtors_aux+0x16>
 8004114:	4b04      	ldr	r3, [pc, #16]	@ (8004128 <__do_global_dtors_aux+0x1c>)
 8004116:	b113      	cbz	r3, 800411e <__do_global_dtors_aux+0x12>
 8004118:	4804      	ldr	r0, [pc, #16]	@ (800412c <__do_global_dtors_aux+0x20>)
 800411a:	f3af 8000 	nop.w
 800411e:	2301      	movs	r3, #1
 8004120:	7023      	strb	r3, [r4, #0]
 8004122:	bd10      	pop	{r4, pc}
 8004124:	2000000c 	.word	0x2000000c
 8004128:	00000000 	.word	0x00000000
 800412c:	080051c4 	.word	0x080051c4

08004130 <frame_dummy>:
 8004130:	b508      	push	{r3, lr}
 8004132:	4b03      	ldr	r3, [pc, #12]	@ (8004140 <frame_dummy+0x10>)
 8004134:	b11b      	cbz	r3, 800413e <frame_dummy+0xe>
 8004136:	4903      	ldr	r1, [pc, #12]	@ (8004144 <frame_dummy+0x14>)
 8004138:	4803      	ldr	r0, [pc, #12]	@ (8004148 <frame_dummy+0x18>)
 800413a:	f3af 8000 	nop.w
 800413e:	bd08      	pop	{r3, pc}
 8004140:	00000000 	.word	0x00000000
 8004144:	20000010 	.word	0x20000010
 8004148:	080051c4 	.word	0x080051c4

0800414c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004150:	f000 f930 	bl	80043b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004154:	f000 f81a 	bl	800418c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004158:	f000 f854 	bl	8004204 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800415c:	2200      	movs	r2, #0
 800415e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004162:	4809      	ldr	r0, [pc, #36]	@ (8004188 <main+0x3c>)
 8004164:	f000 fc0c 	bl	8004980 <HAL_GPIO_WritePin>
	  	  HAL_Delay(500);
 8004168:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800416c:	f000 f984 	bl	8004478 <HAL_Delay>
	  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8004170:	2201      	movs	r2, #1
 8004172:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004176:	4804      	ldr	r0, [pc, #16]	@ (8004188 <main+0x3c>)
 8004178:	f000 fc02 	bl	8004980 <HAL_GPIO_WritePin>
	  	  HAL_Delay(500);
 800417c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004180:	f000 f97a 	bl	8004478 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004184:	bf00      	nop
 8004186:	e7e9      	b.n	800415c <main+0x10>
 8004188:	40011000 	.word	0x40011000

0800418c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b090      	sub	sp, #64	@ 0x40
 8004190:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004192:	f107 0318 	add.w	r3, r7, #24
 8004196:	2228      	movs	r2, #40	@ 0x28
 8004198:	2100      	movs	r1, #0
 800419a:	4618      	mov	r0, r3
 800419c:	f000 ffe6 	bl	800516c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80041a0:	1d3b      	adds	r3, r7, #4
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	605a      	str	r2, [r3, #4]
 80041a8:	609a      	str	r2, [r3, #8]
 80041aa:	60da      	str	r2, [r3, #12]
 80041ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80041ae:	2302      	movs	r3, #2
 80041b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80041b2:	2301      	movs	r3, #1
 80041b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80041b6:	2310      	movs	r3, #16
 80041b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80041ba:	2300      	movs	r3, #0
 80041bc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80041be:	f107 0318 	add.w	r3, r7, #24
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fbf4 	bl	80049b0 <HAL_RCC_OscConfig>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80041ce:	f000 f859 	bl	8004284 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80041d2:	230f      	movs	r3, #15
 80041d4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80041d6:	2300      	movs	r3, #0
 80041d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80041da:	2300      	movs	r3, #0
 80041dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80041de:	2300      	movs	r3, #0
 80041e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80041e2:	2300      	movs	r3, #0
 80041e4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80041e6:	1d3b      	adds	r3, r7, #4
 80041e8:	2100      	movs	r1, #0
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 fe62 	bl	8004eb4 <HAL_RCC_ClockConfig>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80041f6:	f000 f845 	bl	8004284 <Error_Handler>
  }
}
 80041fa:	bf00      	nop
 80041fc:	3740      	adds	r7, #64	@ 0x40
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800420a:	f107 0308 	add.w	r3, r7, #8
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	605a      	str	r2, [r3, #4]
 8004214:	609a      	str	r2, [r3, #8]
 8004216:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004218:	4b18      	ldr	r3, [pc, #96]	@ (800427c <MX_GPIO_Init+0x78>)
 800421a:	699b      	ldr	r3, [r3, #24]
 800421c:	4a17      	ldr	r2, [pc, #92]	@ (800427c <MX_GPIO_Init+0x78>)
 800421e:	f043 0310 	orr.w	r3, r3, #16
 8004222:	6193      	str	r3, [r2, #24]
 8004224:	4b15      	ldr	r3, [pc, #84]	@ (800427c <MX_GPIO_Init+0x78>)
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	607b      	str	r3, [r7, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004230:	4b12      	ldr	r3, [pc, #72]	@ (800427c <MX_GPIO_Init+0x78>)
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	4a11      	ldr	r2, [pc, #68]	@ (800427c <MX_GPIO_Init+0x78>)
 8004236:	f043 0320 	orr.w	r3, r3, #32
 800423a:	6193      	str	r3, [r2, #24]
 800423c:	4b0f      	ldr	r3, [pc, #60]	@ (800427c <MX_GPIO_Init+0x78>)
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	f003 0320 	and.w	r3, r3, #32
 8004244:	603b      	str	r3, [r7, #0]
 8004246:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004248:	2200      	movs	r2, #0
 800424a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800424e:	480c      	ldr	r0, [pc, #48]	@ (8004280 <MX_GPIO_Init+0x7c>)
 8004250:	f000 fb96 	bl	8004980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004254:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004258:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800425a:	2301      	movs	r3, #1
 800425c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800425e:	2300      	movs	r3, #0
 8004260:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004262:	2302      	movs	r3, #2
 8004264:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004266:	f107 0308 	add.w	r3, r7, #8
 800426a:	4619      	mov	r1, r3
 800426c:	4804      	ldr	r0, [pc, #16]	@ (8004280 <MX_GPIO_Init+0x7c>)
 800426e:	f000 fa0b 	bl	8004688 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8004272:	bf00      	nop
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	40021000 	.word	0x40021000
 8004280:	40011000 	.word	0x40011000

08004284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004284:	b480      	push	{r7}
 8004286:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004288:	b672      	cpsid	i
}
 800428a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800428c:	bf00      	nop
 800428e:	e7fd      	b.n	800428c <Error_Handler+0x8>

08004290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004296:	4b15      	ldr	r3, [pc, #84]	@ (80042ec <HAL_MspInit+0x5c>)
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	4a14      	ldr	r2, [pc, #80]	@ (80042ec <HAL_MspInit+0x5c>)
 800429c:	f043 0301 	orr.w	r3, r3, #1
 80042a0:	6193      	str	r3, [r2, #24]
 80042a2:	4b12      	ldr	r3, [pc, #72]	@ (80042ec <HAL_MspInit+0x5c>)
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	60bb      	str	r3, [r7, #8]
 80042ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80042ae:	4b0f      	ldr	r3, [pc, #60]	@ (80042ec <HAL_MspInit+0x5c>)
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	4a0e      	ldr	r2, [pc, #56]	@ (80042ec <HAL_MspInit+0x5c>)
 80042b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042b8:	61d3      	str	r3, [r2, #28]
 80042ba:	4b0c      	ldr	r3, [pc, #48]	@ (80042ec <HAL_MspInit+0x5c>)
 80042bc:	69db      	ldr	r3, [r3, #28]
 80042be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042c2:	607b      	str	r3, [r7, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80042c6:	4b0a      	ldr	r3, [pc, #40]	@ (80042f0 <HAL_MspInit+0x60>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80042da:	60fb      	str	r3, [r7, #12]
 80042dc:	4a04      	ldr	r2, [pc, #16]	@ (80042f0 <HAL_MspInit+0x60>)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80042e2:	bf00      	nop
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bc80      	pop	{r7}
 80042ea:	4770      	bx	lr
 80042ec:	40021000 	.word	0x40021000
 80042f0:	40010000 	.word	0x40010000

080042f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80042f8:	bf00      	nop
 80042fa:	e7fd      	b.n	80042f8 <NMI_Handler+0x4>

080042fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004300:	bf00      	nop
 8004302:	e7fd      	b.n	8004300 <HardFault_Handler+0x4>

08004304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004308:	bf00      	nop
 800430a:	e7fd      	b.n	8004308 <MemManage_Handler+0x4>

0800430c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800430c:	b480      	push	{r7}
 800430e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004310:	bf00      	nop
 8004312:	e7fd      	b.n	8004310 <BusFault_Handler+0x4>

08004314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004318:	bf00      	nop
 800431a:	e7fd      	b.n	8004318 <UsageFault_Handler+0x4>

0800431c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004320:	bf00      	nop
 8004322:	46bd      	mov	sp, r7
 8004324:	bc80      	pop	{r7}
 8004326:	4770      	bx	lr

08004328 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800432c:	bf00      	nop
 800432e:	46bd      	mov	sp, r7
 8004330:	bc80      	pop	{r7}
 8004332:	4770      	bx	lr

08004334 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004334:	b480      	push	{r7}
 8004336:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004338:	bf00      	nop
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr

08004340 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004344:	f000 f87c 	bl	8004440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004348:	bf00      	nop
 800434a:	bd80      	pop	{r7, pc}

0800434c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800434c:	b480      	push	{r7}
 800434e:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8004350:	4b03      	ldr	r3, [pc, #12]	@ (8004360 <SystemInit+0x14>)
 8004352:	4a04      	ldr	r2, [pc, #16]	@ (8004364 <SystemInit+0x18>)
 8004354:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004356:	bf00      	nop
 8004358:	46bd      	mov	sp, r7
 800435a:	bc80      	pop	{r7}
 800435c:	4770      	bx	lr
 800435e:	bf00      	nop
 8004360:	e000ed00 	.word	0xe000ed00
 8004364:	08004000 	.word	0x08004000

08004368 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004368:	f7ff fff0 	bl	800434c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800436c:	480b      	ldr	r0, [pc, #44]	@ (800439c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800436e:	490c      	ldr	r1, [pc, #48]	@ (80043a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004370:	4a0c      	ldr	r2, [pc, #48]	@ (80043a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004374:	e002      	b.n	800437c <LoopCopyDataInit>

08004376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800437a:	3304      	adds	r3, #4

0800437c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800437c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800437e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004380:	d3f9      	bcc.n	8004376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004382:	4a09      	ldr	r2, [pc, #36]	@ (80043a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004384:	4c09      	ldr	r4, [pc, #36]	@ (80043ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004388:	e001      	b.n	800438e <LoopFillZerobss>

0800438a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800438a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800438c:	3204      	adds	r2, #4

0800438e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800438e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004390:	d3fb      	bcc.n	800438a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004392:	f000 fef3 	bl	800517c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004396:	f7ff fed9 	bl	800414c <main>
  bx lr
 800439a:	4770      	bx	lr
  ldr r0, =_sdata
 800439c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80043a4:	08005208 	.word	0x08005208
  ldr r2, =_sbss
 80043a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80043ac:	2000002c 	.word	0x2000002c

080043b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80043b0:	e7fe      	b.n	80043b0 <ADC1_2_IRQHandler>
	...

080043b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043b8:	4b08      	ldr	r3, [pc, #32]	@ (80043dc <HAL_Init+0x28>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a07      	ldr	r2, [pc, #28]	@ (80043dc <HAL_Init+0x28>)
 80043be:	f043 0310 	orr.w	r3, r3, #16
 80043c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043c4:	2003      	movs	r0, #3
 80043c6:	f000 f92b 	bl	8004620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043ca:	200f      	movs	r0, #15
 80043cc:	f000 f808 	bl	80043e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043d0:	f7ff ff5e 	bl	8004290 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	40022000 	.word	0x40022000

080043e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043e8:	4b12      	ldr	r3, [pc, #72]	@ (8004434 <HAL_InitTick+0x54>)
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	4b12      	ldr	r3, [pc, #72]	@ (8004438 <HAL_InitTick+0x58>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	4619      	mov	r1, r3
 80043f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80043fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 f935 	bl	800466e <HAL_SYSTICK_Config>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e00e      	b.n	800442c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b0f      	cmp	r3, #15
 8004412:	d80a      	bhi.n	800442a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004414:	2200      	movs	r2, #0
 8004416:	6879      	ldr	r1, [r7, #4]
 8004418:	f04f 30ff 	mov.w	r0, #4294967295
 800441c:	f000 f90b 	bl	8004636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004420:	4a06      	ldr	r2, [pc, #24]	@ (800443c <HAL_InitTick+0x5c>)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	e000      	b.n	800442c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
}
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	20000000 	.word	0x20000000
 8004438:	20000008 	.word	0x20000008
 800443c:	20000004 	.word	0x20000004

08004440 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004440:	b480      	push	{r7}
 8004442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004444:	4b05      	ldr	r3, [pc, #20]	@ (800445c <HAL_IncTick+0x1c>)
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	461a      	mov	r2, r3
 800444a:	4b05      	ldr	r3, [pc, #20]	@ (8004460 <HAL_IncTick+0x20>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4413      	add	r3, r2
 8004450:	4a03      	ldr	r2, [pc, #12]	@ (8004460 <HAL_IncTick+0x20>)
 8004452:	6013      	str	r3, [r2, #0]
}
 8004454:	bf00      	nop
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr
 800445c:	20000008 	.word	0x20000008
 8004460:	20000028 	.word	0x20000028

08004464 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  return uwTick;
 8004468:	4b02      	ldr	r3, [pc, #8]	@ (8004474 <HAL_GetTick+0x10>)
 800446a:	681b      	ldr	r3, [r3, #0]
}
 800446c:	4618      	mov	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr
 8004474:	20000028 	.word	0x20000028

08004478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004480:	f7ff fff0 	bl	8004464 <HAL_GetTick>
 8004484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004490:	d005      	beq.n	800449e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004492:	4b0a      	ldr	r3, [pc, #40]	@ (80044bc <HAL_Delay+0x44>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	461a      	mov	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4413      	add	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800449e:	bf00      	nop
 80044a0:	f7ff ffe0 	bl	8004464 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d8f7      	bhi.n	80044a0 <HAL_Delay+0x28>
  {
  }
}
 80044b0:	bf00      	nop
 80044b2:	bf00      	nop
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	20000008 	.word	0x20000008

080044c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004504 <__NVIC_SetPriorityGrouping+0x44>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80044dc:	4013      	ands	r3, r2
 80044de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80044ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044f2:	4a04      	ldr	r2, [pc, #16]	@ (8004504 <__NVIC_SetPriorityGrouping+0x44>)
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	60d3      	str	r3, [r2, #12]
}
 80044f8:	bf00      	nop
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bc80      	pop	{r7}
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	e000ed00 	.word	0xe000ed00

08004508 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800450c:	4b04      	ldr	r3, [pc, #16]	@ (8004520 <__NVIC_GetPriorityGrouping+0x18>)
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	0a1b      	lsrs	r3, r3, #8
 8004512:	f003 0307 	and.w	r3, r3, #7
}
 8004516:	4618      	mov	r0, r3
 8004518:	46bd      	mov	sp, r7
 800451a:	bc80      	pop	{r7}
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	e000ed00 	.word	0xe000ed00

08004524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	4603      	mov	r3, r0
 800452c:	6039      	str	r1, [r7, #0]
 800452e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004534:	2b00      	cmp	r3, #0
 8004536:	db0a      	blt.n	800454e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	b2da      	uxtb	r2, r3
 800453c:	490c      	ldr	r1, [pc, #48]	@ (8004570 <__NVIC_SetPriority+0x4c>)
 800453e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004542:	0112      	lsls	r2, r2, #4
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	440b      	add	r3, r1
 8004548:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800454c:	e00a      	b.n	8004564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	b2da      	uxtb	r2, r3
 8004552:	4908      	ldr	r1, [pc, #32]	@ (8004574 <__NVIC_SetPriority+0x50>)
 8004554:	79fb      	ldrb	r3, [r7, #7]
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	3b04      	subs	r3, #4
 800455c:	0112      	lsls	r2, r2, #4
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	440b      	add	r3, r1
 8004562:	761a      	strb	r2, [r3, #24]
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	bc80      	pop	{r7}
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	e000e100 	.word	0xe000e100
 8004574:	e000ed00 	.word	0xe000ed00

08004578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004578:	b480      	push	{r7}
 800457a:	b089      	sub	sp, #36	@ 0x24
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f1c3 0307 	rsb	r3, r3, #7
 8004592:	2b04      	cmp	r3, #4
 8004594:	bf28      	it	cs
 8004596:	2304      	movcs	r3, #4
 8004598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	3304      	adds	r3, #4
 800459e:	2b06      	cmp	r3, #6
 80045a0:	d902      	bls.n	80045a8 <NVIC_EncodePriority+0x30>
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3b03      	subs	r3, #3
 80045a6:	e000      	b.n	80045aa <NVIC_EncodePriority+0x32>
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045ac:	f04f 32ff 	mov.w	r2, #4294967295
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	fa02 f303 	lsl.w	r3, r2, r3
 80045b6:	43da      	mvns	r2, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	401a      	ands	r2, r3
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045c0:	f04f 31ff 	mov.w	r1, #4294967295
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ca:	43d9      	mvns	r1, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d0:	4313      	orrs	r3, r2
         );
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3724      	adds	r7, #36	@ 0x24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bc80      	pop	{r7}
 80045da:	4770      	bx	lr

080045dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045ec:	d301      	bcc.n	80045f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045ee:	2301      	movs	r3, #1
 80045f0:	e00f      	b.n	8004612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045f2:	4a0a      	ldr	r2, [pc, #40]	@ (800461c <SysTick_Config+0x40>)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045fa:	210f      	movs	r1, #15
 80045fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004600:	f7ff ff90 	bl	8004524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004604:	4b05      	ldr	r3, [pc, #20]	@ (800461c <SysTick_Config+0x40>)
 8004606:	2200      	movs	r2, #0
 8004608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800460a:	4b04      	ldr	r3, [pc, #16]	@ (800461c <SysTick_Config+0x40>)
 800460c:	2207      	movs	r2, #7
 800460e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	e000e010 	.word	0xe000e010

08004620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7ff ff49 	bl	80044c0 <__NVIC_SetPriorityGrouping>
}
 800462e:	bf00      	nop
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004636:	b580      	push	{r7, lr}
 8004638:	b086      	sub	sp, #24
 800463a:	af00      	add	r7, sp, #0
 800463c:	4603      	mov	r3, r0
 800463e:	60b9      	str	r1, [r7, #8]
 8004640:	607a      	str	r2, [r7, #4]
 8004642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004644:	2300      	movs	r3, #0
 8004646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004648:	f7ff ff5e 	bl	8004508 <__NVIC_GetPriorityGrouping>
 800464c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	68b9      	ldr	r1, [r7, #8]
 8004652:	6978      	ldr	r0, [r7, #20]
 8004654:	f7ff ff90 	bl	8004578 <NVIC_EncodePriority>
 8004658:	4602      	mov	r2, r0
 800465a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800465e:	4611      	mov	r1, r2
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff ff5f 	bl	8004524 <__NVIC_SetPriority>
}
 8004666:	bf00      	nop
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b082      	sub	sp, #8
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7ff ffb0 	bl	80045dc <SysTick_Config>
 800467c:	4603      	mov	r3, r0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004688:	b480      	push	{r7}
 800468a:	b08b      	sub	sp, #44	@ 0x2c
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004692:	2300      	movs	r3, #0
 8004694:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004696:	2300      	movs	r3, #0
 8004698:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800469a:	e161      	b.n	8004960 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800469c:	2201      	movs	r2, #1
 800469e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69fa      	ldr	r2, [r7, #28]
 80046ac:	4013      	ands	r3, r2
 80046ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	f040 8150 	bne.w	800495a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	4a97      	ldr	r2, [pc, #604]	@ (800491c <HAL_GPIO_Init+0x294>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d05e      	beq.n	8004782 <HAL_GPIO_Init+0xfa>
 80046c4:	4a95      	ldr	r2, [pc, #596]	@ (800491c <HAL_GPIO_Init+0x294>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d875      	bhi.n	80047b6 <HAL_GPIO_Init+0x12e>
 80046ca:	4a95      	ldr	r2, [pc, #596]	@ (8004920 <HAL_GPIO_Init+0x298>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d058      	beq.n	8004782 <HAL_GPIO_Init+0xfa>
 80046d0:	4a93      	ldr	r2, [pc, #588]	@ (8004920 <HAL_GPIO_Init+0x298>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d86f      	bhi.n	80047b6 <HAL_GPIO_Init+0x12e>
 80046d6:	4a93      	ldr	r2, [pc, #588]	@ (8004924 <HAL_GPIO_Init+0x29c>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d052      	beq.n	8004782 <HAL_GPIO_Init+0xfa>
 80046dc:	4a91      	ldr	r2, [pc, #580]	@ (8004924 <HAL_GPIO_Init+0x29c>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d869      	bhi.n	80047b6 <HAL_GPIO_Init+0x12e>
 80046e2:	4a91      	ldr	r2, [pc, #580]	@ (8004928 <HAL_GPIO_Init+0x2a0>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d04c      	beq.n	8004782 <HAL_GPIO_Init+0xfa>
 80046e8:	4a8f      	ldr	r2, [pc, #572]	@ (8004928 <HAL_GPIO_Init+0x2a0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d863      	bhi.n	80047b6 <HAL_GPIO_Init+0x12e>
 80046ee:	4a8f      	ldr	r2, [pc, #572]	@ (800492c <HAL_GPIO_Init+0x2a4>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d046      	beq.n	8004782 <HAL_GPIO_Init+0xfa>
 80046f4:	4a8d      	ldr	r2, [pc, #564]	@ (800492c <HAL_GPIO_Init+0x2a4>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d85d      	bhi.n	80047b6 <HAL_GPIO_Init+0x12e>
 80046fa:	2b12      	cmp	r3, #18
 80046fc:	d82a      	bhi.n	8004754 <HAL_GPIO_Init+0xcc>
 80046fe:	2b12      	cmp	r3, #18
 8004700:	d859      	bhi.n	80047b6 <HAL_GPIO_Init+0x12e>
 8004702:	a201      	add	r2, pc, #4	@ (adr r2, 8004708 <HAL_GPIO_Init+0x80>)
 8004704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004708:	08004783 	.word	0x08004783
 800470c:	0800475d 	.word	0x0800475d
 8004710:	0800476f 	.word	0x0800476f
 8004714:	080047b1 	.word	0x080047b1
 8004718:	080047b7 	.word	0x080047b7
 800471c:	080047b7 	.word	0x080047b7
 8004720:	080047b7 	.word	0x080047b7
 8004724:	080047b7 	.word	0x080047b7
 8004728:	080047b7 	.word	0x080047b7
 800472c:	080047b7 	.word	0x080047b7
 8004730:	080047b7 	.word	0x080047b7
 8004734:	080047b7 	.word	0x080047b7
 8004738:	080047b7 	.word	0x080047b7
 800473c:	080047b7 	.word	0x080047b7
 8004740:	080047b7 	.word	0x080047b7
 8004744:	080047b7 	.word	0x080047b7
 8004748:	080047b7 	.word	0x080047b7
 800474c:	08004765 	.word	0x08004765
 8004750:	08004779 	.word	0x08004779
 8004754:	4a76      	ldr	r2, [pc, #472]	@ (8004930 <HAL_GPIO_Init+0x2a8>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d013      	beq.n	8004782 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800475a:	e02c      	b.n	80047b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	623b      	str	r3, [r7, #32]
          break;
 8004762:	e029      	b.n	80047b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	3304      	adds	r3, #4
 800476a:	623b      	str	r3, [r7, #32]
          break;
 800476c:	e024      	b.n	80047b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	3308      	adds	r3, #8
 8004774:	623b      	str	r3, [r7, #32]
          break;
 8004776:	e01f      	b.n	80047b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	330c      	adds	r3, #12
 800477e:	623b      	str	r3, [r7, #32]
          break;
 8004780:	e01a      	b.n	80047b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d102      	bne.n	8004790 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800478a:	2304      	movs	r3, #4
 800478c:	623b      	str	r3, [r7, #32]
          break;
 800478e:	e013      	b.n	80047b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d105      	bne.n	80047a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004798:	2308      	movs	r3, #8
 800479a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69fa      	ldr	r2, [r7, #28]
 80047a0:	611a      	str	r2, [r3, #16]
          break;
 80047a2:	e009      	b.n	80047b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80047a4:	2308      	movs	r3, #8
 80047a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	69fa      	ldr	r2, [r7, #28]
 80047ac:	615a      	str	r2, [r3, #20]
          break;
 80047ae:	e003      	b.n	80047b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80047b0:	2300      	movs	r3, #0
 80047b2:	623b      	str	r3, [r7, #32]
          break;
 80047b4:	e000      	b.n	80047b8 <HAL_GPIO_Init+0x130>
          break;
 80047b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	2bff      	cmp	r3, #255	@ 0xff
 80047bc:	d801      	bhi.n	80047c2 <HAL_GPIO_Init+0x13a>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	e001      	b.n	80047c6 <HAL_GPIO_Init+0x13e>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	3304      	adds	r3, #4
 80047c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	2bff      	cmp	r3, #255	@ 0xff
 80047cc:	d802      	bhi.n	80047d4 <HAL_GPIO_Init+0x14c>
 80047ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	e002      	b.n	80047da <HAL_GPIO_Init+0x152>
 80047d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d6:	3b08      	subs	r3, #8
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	210f      	movs	r1, #15
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	fa01 f303 	lsl.w	r3, r1, r3
 80047e8:	43db      	mvns	r3, r3
 80047ea:	401a      	ands	r2, r3
 80047ec:	6a39      	ldr	r1, [r7, #32]
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	fa01 f303 	lsl.w	r3, r1, r3
 80047f4:	431a      	orrs	r2, r3
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004802:	2b00      	cmp	r3, #0
 8004804:	f000 80a9 	beq.w	800495a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004808:	4b4a      	ldr	r3, [pc, #296]	@ (8004934 <HAL_GPIO_Init+0x2ac>)
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	4a49      	ldr	r2, [pc, #292]	@ (8004934 <HAL_GPIO_Init+0x2ac>)
 800480e:	f043 0301 	orr.w	r3, r3, #1
 8004812:	6193      	str	r3, [r2, #24]
 8004814:	4b47      	ldr	r3, [pc, #284]	@ (8004934 <HAL_GPIO_Init+0x2ac>)
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	60bb      	str	r3, [r7, #8]
 800481e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004820:	4a45      	ldr	r2, [pc, #276]	@ (8004938 <HAL_GPIO_Init+0x2b0>)
 8004822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004824:	089b      	lsrs	r3, r3, #2
 8004826:	3302      	adds	r3, #2
 8004828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800482c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800482e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004830:	f003 0303 	and.w	r3, r3, #3
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	220f      	movs	r2, #15
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	43db      	mvns	r3, r3
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	4013      	ands	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a3d      	ldr	r2, [pc, #244]	@ (800493c <HAL_GPIO_Init+0x2b4>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d00d      	beq.n	8004868 <HAL_GPIO_Init+0x1e0>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a3c      	ldr	r2, [pc, #240]	@ (8004940 <HAL_GPIO_Init+0x2b8>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d007      	beq.n	8004864 <HAL_GPIO_Init+0x1dc>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a3b      	ldr	r2, [pc, #236]	@ (8004944 <HAL_GPIO_Init+0x2bc>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d101      	bne.n	8004860 <HAL_GPIO_Init+0x1d8>
 800485c:	2302      	movs	r3, #2
 800485e:	e004      	b.n	800486a <HAL_GPIO_Init+0x1e2>
 8004860:	2303      	movs	r3, #3
 8004862:	e002      	b.n	800486a <HAL_GPIO_Init+0x1e2>
 8004864:	2301      	movs	r3, #1
 8004866:	e000      	b.n	800486a <HAL_GPIO_Init+0x1e2>
 8004868:	2300      	movs	r3, #0
 800486a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800486c:	f002 0203 	and.w	r2, r2, #3
 8004870:	0092      	lsls	r2, r2, #2
 8004872:	4093      	lsls	r3, r2
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	4313      	orrs	r3, r2
 8004878:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800487a:	492f      	ldr	r1, [pc, #188]	@ (8004938 <HAL_GPIO_Init+0x2b0>)
 800487c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487e:	089b      	lsrs	r3, r3, #2
 8004880:	3302      	adds	r3, #2
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d006      	beq.n	80048a2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004894:	4b2c      	ldr	r3, [pc, #176]	@ (8004948 <HAL_GPIO_Init+0x2c0>)
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	492b      	ldr	r1, [pc, #172]	@ (8004948 <HAL_GPIO_Init+0x2c0>)
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	4313      	orrs	r3, r2
 800489e:	608b      	str	r3, [r1, #8]
 80048a0:	e006      	b.n	80048b0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80048a2:	4b29      	ldr	r3, [pc, #164]	@ (8004948 <HAL_GPIO_Init+0x2c0>)
 80048a4:	689a      	ldr	r2, [r3, #8]
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	43db      	mvns	r3, r3
 80048aa:	4927      	ldr	r1, [pc, #156]	@ (8004948 <HAL_GPIO_Init+0x2c0>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d006      	beq.n	80048ca <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80048bc:	4b22      	ldr	r3, [pc, #136]	@ (8004948 <HAL_GPIO_Init+0x2c0>)
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	4921      	ldr	r1, [pc, #132]	@ (8004948 <HAL_GPIO_Init+0x2c0>)
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	60cb      	str	r3, [r1, #12]
 80048c8:	e006      	b.n	80048d8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80048ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004948 <HAL_GPIO_Init+0x2c0>)
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	43db      	mvns	r3, r3
 80048d2:	491d      	ldr	r1, [pc, #116]	@ (8004948 <HAL_GPIO_Init+0x2c0>)
 80048d4:	4013      	ands	r3, r2
 80048d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d006      	beq.n	80048f2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80048e4:	4b18      	ldr	r3, [pc, #96]	@ (8004948 <HAL_GPIO_Init+0x2c0>)
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	4917      	ldr	r1, [pc, #92]	@ (8004948 <HAL_GPIO_Init+0x2c0>)
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	604b      	str	r3, [r1, #4]
 80048f0:	e006      	b.n	8004900 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80048f2:	4b15      	ldr	r3, [pc, #84]	@ (8004948 <HAL_GPIO_Init+0x2c0>)
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	43db      	mvns	r3, r3
 80048fa:	4913      	ldr	r1, [pc, #76]	@ (8004948 <HAL_GPIO_Init+0x2c0>)
 80048fc:	4013      	ands	r3, r2
 80048fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d01f      	beq.n	800494c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800490c:	4b0e      	ldr	r3, [pc, #56]	@ (8004948 <HAL_GPIO_Init+0x2c0>)
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	490d      	ldr	r1, [pc, #52]	@ (8004948 <HAL_GPIO_Init+0x2c0>)
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	4313      	orrs	r3, r2
 8004916:	600b      	str	r3, [r1, #0]
 8004918:	e01f      	b.n	800495a <HAL_GPIO_Init+0x2d2>
 800491a:	bf00      	nop
 800491c:	10320000 	.word	0x10320000
 8004920:	10310000 	.word	0x10310000
 8004924:	10220000 	.word	0x10220000
 8004928:	10210000 	.word	0x10210000
 800492c:	10120000 	.word	0x10120000
 8004930:	10110000 	.word	0x10110000
 8004934:	40021000 	.word	0x40021000
 8004938:	40010000 	.word	0x40010000
 800493c:	40010800 	.word	0x40010800
 8004940:	40010c00 	.word	0x40010c00
 8004944:	40011000 	.word	0x40011000
 8004948:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800494c:	4b0b      	ldr	r3, [pc, #44]	@ (800497c <HAL_GPIO_Init+0x2f4>)
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	43db      	mvns	r3, r3
 8004954:	4909      	ldr	r1, [pc, #36]	@ (800497c <HAL_GPIO_Init+0x2f4>)
 8004956:	4013      	ands	r3, r2
 8004958:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495c:	3301      	adds	r3, #1
 800495e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004966:	fa22 f303 	lsr.w	r3, r2, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	f47f ae96 	bne.w	800469c <HAL_GPIO_Init+0x14>
  }
}
 8004970:	bf00      	nop
 8004972:	bf00      	nop
 8004974:	372c      	adds	r7, #44	@ 0x2c
 8004976:	46bd      	mov	sp, r7
 8004978:	bc80      	pop	{r7}
 800497a:	4770      	bx	lr
 800497c:	40010400 	.word	0x40010400

08004980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	460b      	mov	r3, r1
 800498a:	807b      	strh	r3, [r7, #2]
 800498c:	4613      	mov	r3, r2
 800498e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004990:	787b      	ldrb	r3, [r7, #1]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004996:	887a      	ldrh	r2, [r7, #2]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800499c:	e003      	b.n	80049a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800499e:	887b      	ldrh	r3, [r7, #2]
 80049a0:	041a      	lsls	r2, r3, #16
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	611a      	str	r2, [r3, #16]
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bc80      	pop	{r7}
 80049ae:	4770      	bx	lr

080049b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e272      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 8087 	beq.w	8004ade <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049d0:	4b92      	ldr	r3, [pc, #584]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f003 030c 	and.w	r3, r3, #12
 80049d8:	2b04      	cmp	r3, #4
 80049da:	d00c      	beq.n	80049f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80049dc:	4b8f      	ldr	r3, [pc, #572]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f003 030c 	and.w	r3, r3, #12
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d112      	bne.n	8004a0e <HAL_RCC_OscConfig+0x5e>
 80049e8:	4b8c      	ldr	r3, [pc, #560]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049f4:	d10b      	bne.n	8004a0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f6:	4b89      	ldr	r3, [pc, #548]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d06c      	beq.n	8004adc <HAL_RCC_OscConfig+0x12c>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d168      	bne.n	8004adc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e24c      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a16:	d106      	bne.n	8004a26 <HAL_RCC_OscConfig+0x76>
 8004a18:	4b80      	ldr	r3, [pc, #512]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a7f      	ldr	r2, [pc, #508]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004a1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a22:	6013      	str	r3, [r2, #0]
 8004a24:	e02e      	b.n	8004a84 <HAL_RCC_OscConfig+0xd4>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10c      	bne.n	8004a48 <HAL_RCC_OscConfig+0x98>
 8004a2e:	4b7b      	ldr	r3, [pc, #492]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a7a      	ldr	r2, [pc, #488]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004a34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a38:	6013      	str	r3, [r2, #0]
 8004a3a:	4b78      	ldr	r3, [pc, #480]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a77      	ldr	r2, [pc, #476]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004a40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a44:	6013      	str	r3, [r2, #0]
 8004a46:	e01d      	b.n	8004a84 <HAL_RCC_OscConfig+0xd4>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a50:	d10c      	bne.n	8004a6c <HAL_RCC_OscConfig+0xbc>
 8004a52:	4b72      	ldr	r3, [pc, #456]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a71      	ldr	r2, [pc, #452]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004a58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	4b6f      	ldr	r3, [pc, #444]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a6e      	ldr	r2, [pc, #440]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004a64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a68:	6013      	str	r3, [r2, #0]
 8004a6a:	e00b      	b.n	8004a84 <HAL_RCC_OscConfig+0xd4>
 8004a6c:	4b6b      	ldr	r3, [pc, #428]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a6a      	ldr	r2, [pc, #424]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004a72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	4b68      	ldr	r3, [pc, #416]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a67      	ldr	r2, [pc, #412]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004a7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d013      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8c:	f7ff fcea 	bl	8004464 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a94:	f7ff fce6 	bl	8004464 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b64      	cmp	r3, #100	@ 0x64
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e200      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aa6:	4b5d      	ldr	r3, [pc, #372]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0f0      	beq.n	8004a94 <HAL_RCC_OscConfig+0xe4>
 8004ab2:	e014      	b.n	8004ade <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab4:	f7ff fcd6 	bl	8004464 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004abc:	f7ff fcd2 	bl	8004464 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b64      	cmp	r3, #100	@ 0x64
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e1ec      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ace:	4b53      	ldr	r3, [pc, #332]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f0      	bne.n	8004abc <HAL_RCC_OscConfig+0x10c>
 8004ada:	e000      	b.n	8004ade <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d063      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004aea:	4b4c      	ldr	r3, [pc, #304]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f003 030c 	and.w	r3, r3, #12
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00b      	beq.n	8004b0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004af6:	4b49      	ldr	r3, [pc, #292]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f003 030c 	and.w	r3, r3, #12
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d11c      	bne.n	8004b3c <HAL_RCC_OscConfig+0x18c>
 8004b02:	4b46      	ldr	r3, [pc, #280]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d116      	bne.n	8004b3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b0e:	4b43      	ldr	r3, [pc, #268]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d005      	beq.n	8004b26 <HAL_RCC_OscConfig+0x176>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	2b01      	cmp	r3, #1
 8004b20:	d001      	beq.n	8004b26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e1c0      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b26:	4b3d      	ldr	r3, [pc, #244]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	4939      	ldr	r1, [pc, #228]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b3a:	e03a      	b.n	8004bb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d020      	beq.n	8004b86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b44:	4b36      	ldr	r3, [pc, #216]	@ (8004c20 <HAL_RCC_OscConfig+0x270>)
 8004b46:	2201      	movs	r2, #1
 8004b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b4a:	f7ff fc8b 	bl	8004464 <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b50:	e008      	b.n	8004b64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b52:	f7ff fc87 	bl	8004464 <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e1a1      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b64:	4b2d      	ldr	r3, [pc, #180]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0f0      	beq.n	8004b52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b70:	4b2a      	ldr	r3, [pc, #168]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	695b      	ldr	r3, [r3, #20]
 8004b7c:	00db      	lsls	r3, r3, #3
 8004b7e:	4927      	ldr	r1, [pc, #156]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	600b      	str	r3, [r1, #0]
 8004b84:	e015      	b.n	8004bb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b86:	4b26      	ldr	r3, [pc, #152]	@ (8004c20 <HAL_RCC_OscConfig+0x270>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8c:	f7ff fc6a 	bl	8004464 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b94:	f7ff fc66 	bl	8004464 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e180      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ba6:	4b1d      	ldr	r3, [pc, #116]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f0      	bne.n	8004b94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0308 	and.w	r3, r3, #8
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d03a      	beq.n	8004c34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d019      	beq.n	8004bfa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bc6:	4b17      	ldr	r3, [pc, #92]	@ (8004c24 <HAL_RCC_OscConfig+0x274>)
 8004bc8:	2201      	movs	r2, #1
 8004bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bcc:	f7ff fc4a 	bl	8004464 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bd4:	f7ff fc46 	bl	8004464 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e160      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004be6:	4b0d      	ldr	r3, [pc, #52]	@ (8004c1c <HAL_RCC_OscConfig+0x26c>)
 8004be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0f0      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004bf2:	2001      	movs	r0, #1
 8004bf4:	f000 fa9c 	bl	8005130 <RCC_Delay>
 8004bf8:	e01c      	b.n	8004c34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bfa:	4b0a      	ldr	r3, [pc, #40]	@ (8004c24 <HAL_RCC_OscConfig+0x274>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c00:	f7ff fc30 	bl	8004464 <HAL_GetTick>
 8004c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c06:	e00f      	b.n	8004c28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c08:	f7ff fc2c 	bl	8004464 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d908      	bls.n	8004c28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e146      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
 8004c1a:	bf00      	nop
 8004c1c:	40021000 	.word	0x40021000
 8004c20:	42420000 	.word	0x42420000
 8004c24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c28:	4b92      	ldr	r3, [pc, #584]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1e9      	bne.n	8004c08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 80a6 	beq.w	8004d8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c42:	2300      	movs	r3, #0
 8004c44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c46:	4b8b      	ldr	r3, [pc, #556]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10d      	bne.n	8004c6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c52:	4b88      	ldr	r3, [pc, #544]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	4a87      	ldr	r2, [pc, #540]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004c58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c5c:	61d3      	str	r3, [r2, #28]
 8004c5e:	4b85      	ldr	r3, [pc, #532]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c66:	60bb      	str	r3, [r7, #8]
 8004c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c6e:	4b82      	ldr	r3, [pc, #520]	@ (8004e78 <HAL_RCC_OscConfig+0x4c8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d118      	bne.n	8004cac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c7a:	4b7f      	ldr	r3, [pc, #508]	@ (8004e78 <HAL_RCC_OscConfig+0x4c8>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a7e      	ldr	r2, [pc, #504]	@ (8004e78 <HAL_RCC_OscConfig+0x4c8>)
 8004c80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c86:	f7ff fbed 	bl	8004464 <HAL_GetTick>
 8004c8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c8c:	e008      	b.n	8004ca0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c8e:	f7ff fbe9 	bl	8004464 <HAL_GetTick>
 8004c92:	4602      	mov	r2, r0
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	1ad3      	subs	r3, r2, r3
 8004c98:	2b64      	cmp	r3, #100	@ 0x64
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e103      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca0:	4b75      	ldr	r3, [pc, #468]	@ (8004e78 <HAL_RCC_OscConfig+0x4c8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0f0      	beq.n	8004c8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d106      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x312>
 8004cb4:	4b6f      	ldr	r3, [pc, #444]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	4a6e      	ldr	r2, [pc, #440]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004cba:	f043 0301 	orr.w	r3, r3, #1
 8004cbe:	6213      	str	r3, [r2, #32]
 8004cc0:	e02d      	b.n	8004d1e <HAL_RCC_OscConfig+0x36e>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10c      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x334>
 8004cca:	4b6a      	ldr	r3, [pc, #424]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	4a69      	ldr	r2, [pc, #420]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004cd0:	f023 0301 	bic.w	r3, r3, #1
 8004cd4:	6213      	str	r3, [r2, #32]
 8004cd6:	4b67      	ldr	r3, [pc, #412]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	4a66      	ldr	r2, [pc, #408]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004cdc:	f023 0304 	bic.w	r3, r3, #4
 8004ce0:	6213      	str	r3, [r2, #32]
 8004ce2:	e01c      	b.n	8004d1e <HAL_RCC_OscConfig+0x36e>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	2b05      	cmp	r3, #5
 8004cea:	d10c      	bne.n	8004d06 <HAL_RCC_OscConfig+0x356>
 8004cec:	4b61      	ldr	r3, [pc, #388]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	4a60      	ldr	r2, [pc, #384]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004cf2:	f043 0304 	orr.w	r3, r3, #4
 8004cf6:	6213      	str	r3, [r2, #32]
 8004cf8:	4b5e      	ldr	r3, [pc, #376]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	4a5d      	ldr	r2, [pc, #372]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004cfe:	f043 0301 	orr.w	r3, r3, #1
 8004d02:	6213      	str	r3, [r2, #32]
 8004d04:	e00b      	b.n	8004d1e <HAL_RCC_OscConfig+0x36e>
 8004d06:	4b5b      	ldr	r3, [pc, #364]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004d08:	6a1b      	ldr	r3, [r3, #32]
 8004d0a:	4a5a      	ldr	r2, [pc, #360]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004d0c:	f023 0301 	bic.w	r3, r3, #1
 8004d10:	6213      	str	r3, [r2, #32]
 8004d12:	4b58      	ldr	r3, [pc, #352]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004d14:	6a1b      	ldr	r3, [r3, #32]
 8004d16:	4a57      	ldr	r2, [pc, #348]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004d18:	f023 0304 	bic.w	r3, r3, #4
 8004d1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d015      	beq.n	8004d52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d26:	f7ff fb9d 	bl	8004464 <HAL_GetTick>
 8004d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d2c:	e00a      	b.n	8004d44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d2e:	f7ff fb99 	bl	8004464 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e0b1      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d44:	4b4b      	ldr	r3, [pc, #300]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004d46:	6a1b      	ldr	r3, [r3, #32]
 8004d48:	f003 0302 	and.w	r3, r3, #2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0ee      	beq.n	8004d2e <HAL_RCC_OscConfig+0x37e>
 8004d50:	e014      	b.n	8004d7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d52:	f7ff fb87 	bl	8004464 <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d58:	e00a      	b.n	8004d70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d5a:	f7ff fb83 	bl	8004464 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d901      	bls.n	8004d70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	e09b      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d70:	4b40      	ldr	r3, [pc, #256]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1ee      	bne.n	8004d5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d7c:	7dfb      	ldrb	r3, [r7, #23]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d105      	bne.n	8004d8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d82:	4b3c      	ldr	r3, [pc, #240]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	4a3b      	ldr	r2, [pc, #236]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004d88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f000 8087 	beq.w	8004ea6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d98:	4b36      	ldr	r3, [pc, #216]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f003 030c 	and.w	r3, r3, #12
 8004da0:	2b08      	cmp	r3, #8
 8004da2:	d061      	beq.n	8004e68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	69db      	ldr	r3, [r3, #28]
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d146      	bne.n	8004e3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dac:	4b33      	ldr	r3, [pc, #204]	@ (8004e7c <HAL_RCC_OscConfig+0x4cc>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db2:	f7ff fb57 	bl	8004464 <HAL_GetTick>
 8004db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004db8:	e008      	b.n	8004dcc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dba:	f7ff fb53 	bl	8004464 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e06d      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dcc:	4b29      	ldr	r3, [pc, #164]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1f0      	bne.n	8004dba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004de0:	d108      	bne.n	8004df4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004de2:	4b24      	ldr	r3, [pc, #144]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	4921      	ldr	r1, [pc, #132]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004df4:	4b1f      	ldr	r3, [pc, #124]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a19      	ldr	r1, [r3, #32]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e04:	430b      	orrs	r3, r1
 8004e06:	491b      	ldr	r1, [pc, #108]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8004e7c <HAL_RCC_OscConfig+0x4cc>)
 8004e0e:	2201      	movs	r2, #1
 8004e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e12:	f7ff fb27 	bl	8004464 <HAL_GetTick>
 8004e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e18:	e008      	b.n	8004e2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e1a:	f7ff fb23 	bl	8004464 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d901      	bls.n	8004e2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e03d      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e2c:	4b11      	ldr	r3, [pc, #68]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d0f0      	beq.n	8004e1a <HAL_RCC_OscConfig+0x46a>
 8004e38:	e035      	b.n	8004ea6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e3a:	4b10      	ldr	r3, [pc, #64]	@ (8004e7c <HAL_RCC_OscConfig+0x4cc>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e40:	f7ff fb10 	bl	8004464 <HAL_GetTick>
 8004e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e48:	f7ff fb0c 	bl	8004464 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e026      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e5a:	4b06      	ldr	r3, [pc, #24]	@ (8004e74 <HAL_RCC_OscConfig+0x4c4>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f0      	bne.n	8004e48 <HAL_RCC_OscConfig+0x498>
 8004e66:	e01e      	b.n	8004ea6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	69db      	ldr	r3, [r3, #28]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d107      	bne.n	8004e80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e019      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
 8004e74:	40021000 	.word	0x40021000
 8004e78:	40007000 	.word	0x40007000
 8004e7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e80:	4b0b      	ldr	r3, [pc, #44]	@ (8004eb0 <HAL_RCC_OscConfig+0x500>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d106      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d001      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40021000 	.word	0x40021000

08004eb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b084      	sub	sp, #16
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e0d0      	b.n	800506a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ec8:	4b6a      	ldr	r3, [pc, #424]	@ (8005074 <HAL_RCC_ClockConfig+0x1c0>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0307 	and.w	r3, r3, #7
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d910      	bls.n	8004ef8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed6:	4b67      	ldr	r3, [pc, #412]	@ (8005074 <HAL_RCC_ClockConfig+0x1c0>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f023 0207 	bic.w	r2, r3, #7
 8004ede:	4965      	ldr	r1, [pc, #404]	@ (8005074 <HAL_RCC_ClockConfig+0x1c0>)
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ee6:	4b63      	ldr	r3, [pc, #396]	@ (8005074 <HAL_RCC_ClockConfig+0x1c0>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0307 	and.w	r3, r3, #7
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d001      	beq.n	8004ef8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e0b8      	b.n	800506a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d020      	beq.n	8004f46 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d005      	beq.n	8004f1c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f10:	4b59      	ldr	r3, [pc, #356]	@ (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	4a58      	ldr	r2, [pc, #352]	@ (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8004f16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f1a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0308 	and.w	r3, r3, #8
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d005      	beq.n	8004f34 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f28:	4b53      	ldr	r3, [pc, #332]	@ (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	4a52      	ldr	r2, [pc, #328]	@ (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8004f2e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004f32:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f34:	4b50      	ldr	r3, [pc, #320]	@ (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	494d      	ldr	r1, [pc, #308]	@ (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0301 	and.w	r3, r3, #1
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d040      	beq.n	8004fd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d107      	bne.n	8004f6a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f5a:	4b47      	ldr	r3, [pc, #284]	@ (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d115      	bne.n	8004f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e07f      	b.n	800506a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d107      	bne.n	8004f82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f72:	4b41      	ldr	r3, [pc, #260]	@ (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d109      	bne.n	8004f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e073      	b.n	800506a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f82:	4b3d      	ldr	r3, [pc, #244]	@ (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e06b      	b.n	800506a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f92:	4b39      	ldr	r3, [pc, #228]	@ (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f023 0203 	bic.w	r2, r3, #3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	4936      	ldr	r1, [pc, #216]	@ (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fa4:	f7ff fa5e 	bl	8004464 <HAL_GetTick>
 8004fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004faa:	e00a      	b.n	8004fc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fac:	f7ff fa5a 	bl	8004464 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e053      	b.n	800506a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fc2:	4b2d      	ldr	r3, [pc, #180]	@ (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f003 020c 	and.w	r2, r3, #12
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d1eb      	bne.n	8004fac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fd4:	4b27      	ldr	r3, [pc, #156]	@ (8005074 <HAL_RCC_ClockConfig+0x1c0>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d210      	bcs.n	8005004 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe2:	4b24      	ldr	r3, [pc, #144]	@ (8005074 <HAL_RCC_ClockConfig+0x1c0>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f023 0207 	bic.w	r2, r3, #7
 8004fea:	4922      	ldr	r1, [pc, #136]	@ (8005074 <HAL_RCC_ClockConfig+0x1c0>)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff2:	4b20      	ldr	r3, [pc, #128]	@ (8005074 <HAL_RCC_ClockConfig+0x1c0>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0307 	and.w	r3, r3, #7
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d001      	beq.n	8005004 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e032      	b.n	800506a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	d008      	beq.n	8005022 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005010:	4b19      	ldr	r3, [pc, #100]	@ (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	4916      	ldr	r1, [pc, #88]	@ (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 800501e:	4313      	orrs	r3, r2
 8005020:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0308 	and.w	r3, r3, #8
 800502a:	2b00      	cmp	r3, #0
 800502c:	d009      	beq.n	8005042 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800502e:	4b12      	ldr	r3, [pc, #72]	@ (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	490e      	ldr	r1, [pc, #56]	@ (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 800503e:	4313      	orrs	r3, r2
 8005040:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005042:	f000 f821 	bl	8005088 <HAL_RCC_GetSysClockFreq>
 8005046:	4602      	mov	r2, r0
 8005048:	4b0b      	ldr	r3, [pc, #44]	@ (8005078 <HAL_RCC_ClockConfig+0x1c4>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	091b      	lsrs	r3, r3, #4
 800504e:	f003 030f 	and.w	r3, r3, #15
 8005052:	490a      	ldr	r1, [pc, #40]	@ (800507c <HAL_RCC_ClockConfig+0x1c8>)
 8005054:	5ccb      	ldrb	r3, [r1, r3]
 8005056:	fa22 f303 	lsr.w	r3, r2, r3
 800505a:	4a09      	ldr	r2, [pc, #36]	@ (8005080 <HAL_RCC_ClockConfig+0x1cc>)
 800505c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800505e:	4b09      	ldr	r3, [pc, #36]	@ (8005084 <HAL_RCC_ClockConfig+0x1d0>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff f9bc 	bl	80043e0 <HAL_InitTick>

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	40022000 	.word	0x40022000
 8005078:	40021000 	.word	0x40021000
 800507c:	080051dc 	.word	0x080051dc
 8005080:	20000000 	.word	0x20000000
 8005084:	20000004 	.word	0x20000004

08005088 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800508e:	2300      	movs	r3, #0
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	2300      	movs	r3, #0
 8005094:	60bb      	str	r3, [r7, #8]
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]
 800509a:	2300      	movs	r3, #0
 800509c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800509e:	2300      	movs	r3, #0
 80050a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80050a2:	4b1e      	ldr	r3, [pc, #120]	@ (800511c <HAL_RCC_GetSysClockFreq+0x94>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f003 030c 	and.w	r3, r3, #12
 80050ae:	2b04      	cmp	r3, #4
 80050b0:	d002      	beq.n	80050b8 <HAL_RCC_GetSysClockFreq+0x30>
 80050b2:	2b08      	cmp	r3, #8
 80050b4:	d003      	beq.n	80050be <HAL_RCC_GetSysClockFreq+0x36>
 80050b6:	e027      	b.n	8005108 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80050b8:	4b19      	ldr	r3, [pc, #100]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x98>)
 80050ba:	613b      	str	r3, [r7, #16]
      break;
 80050bc:	e027      	b.n	800510e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	0c9b      	lsrs	r3, r3, #18
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	4a17      	ldr	r2, [pc, #92]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x9c>)
 80050c8:	5cd3      	ldrb	r3, [r2, r3]
 80050ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d010      	beq.n	80050f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80050d6:	4b11      	ldr	r3, [pc, #68]	@ (800511c <HAL_RCC_GetSysClockFreq+0x94>)
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	0c5b      	lsrs	r3, r3, #17
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	4a11      	ldr	r2, [pc, #68]	@ (8005128 <HAL_RCC_GetSysClockFreq+0xa0>)
 80050e2:	5cd3      	ldrb	r3, [r2, r3]
 80050e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a0d      	ldr	r2, [pc, #52]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x98>)
 80050ea:	fb03 f202 	mul.w	r2, r3, r2
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f4:	617b      	str	r3, [r7, #20]
 80050f6:	e004      	b.n	8005102 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a0c      	ldr	r2, [pc, #48]	@ (800512c <HAL_RCC_GetSysClockFreq+0xa4>)
 80050fc:	fb02 f303 	mul.w	r3, r2, r3
 8005100:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	613b      	str	r3, [r7, #16]
      break;
 8005106:	e002      	b.n	800510e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005108:	4b05      	ldr	r3, [pc, #20]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x98>)
 800510a:	613b      	str	r3, [r7, #16]
      break;
 800510c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800510e:	693b      	ldr	r3, [r7, #16]
}
 8005110:	4618      	mov	r0, r3
 8005112:	371c      	adds	r7, #28
 8005114:	46bd      	mov	sp, r7
 8005116:	bc80      	pop	{r7}
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	40021000 	.word	0x40021000
 8005120:	007a1200 	.word	0x007a1200
 8005124:	080051ec 	.word	0x080051ec
 8005128:	080051fc 	.word	0x080051fc
 800512c:	003d0900 	.word	0x003d0900

08005130 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005138:	4b0a      	ldr	r3, [pc, #40]	@ (8005164 <RCC_Delay+0x34>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a0a      	ldr	r2, [pc, #40]	@ (8005168 <RCC_Delay+0x38>)
 800513e:	fba2 2303 	umull	r2, r3, r2, r3
 8005142:	0a5b      	lsrs	r3, r3, #9
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	fb02 f303 	mul.w	r3, r2, r3
 800514a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800514c:	bf00      	nop
  }
  while (Delay --);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	1e5a      	subs	r2, r3, #1
 8005152:	60fa      	str	r2, [r7, #12]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d1f9      	bne.n	800514c <RCC_Delay+0x1c>
}
 8005158:	bf00      	nop
 800515a:	bf00      	nop
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	bc80      	pop	{r7}
 8005162:	4770      	bx	lr
 8005164:	20000000 	.word	0x20000000
 8005168:	10624dd3 	.word	0x10624dd3

0800516c <memset>:
 800516c:	4603      	mov	r3, r0
 800516e:	4402      	add	r2, r0
 8005170:	4293      	cmp	r3, r2
 8005172:	d100      	bne.n	8005176 <memset+0xa>
 8005174:	4770      	bx	lr
 8005176:	f803 1b01 	strb.w	r1, [r3], #1
 800517a:	e7f9      	b.n	8005170 <memset+0x4>

0800517c <__libc_init_array>:
 800517c:	b570      	push	{r4, r5, r6, lr}
 800517e:	2600      	movs	r6, #0
 8005180:	4d0c      	ldr	r5, [pc, #48]	@ (80051b4 <__libc_init_array+0x38>)
 8005182:	4c0d      	ldr	r4, [pc, #52]	@ (80051b8 <__libc_init_array+0x3c>)
 8005184:	1b64      	subs	r4, r4, r5
 8005186:	10a4      	asrs	r4, r4, #2
 8005188:	42a6      	cmp	r6, r4
 800518a:	d109      	bne.n	80051a0 <__libc_init_array+0x24>
 800518c:	f000 f81a 	bl	80051c4 <_init>
 8005190:	2600      	movs	r6, #0
 8005192:	4d0a      	ldr	r5, [pc, #40]	@ (80051bc <__libc_init_array+0x40>)
 8005194:	4c0a      	ldr	r4, [pc, #40]	@ (80051c0 <__libc_init_array+0x44>)
 8005196:	1b64      	subs	r4, r4, r5
 8005198:	10a4      	asrs	r4, r4, #2
 800519a:	42a6      	cmp	r6, r4
 800519c:	d105      	bne.n	80051aa <__libc_init_array+0x2e>
 800519e:	bd70      	pop	{r4, r5, r6, pc}
 80051a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051a4:	4798      	blx	r3
 80051a6:	3601      	adds	r6, #1
 80051a8:	e7ee      	b.n	8005188 <__libc_init_array+0xc>
 80051aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ae:	4798      	blx	r3
 80051b0:	3601      	adds	r6, #1
 80051b2:	e7f2      	b.n	800519a <__libc_init_array+0x1e>
 80051b4:	08005200 	.word	0x08005200
 80051b8:	08005200 	.word	0x08005200
 80051bc:	08005200 	.word	0x08005200
 80051c0:	08005204 	.word	0x08005204

080051c4 <_init>:
 80051c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051c6:	bf00      	nop
 80051c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ca:	bc08      	pop	{r3}
 80051cc:	469e      	mov	lr, r3
 80051ce:	4770      	bx	lr

080051d0 <_fini>:
 80051d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051d2:	bf00      	nop
 80051d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051d6:	bc08      	pop	{r3}
 80051d8:	469e      	mov	lr, r3
 80051da:	4770      	bx	lr
