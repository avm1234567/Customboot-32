
New_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002564  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08002670  08002670  00003670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027d0  080027d0  00004010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080027d0  080027d0  00004010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080027d0  080027d0  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027d0  080027d0  000037d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080027d4  080027d4  000037d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080027d8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000010  080027e8  00004010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  080027e8  000040a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008982  00000000  00000000  00004039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f86  00000000  00000000  0000c9bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  0000e948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000680  00000000  00000000  0000f1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000166c8  00000000  00000000  0000f868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b2b3  00000000  00000000  00025f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007cfb7  00000000  00000000  000311e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ae19a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020bc  00000000  00000000  000ae1e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000b029c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002658 	.word	0x08002658

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002658 	.word	0x08002658

0800014c <flash_erase>:
 * @brief   This function erases the memory.
 * @param   address: First address to be erased (the last is the end of the flash).
 * @return  status: Report about the success of the erasing.
 */
flash_status flash_erase(uint32_t address)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  HAL_FLASH_Unlock();
 8000154:	f000 ff42 	bl	8000fdc <HAL_FLASH_Unlock>

  flash_status status = FLASH_ERROR;
 8000158:	23ff      	movs	r3, #255	@ 0xff
 800015a:	77fb      	strb	r3, [r7, #31]
  FLASH_EraseInitTypeDef erase_init;
  uint32_t error = 0u;
 800015c:	2300      	movs	r3, #0
 800015e:	60bb      	str	r3, [r7, #8]

  erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8000160:	2300      	movs	r3, #0
 8000162:	60fb      	str	r3, [r7, #12]
  erase_init.PageAddress = address;
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	617b      	str	r3, [r7, #20]
  erase_init.Banks = FLASH_BANK_1;
 8000168:	2301      	movs	r3, #1
 800016a:	613b      	str	r3, [r7, #16]
  /* Calculate the number of pages from "address" and the end of flash. */
  erase_init.NbPages = (FLASH_BANK1_END - address) / FLASH_PAGE_SIZE;
 800016c:	687a      	ldr	r2, [r7, #4]
 800016e:	4b0c      	ldr	r3, [pc, #48]	@ (80001a0 <flash_erase+0x54>)
 8000170:	1a9b      	subs	r3, r3, r2
 8000172:	0a9b      	lsrs	r3, r3, #10
 8000174:	61bb      	str	r3, [r7, #24]
  /* Do the actual erasing. */
  if (HAL_OK == HAL_FLASHEx_Erase(&erase_init, &error))
 8000176:	f107 0208 	add.w	r2, r7, #8
 800017a:	f107 030c 	add.w	r3, r7, #12
 800017e:	4611      	mov	r1, r2
 8000180:	4618      	mov	r0, r3
 8000182:	f001 f813 	bl	80011ac <HAL_FLASHEx_Erase>
 8000186:	4603      	mov	r3, r0
 8000188:	2b00      	cmp	r3, #0
 800018a:	d101      	bne.n	8000190 <flash_erase+0x44>
  {
    status = FLASH_OK;
 800018c:	2300      	movs	r3, #0
 800018e:	77fb      	strb	r3, [r7, #31]
  }

  HAL_FLASH_Lock();
 8000190:	f000 ff4a 	bl	8001028 <HAL_FLASH_Lock>

  return status;
 8000194:	7ffb      	ldrb	r3, [r7, #31]
}
 8000196:	4618      	mov	r0, r3
 8000198:	3720      	adds	r7, #32
 800019a:	46bd      	mov	sp, r7
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	08007fff 	.word	0x08007fff

080001a4 <flash_write>:
 * @param   *data:   Array of the data that we want to write.
 * @param   *length: Size of the array.
 * @return  status: Report about the success of the writing.
 */
flash_status flash_write(uint32_t address, uint32_t *data, uint32_t length)
{
 80001a4:	b5b0      	push	{r4, r5, r7, lr}
 80001a6:	b086      	sub	sp, #24
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	60f8      	str	r0, [r7, #12]
 80001ac:	60b9      	str	r1, [r7, #8]
 80001ae:	607a      	str	r2, [r7, #4]
  flash_status status = FLASH_OK;
 80001b0:	2300      	movs	r3, #0
 80001b2:	75fb      	strb	r3, [r7, #23]

  HAL_FLASH_Unlock();
 80001b4:	f000 ff12 	bl	8000fdc <HAL_FLASH_Unlock>

  /* Loop through the array. */
  for (uint32_t i = 0u; (i < length) && (FLASH_OK == status); i++)
 80001b8:	2300      	movs	r3, #0
 80001ba:	613b      	str	r3, [r7, #16]
 80001bc:	e030      	b.n	8000220 <flash_write+0x7c>
  {
    /* If we reached the end of the memory, then report an error and don't do anything else.*/
    if (FLASH_APP_END_ADDRESS <= address)
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	4a1e      	ldr	r2, [pc, #120]	@ (800023c <flash_write+0x98>)
 80001c2:	4293      	cmp	r3, r2
 80001c4:	d904      	bls.n	80001d0 <flash_write+0x2c>
    {
      status |= FLASH_ERROR_SIZE;
 80001c6:	7dfb      	ldrb	r3, [r7, #23]
 80001c8:	f043 0301 	orr.w	r3, r3, #1
 80001cc:	75fb      	strb	r3, [r7, #23]
 80001ce:	e024      	b.n	800021a <flash_write+0x76>
    }
    else
    {
      /* The actual flashing. If there is an error, then report it. */
      if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data[i]))
 80001d0:	693b      	ldr	r3, [r7, #16]
 80001d2:	009b      	lsls	r3, r3, #2
 80001d4:	68ba      	ldr	r2, [r7, #8]
 80001d6:	4413      	add	r3, r2
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	2200      	movs	r2, #0
 80001dc:	461c      	mov	r4, r3
 80001de:	4615      	mov	r5, r2
 80001e0:	4622      	mov	r2, r4
 80001e2:	462b      	mov	r3, r5
 80001e4:	68f9      	ldr	r1, [r7, #12]
 80001e6:	2002      	movs	r0, #2
 80001e8:	f000 fe88 	bl	8000efc <HAL_FLASH_Program>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d003      	beq.n	80001fa <flash_write+0x56>
      {
        status |= FLASH_ERROR_WRITE;
 80001f2:	7dfb      	ldrb	r3, [r7, #23]
 80001f4:	f043 0302 	orr.w	r3, r3, #2
 80001f8:	75fb      	strb	r3, [r7, #23]
      }
      /* Read back the content of the memory. If it is wrong, then report an error. */
      if (((data[i])) != (*(volatile uint32_t*)address))
 80001fa:	693b      	ldr	r3, [r7, #16]
 80001fc:	009b      	lsls	r3, r3, #2
 80001fe:	68ba      	ldr	r2, [r7, #8]
 8000200:	4413      	add	r3, r2
 8000202:	681a      	ldr	r2, [r3, #0]
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	429a      	cmp	r2, r3
 800020a:	d003      	beq.n	8000214 <flash_write+0x70>
      {
        status |= FLASH_ERROR_READBACK;
 800020c:	7dfb      	ldrb	r3, [r7, #23]
 800020e:	f043 0304 	orr.w	r3, r3, #4
 8000212:	75fb      	strb	r3, [r7, #23]
      }

      /* Shift the address by a word. */
      address += 4u;
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	3304      	adds	r3, #4
 8000218:	60fb      	str	r3, [r7, #12]
  for (uint32_t i = 0u; (i < length) && (FLASH_OK == status); i++)
 800021a:	693b      	ldr	r3, [r7, #16]
 800021c:	3301      	adds	r3, #1
 800021e:	613b      	str	r3, [r7, #16]
 8000220:	693a      	ldr	r2, [r7, #16]
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	429a      	cmp	r2, r3
 8000226:	d202      	bcs.n	800022e <flash_write+0x8a>
 8000228:	7dfb      	ldrb	r3, [r7, #23]
 800022a:	2b00      	cmp	r3, #0
 800022c:	d0c7      	beq.n	80001be <flash_write+0x1a>
    }
  }

  HAL_FLASH_Lock();
 800022e:	f000 fefb 	bl	8001028 <HAL_FLASH_Lock>

  return status;
 8000232:	7dfb      	ldrb	r3, [r7, #23]
}
 8000234:	4618      	mov	r0, r3
 8000236:	3718      	adds	r7, #24
 8000238:	46bd      	mov	sp, r7
 800023a:	bdb0      	pop	{r4, r5, r7, pc}
 800023c:	08007fee 	.word	0x08007fee

08000240 <flash_jump_to_app>:
 * @brief   Actually jumps to the user application.
 * @param   void
 * @return  void
 */
void flash_jump_to_app(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
  /* Function pointer to the address of the user application. */
  fnc_ptr jump_to_app;
  jump_to_app = (fnc_ptr)(*(volatile uint32_t*) (FLASH_APP_START_ADDRESS+4u));
 8000246:	4b09      	ldr	r3, [pc, #36]	@ (800026c <flash_jump_to_app+0x2c>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	607b      	str	r3, [r7, #4]
  HAL_DeInit();
 800024c:	f000 fc82 	bl	8000b54 <HAL_DeInit>
  /* Change the main stack pointer. */
  __set_MSP(*(volatile uint32_t*)FLASH_APP_START_ADDRESS);
 8000250:	4b07      	ldr	r3, [pc, #28]	@ (8000270 <flash_jump_to_app+0x30>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	f383 8808 	msr	MSP, r3
}
 800025c:	bf00      	nop
  jump_to_app();
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4798      	blx	r3
}
 8000262:	bf00      	nop
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	08008004 	.word	0x08008004
 8000270:	08008000 	.word	0x08008000

08000274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027a:	f000 fc55 	bl	8000b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800027e:	f000 f843 	bl	8000308 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000282:	f000 f8bb 	bl	80003fc <MX_GPIO_Init>
  MX_CRC_Init();
 8000286:	f000 f87b 	bl	8000380 <MX_CRC_Init>
  MX_USART1_UART_Init();
 800028a:	f000 f88d 	bl	80003a8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Send welcome message on startup. */
  uart_transmit_str((uint8_t*)"\n\r================================\n\r");
 800028e:	4817      	ldr	r0, [pc, #92]	@ (80002ec <main+0x78>)
 8000290:	f000 f9f0 	bl	8000674 <uart_transmit_str>
  uart_transmit_str((uint8_t*)"UART Bootloader\n\r");
 8000294:	4816      	ldr	r0, [pc, #88]	@ (80002f0 <main+0x7c>)
 8000296:	f000 f9ed 	bl	8000674 <uart_transmit_str>
  uart_transmit_str((uint8_t*)"https://github.com/ferenc-nemeth\n\r");
 800029a:	4816      	ldr	r0, [pc, #88]	@ (80002f4 <main+0x80>)
 800029c:	f000 f9ea 	bl	8000674 <uart_transmit_str>
  uart_transmit_str((uint8_t*)"================================\n\r\n\r");
 80002a0:	4815      	ldr	r0, [pc, #84]	@ (80002f8 <main+0x84>)
 80002a2:	f000 f9e7 	bl	8000674 <uart_transmit_str>
  /* USER CODE BEGIN WHILE */
  uint8_t i;
  while (1)
  {
    /* Turn on the green LED to indicate, that we are in bootloader mode.*/
	for (i=0;i<5;i++)
 80002a6:	2300      	movs	r3, #0
 80002a8:	71fb      	strb	r3, [r7, #7]
 80002aa:	e00b      	b.n	80002c4 <main+0x50>
		  {
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80002ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002b0:	4812      	ldr	r0, [pc, #72]	@ (80002fc <main+0x88>)
 80002b2:	f001 f9b7 	bl	8001624 <HAL_GPIO_TogglePin>
			  HAL_Delay(1000);
 80002b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002ba:	f000 fcb5 	bl	8000c28 <HAL_Delay>
	for (i=0;i<5;i++)
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	3301      	adds	r3, #1
 80002c2:	71fb      	strb	r3, [r7, #7]
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	2b04      	cmp	r3, #4
 80002c8:	d9f0      	bls.n	80002ac <main+0x38>
		  }
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80002ca:	2201      	movs	r2, #1
 80002cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002d0:	480a      	ldr	r0, [pc, #40]	@ (80002fc <main+0x88>)
 80002d2:	f001 f98f 	bl	80015f4 <HAL_GPIO_WritePin>
    /* Ask for new data and start the Xmodem protocol. */
    uart_transmit_str((uint8_t*)"Please send a new binary file with Xmodem protocol to update the firmware.\n\r");
 80002d6:	480a      	ldr	r0, [pc, #40]	@ (8000300 <main+0x8c>)
 80002d8:	f000 f9cc 	bl	8000674 <uart_transmit_str>
    xmodem_receive();
 80002dc:	f000 fa14 	bl	8000708 <xmodem_receive>
    /* We only exit the xmodem protocol, if there are any errors.
     * In that case, notify the user and start over. */
    uart_transmit_str((uint8_t*)"\n\rFailed... Please try again.\n\r");
 80002e0:	4808      	ldr	r0, [pc, #32]	@ (8000304 <main+0x90>)
 80002e2:	f000 f9c7 	bl	8000674 <uart_transmit_str>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    goto_application();
 80002e6:	f000 f8c9 	bl	800047c <goto_application>
	for (i=0;i<5;i++)
 80002ea:	e7dc      	b.n	80002a6 <main+0x32>
 80002ec:	08002670 	.word	0x08002670
 80002f0:	08002698 	.word	0x08002698
 80002f4:	080026ac 	.word	0x080026ac
 80002f8:	080026d0 	.word	0x080026d0
 80002fc:	40011000 	.word	0x40011000
 8000300:	080026f8 	.word	0x080026f8
 8000304:	08002748 	.word	0x08002748

08000308 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b090      	sub	sp, #64	@ 0x40
 800030c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800030e:	f107 0318 	add.w	r3, r7, #24
 8000312:	2228      	movs	r2, #40	@ 0x28
 8000314:	2100      	movs	r1, #0
 8000316:	4618      	mov	r0, r3
 8000318:	f002 f972 	bl	8002600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800031c:	1d3b      	adds	r3, r7, #4
 800031e:	2200      	movs	r2, #0
 8000320:	601a      	str	r2, [r3, #0]
 8000322:	605a      	str	r2, [r3, #4]
 8000324:	609a      	str	r2, [r3, #8]
 8000326:	60da      	str	r2, [r3, #12]
 8000328:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800032a:	2302      	movs	r3, #2
 800032c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800032e:	2301      	movs	r3, #1
 8000330:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000332:	2310      	movs	r3, #16
 8000334:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000336:	2300      	movs	r3, #0
 8000338:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033a:	f107 0318 	add.w	r3, r7, #24
 800033e:	4618      	mov	r0, r3
 8000340:	f001 f98a 	bl	8001658 <HAL_RCC_OscConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800034a:	f000 f8a5 	bl	8000498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034e:	230f      	movs	r3, #15
 8000350:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000352:	2300      	movs	r3, #0
 8000354:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000356:	2300      	movs	r3, #0
 8000358:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800035a:	2300      	movs	r3, #0
 800035c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f001 fbf8 	bl	8001b5c <HAL_RCC_ClockConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000372:	f000 f891 	bl	8000498 <Error_Handler>
  }
}
 8000376:	bf00      	nop
 8000378:	3740      	adds	r7, #64	@ 0x40
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
	...

08000380 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000384:	4b06      	ldr	r3, [pc, #24]	@ (80003a0 <MX_CRC_Init+0x20>)
 8000386:	4a07      	ldr	r2, [pc, #28]	@ (80003a4 <MX_CRC_Init+0x24>)
 8000388:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800038a:	4805      	ldr	r0, [pc, #20]	@ (80003a0 <MX_CRC_Init+0x20>)
 800038c:	f000 fd53 	bl	8000e36 <HAL_CRC_Init>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000396:	f000 f87f 	bl	8000498 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	2000002c 	.word	0x2000002c
 80003a4:	40023000 	.word	0x40023000

080003a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003ac:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003ae:	4a12      	ldr	r2, [pc, #72]	@ (80003f8 <MX_USART1_UART_Init+0x50>)
 80003b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003b2:	4b10      	ldr	r3, [pc, #64]	@ (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ba:	4b0e      	ldr	r3, [pc, #56]	@ (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003bc:	2200      	movs	r2, #0
 80003be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003c0:	4b0c      	ldr	r3, [pc, #48]	@ (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003c6:	4b0b      	ldr	r3, [pc, #44]	@ (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003cc:	4b09      	ldr	r3, [pc, #36]	@ (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003ce:	220c      	movs	r2, #12
 80003d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003d2:	4b08      	ldr	r3, [pc, #32]	@ (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003d8:	4b06      	ldr	r3, [pc, #24]	@ (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003da:	2200      	movs	r2, #0
 80003dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003de:	4805      	ldr	r0, [pc, #20]	@ (80003f4 <MX_USART1_UART_Init+0x4c>)
 80003e0:	f001 fd4a 	bl	8001e78 <HAL_UART_Init>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003ea:	f000 f855 	bl	8000498 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	20000034 	.word	0x20000034
 80003f8:	40013800 	.word	0x40013800

080003fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b086      	sub	sp, #24
 8000400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000402:	f107 0308 	add.w	r3, r7, #8
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]
 800040a:	605a      	str	r2, [r3, #4]
 800040c:	609a      	str	r2, [r3, #8]
 800040e:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000410:	4b18      	ldr	r3, [pc, #96]	@ (8000474 <MX_GPIO_Init+0x78>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a17      	ldr	r2, [pc, #92]	@ (8000474 <MX_GPIO_Init+0x78>)
 8000416:	f043 0310 	orr.w	r3, r3, #16
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b15      	ldr	r3, [pc, #84]	@ (8000474 <MX_GPIO_Init+0x78>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f003 0310 	and.w	r3, r3, #16
 8000424:	607b      	str	r3, [r7, #4]
 8000426:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000428:	4b12      	ldr	r3, [pc, #72]	@ (8000474 <MX_GPIO_Init+0x78>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a11      	ldr	r2, [pc, #68]	@ (8000474 <MX_GPIO_Init+0x78>)
 800042e:	f043 0304 	orr.w	r3, r3, #4
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b0f      	ldr	r3, [pc, #60]	@ (8000474 <MX_GPIO_Init+0x78>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0304 	and.w	r3, r3, #4
 800043c:	603b      	str	r3, [r7, #0]
 800043e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000440:	2200      	movs	r2, #0
 8000442:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000446:	480c      	ldr	r0, [pc, #48]	@ (8000478 <MX_GPIO_Init+0x7c>)
 8000448:	f001 f8d4 	bl	80015f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800044c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000450:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000452:	2301      	movs	r3, #1
 8000454:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000456:	2300      	movs	r3, #0
 8000458:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800045a:	2302      	movs	r3, #2
 800045c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800045e:	f107 0308 	add.w	r3, r7, #8
 8000462:	4619      	mov	r1, r3
 8000464:	4804      	ldr	r0, [pc, #16]	@ (8000478 <MX_GPIO_Init+0x7c>)
 8000466:	f000 ff49 	bl	80012fc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800046a:	bf00      	nop
 800046c:	3718      	adds	r7, #24
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40021000 	.word	0x40021000
 8000478:	40011000 	.word	0x40011000

0800047c <goto_application>:
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
	return ch;
}

static void goto_application(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0

	void(*app_reset_handler)(void) = (void*)(*((volatile uint32_t*)(0x8004400+4U)));
 8000482:	4b04      	ldr	r3, [pc, #16]	@ (8000494 <goto_application+0x18>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	607b      	str	r3, [r7, #4]

	app_reset_handler();
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4798      	blx	r3
}
 800048c:	bf00      	nop
 800048e:	3708      	adds	r7, #8
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	08004404 	.word	0x08004404

08000498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800049c:	bf00      	nop
 800049e:	e7fd      	b.n	800049c <Error_Handler+0x4>

080004a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004a6:	4b15      	ldr	r3, [pc, #84]	@ (80004fc <HAL_MspInit+0x5c>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	4a14      	ldr	r2, [pc, #80]	@ (80004fc <HAL_MspInit+0x5c>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	6193      	str	r3, [r2, #24]
 80004b2:	4b12      	ldr	r3, [pc, #72]	@ (80004fc <HAL_MspInit+0x5c>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	60bb      	str	r3, [r7, #8]
 80004bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004be:	4b0f      	ldr	r3, [pc, #60]	@ (80004fc <HAL_MspInit+0x5c>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	4a0e      	ldr	r2, [pc, #56]	@ (80004fc <HAL_MspInit+0x5c>)
 80004c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004c8:	61d3      	str	r3, [r2, #28]
 80004ca:	4b0c      	ldr	r3, [pc, #48]	@ (80004fc <HAL_MspInit+0x5c>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004d2:	607b      	str	r3, [r7, #4]
 80004d4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80004d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000500 <HAL_MspInit+0x60>)
 80004d8:	685b      	ldr	r3, [r3, #4]
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	4a04      	ldr	r2, [pc, #16]	@ (8000500 <HAL_MspInit+0x60>)
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f2:	bf00      	nop
 80004f4:	3714      	adds	r7, #20
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bc80      	pop	{r7}
 80004fa:	4770      	bx	lr
 80004fc:	40021000 	.word	0x40021000
 8000500:	40010000 	.word	0x40010000

08000504 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a09      	ldr	r2, [pc, #36]	@ (8000538 <HAL_CRC_MspInit+0x34>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d10b      	bne.n	800052e <HAL_CRC_MspInit+0x2a>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000516:	4b09      	ldr	r3, [pc, #36]	@ (800053c <HAL_CRC_MspInit+0x38>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a08      	ldr	r2, [pc, #32]	@ (800053c <HAL_CRC_MspInit+0x38>)
 800051c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000520:	6153      	str	r3, [r2, #20]
 8000522:	4b06      	ldr	r3, [pc, #24]	@ (800053c <HAL_CRC_MspInit+0x38>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 800052e:	bf00      	nop
 8000530:	3714      	adds	r7, #20
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr
 8000538:	40023000 	.word	0x40023000
 800053c:	40021000 	.word	0x40021000

08000540 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b088      	sub	sp, #32
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000548:	f107 0310 	add.w	r3, r7, #16
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4a1c      	ldr	r2, [pc, #112]	@ (80005cc <HAL_UART_MspInit+0x8c>)
 800055c:	4293      	cmp	r3, r2
 800055e:	d131      	bne.n	80005c4 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000560:	4b1b      	ldr	r3, [pc, #108]	@ (80005d0 <HAL_UART_MspInit+0x90>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a1a      	ldr	r2, [pc, #104]	@ (80005d0 <HAL_UART_MspInit+0x90>)
 8000566:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b18      	ldr	r3, [pc, #96]	@ (80005d0 <HAL_UART_MspInit+0x90>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000574:	60fb      	str	r3, [r7, #12]
 8000576:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000578:	4b15      	ldr	r3, [pc, #84]	@ (80005d0 <HAL_UART_MspInit+0x90>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	4a14      	ldr	r2, [pc, #80]	@ (80005d0 <HAL_UART_MspInit+0x90>)
 800057e:	f043 0304 	orr.w	r3, r3, #4
 8000582:	6193      	str	r3, [r2, #24]
 8000584:	4b12      	ldr	r3, [pc, #72]	@ (80005d0 <HAL_UART_MspInit+0x90>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f003 0304 	and.w	r3, r3, #4
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000590:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000594:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000596:	2302      	movs	r3, #2
 8000598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059a:	2303      	movs	r3, #3
 800059c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059e:	f107 0310 	add.w	r3, r7, #16
 80005a2:	4619      	mov	r1, r3
 80005a4:	480b      	ldr	r0, [pc, #44]	@ (80005d4 <HAL_UART_MspInit+0x94>)
 80005a6:	f000 fea9 	bl	80012fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b8:	f107 0310 	add.w	r3, r7, #16
 80005bc:	4619      	mov	r1, r3
 80005be:	4805      	ldr	r0, [pc, #20]	@ (80005d4 <HAL_UART_MspInit+0x94>)
 80005c0:	f000 fe9c 	bl	80012fc <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80005c4:	bf00      	nop
 80005c6:	3720      	adds	r7, #32
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40013800 	.word	0x40013800
 80005d0:	40021000 	.word	0x40021000
 80005d4:	40010800 	.word	0x40010800

080005d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <NMI_Handler+0x4>

080005e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <HardFault_Handler+0x4>

080005e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005ec:	bf00      	nop
 80005ee:	e7fd      	b.n	80005ec <MemManage_Handler+0x4>

080005f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <BusFault_Handler+0x4>

080005f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <UsageFault_Handler+0x4>

08000600 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr

0800060c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr

08000618 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr

08000624 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000628:	f000 fae2 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}

08000630 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr

0800063c <uart_receive>:
 * @param   *data: Array to save the received data.
 * @param   length:  Size of the data.
 * @return  status: Report about the success of the receiving.
 */
uart_status uart_receive(uint8_t *data, uint16_t length)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	460b      	mov	r3, r1
 8000646:	807b      	strh	r3, [r7, #2]
  uart_status status = UART_ERROR;
 8000648:	23ff      	movs	r3, #255	@ 0xff
 800064a:	73fb      	strb	r3, [r7, #15]

  if (HAL_OK == HAL_UART_Receive(&huart1, data, length, UART_TIMEOUT))
 800064c:	887a      	ldrh	r2, [r7, #2]
 800064e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000652:	6879      	ldr	r1, [r7, #4]
 8000654:	4806      	ldr	r0, [pc, #24]	@ (8000670 <uart_receive+0x34>)
 8000656:	f001 fcea 	bl	800202e <HAL_UART_Receive>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d101      	bne.n	8000664 <uart_receive+0x28>
  {
    status = UART_OK;
 8000660:	2300      	movs	r3, #0
 8000662:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8000664:	7bfb      	ldrb	r3, [r7, #15]
}
 8000666:	4618      	mov	r0, r3
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000034 	.word	0x20000034

08000674 <uart_transmit_str>:
 * @brief   Transmits a string to UART.
 * @param   *data: Array of the data.
 * @return  status: Report about the success of the transmission.
 */
uart_status uart_transmit_str(uint8_t *data)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uart_status status = UART_ERROR;
 800067c:	23ff      	movs	r3, #255	@ 0xff
 800067e:	73fb      	strb	r3, [r7, #15]
  uint16_t length = 0u;
 8000680:	2300      	movs	r3, #0
 8000682:	81bb      	strh	r3, [r7, #12]

  /* Calculate the length. */
  while ('\0' != data[length])
 8000684:	e002      	b.n	800068c <uart_transmit_str+0x18>
  {
    length++;
 8000686:	89bb      	ldrh	r3, [r7, #12]
 8000688:	3301      	adds	r3, #1
 800068a:	81bb      	strh	r3, [r7, #12]
  while ('\0' != data[length])
 800068c:	89bb      	ldrh	r3, [r7, #12]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	4413      	add	r3, r2
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d1f6      	bne.n	8000686 <uart_transmit_str+0x12>
  }

  if (HAL_OK == HAL_UART_Transmit(&huart1, data, length, UART_TIMEOUT))
 8000698:	89ba      	ldrh	r2, [r7, #12]
 800069a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800069e:	6879      	ldr	r1, [r7, #4]
 80006a0:	4806      	ldr	r0, [pc, #24]	@ (80006bc <uart_transmit_str+0x48>)
 80006a2:	f001 fc39 	bl	8001f18 <HAL_UART_Transmit>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d101      	bne.n	80006b0 <uart_transmit_str+0x3c>
  {
    status = UART_OK;
 80006ac:	2300      	movs	r3, #0
 80006ae:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80006b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000034 	.word	0x20000034

080006c0 <uart_transmit_ch>:
 * @brief   Transmits a single char to UART.
 * @param   *data: The char.
 * @return  status: Report about the success of the transmission.
 */
uart_status uart_transmit_ch(uint8_t data)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
  uart_status status = UART_ERROR;
 80006ca:	23ff      	movs	r3, #255	@ 0xff
 80006cc:	73fb      	strb	r3, [r7, #15]

  /* Make available the UART module. */
  if (HAL_UART_STATE_TIMEOUT == HAL_UART_GetState(&huart1))
 80006ce:	480d      	ldr	r0, [pc, #52]	@ (8000704 <uart_transmit_ch+0x44>)
 80006d0:	f001 fe2f 	bl	8002332 <HAL_UART_GetState>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2ba0      	cmp	r3, #160	@ 0xa0
 80006d8:	d102      	bne.n	80006e0 <uart_transmit_ch+0x20>
  {
    HAL_UART_Abort(&huart1);
 80006da:	480a      	ldr	r0, [pc, #40]	@ (8000704 <uart_transmit_ch+0x44>)
 80006dc:	f001 fd3e 	bl	800215c <HAL_UART_Abort>
  }

  if (HAL_OK == HAL_UART_Transmit(&huart1, &data, 1u, UART_TIMEOUT))
 80006e0:	1df9      	adds	r1, r7, #7
 80006e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006e6:	2201      	movs	r2, #1
 80006e8:	4806      	ldr	r0, [pc, #24]	@ (8000704 <uart_transmit_ch+0x44>)
 80006ea:	f001 fc15 	bl	8001f18 <HAL_UART_Transmit>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d101      	bne.n	80006f8 <uart_transmit_ch+0x38>
  {
    status = UART_OK;
 80006f4:	2300      	movs	r3, #0
 80006f6:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000034 	.word	0x20000034

08000708 <xmodem_receive>:
 *          When we receive a header from UART, it decides what action it shall take.
 * @param   void
 * @return  void
 */
void xmodem_receive(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
  volatile xmodem_status status = X_OK;
 800070e:	2300      	movs	r3, #0
 8000710:	717b      	strb	r3, [r7, #5]
  uint8_t error_number = 0u;
 8000712:	2300      	movs	r3, #0
 8000714:	713b      	strb	r3, [r7, #4]

  x_first_packet_received = false;
 8000716:	4b3f      	ldr	r3, [pc, #252]	@ (8000814 <xmodem_receive+0x10c>)
 8000718:	2200      	movs	r2, #0
 800071a:	701a      	strb	r2, [r3, #0]
  xmodem_packet_number = 1u;
 800071c:	4b3e      	ldr	r3, [pc, #248]	@ (8000818 <xmodem_receive+0x110>)
 800071e:	2201      	movs	r2, #1
 8000720:	701a      	strb	r2, [r3, #0]
  xmodem_actual_flash_address = FLASH_APP_START_ADDRESS;
 8000722:	4b3e      	ldr	r3, [pc, #248]	@ (800081c <xmodem_receive+0x114>)
 8000724:	4a3e      	ldr	r2, [pc, #248]	@ (8000820 <xmodem_receive+0x118>)
 8000726:	601a      	str	r2, [r3, #0]

  /* Loop until there isn't any error (or until we jump to the user application). */
  while (X_OK == status)
 8000728:	e06a      	b.n	8000800 <xmodem_receive+0xf8>
  {
    uint8_t header = 0x00u;
 800072a:	2300      	movs	r3, #0
 800072c:	70fb      	strb	r3, [r7, #3]

    /* Get the header from UART. */
    uart_status comm_status = uart_receive(&header, 1u);
 800072e:	1cfb      	adds	r3, r7, #3
 8000730:	2101      	movs	r1, #1
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff ff82 	bl	800063c <uart_receive>
 8000738:	4603      	mov	r3, r0
 800073a:	71fb      	strb	r3, [r7, #7]

    /* Spam the host (until we receive something) with ACSII "C", to notify it, we want to use CRC-16. */
    if ((UART_OK != comm_status) && (false == x_first_packet_received))
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d007      	beq.n	8000752 <xmodem_receive+0x4a>
 8000742:	4b34      	ldr	r3, [pc, #208]	@ (8000814 <xmodem_receive+0x10c>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d103      	bne.n	8000752 <xmodem_receive+0x4a>
    {
      (void)uart_transmit_ch(X_C);
 800074a:	2043      	movs	r0, #67	@ 0x43
 800074c:	f7ff ffb8 	bl	80006c0 <uart_transmit_ch>
 8000750:	e00d      	b.n	800076e <xmodem_receive+0x66>
    }
    /* Uart timeout or any other errors. */
    else if ((UART_OK != comm_status) && (true == x_first_packet_received))
 8000752:	79fb      	ldrb	r3, [r7, #7]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d00a      	beq.n	800076e <xmodem_receive+0x66>
 8000758:	4b2e      	ldr	r3, [pc, #184]	@ (8000814 <xmodem_receive+0x10c>)
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b01      	cmp	r3, #1
 800075e:	d106      	bne.n	800076e <xmodem_receive+0x66>
    {
      status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	2103      	movs	r1, #3
 8000764:	4618      	mov	r0, r3
 8000766:	f000 f993 	bl	8000a90 <xmodem_error_handler>
 800076a:	4603      	mov	r3, r0
 800076c:	717b      	strb	r3, [r7, #5]
    {
      /* Do nothing. */
    }

    /* The header can be: SOH, STX, EOT and CAN. */
    switch(header)
 800076e:	78fb      	ldrb	r3, [r7, #3]
 8000770:	2b18      	cmp	r3, #24
 8000772:	d037      	beq.n	80007e4 <xmodem_receive+0xdc>
 8000774:	2b18      	cmp	r3, #24
 8000776:	dc38      	bgt.n	80007ea <xmodem_receive+0xe2>
 8000778:	2b02      	cmp	r3, #2
 800077a:	dc02      	bgt.n	8000782 <xmodem_receive+0x7a>
 800077c:	2b00      	cmp	r3, #0
 800077e:	dc03      	bgt.n	8000788 <xmodem_receive+0x80>
 8000780:	e033      	b.n	80007ea <xmodem_receive+0xe2>
 8000782:	2b04      	cmp	r3, #4
 8000784:	d022      	beq.n	80007cc <xmodem_receive+0xc4>
 8000786:	e030      	b.n	80007ea <xmodem_receive+0xe2>
      xmodem_status packet_status = X_ERROR;
      /* 128 or 1024 bytes of data. */
      case X_SOH:
      case X_STX:
        /* If the handling was successful, then send an ACK. */
        packet_status = xmodem_handle_packet(header);
 8000788:	78fb      	ldrb	r3, [r7, #3]
 800078a:	4618      	mov	r0, r3
 800078c:	f000 f888 	bl	80008a0 <xmodem_handle_packet>
 8000790:	4603      	mov	r3, r0
 8000792:	71bb      	strb	r3, [r7, #6]
        if (X_OK == packet_status)
 8000794:	79bb      	ldrb	r3, [r7, #6]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d103      	bne.n	80007a2 <xmodem_receive+0x9a>
        {
          (void)uart_transmit_ch(X_ACK);
 800079a:	2006      	movs	r0, #6
 800079c:	f7ff ff90 	bl	80006c0 <uart_transmit_ch>
        /* Error while processing the packet, either send a NAK or do graceful abort. */
        else
        {
          status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
        }
        break;
 80007a0:	e02e      	b.n	8000800 <xmodem_receive+0xf8>
        else if (X_ERROR_FLASH == packet_status)
 80007a2:	79bb      	ldrb	r3, [r7, #6]
 80007a4:	2b08      	cmp	r3, #8
 80007a6:	d109      	bne.n	80007bc <xmodem_receive+0xb4>
          error_number = X_MAX_ERRORS;
 80007a8:	2303      	movs	r3, #3
 80007aa:	713b      	strb	r3, [r7, #4]
          status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	2103      	movs	r1, #3
 80007b0:	4618      	mov	r0, r3
 80007b2:	f000 f96d 	bl	8000a90 <xmodem_error_handler>
 80007b6:	4603      	mov	r3, r0
 80007b8:	717b      	strb	r3, [r7, #5]
        break;
 80007ba:	e021      	b.n	8000800 <xmodem_receive+0xf8>
          status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2103      	movs	r1, #3
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 f965 	bl	8000a90 <xmodem_error_handler>
 80007c6:	4603      	mov	r3, r0
 80007c8:	717b      	strb	r3, [r7, #5]
        break;
 80007ca:	e019      	b.n	8000800 <xmodem_receive+0xf8>
      /* End of Transmission. */
      case X_EOT:
        /* ACK, feedback to user (as a text), then jump to user application. */
        (void)uart_transmit_ch(X_ACK);
 80007cc:	2006      	movs	r0, #6
 80007ce:	f7ff ff77 	bl	80006c0 <uart_transmit_ch>
        (void)uart_transmit_str((uint8_t*)"\n\rFirmware updated!\n\r");
 80007d2:	4814      	ldr	r0, [pc, #80]	@ (8000824 <xmodem_receive+0x11c>)
 80007d4:	f7ff ff4e 	bl	8000674 <uart_transmit_str>
        (void)uart_transmit_str((uint8_t*)"Jumping to user application...\n\r");
 80007d8:	4813      	ldr	r0, [pc, #76]	@ (8000828 <xmodem_receive+0x120>)
 80007da:	f7ff ff4b 	bl	8000674 <uart_transmit_str>
        flash_jump_to_app();
 80007de:	f7ff fd2f 	bl	8000240 <flash_jump_to_app>
        break;
 80007e2:	e00d      	b.n	8000800 <xmodem_receive+0xf8>
      /* Abort from host. */
      case X_CAN:
        status = X_ERROR;
 80007e4:	23ff      	movs	r3, #255	@ 0xff
 80007e6:	717b      	strb	r3, [r7, #5]
        break;
 80007e8:	e00a      	b.n	8000800 <xmodem_receive+0xf8>
      default:
        /* Wrong header. */
        if (UART_OK == comm_status)
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d106      	bne.n	80007fe <xmodem_receive+0xf6>
        {
          status = xmodem_error_handler(&error_number, X_MAX_ERRORS);
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2103      	movs	r1, #3
 80007f4:	4618      	mov	r0, r3
 80007f6:	f000 f94b 	bl	8000a90 <xmodem_error_handler>
 80007fa:	4603      	mov	r3, r0
 80007fc:	717b      	strb	r3, [r7, #5]
        }
        break;
 80007fe:	bf00      	nop
  while (X_OK == status)
 8000800:	797b      	ldrb	r3, [r7, #5]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2b00      	cmp	r3, #0
 8000806:	d090      	beq.n	800072a <xmodem_receive+0x22>
    }
  }
}
 8000808:	bf00      	nop
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000080 	.word	0x20000080
 8000818:	20000004 	.word	0x20000004
 800081c:	2000007c 	.word	0x2000007c
 8000820:	08008000 	.word	0x08008000
 8000824:	08002768 	.word	0x08002768
 8000828:	08002780 	.word	0x08002780

0800082c <xmodem_calc_crc>:
 * @param   *data:  Array of the data which we want to calculate.
 * @param   length: Size of the data, either 128 or 1024 bytes.
 * @return  status: The calculated CRC.
 */
static uint16_t xmodem_calc_crc(uint8_t *data, uint16_t length)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	460b      	mov	r3, r1
 8000836:	807b      	strh	r3, [r7, #2]
    uint16_t crc = 0u;
 8000838:	2300      	movs	r3, #0
 800083a:	81fb      	strh	r3, [r7, #14]
    while (length)
 800083c:	e027      	b.n	800088e <xmodem_calc_crc+0x62>
    {
        length--;
 800083e:	887b      	ldrh	r3, [r7, #2]
 8000840:	3b01      	subs	r3, #1
 8000842:	807b      	strh	r3, [r7, #2]
        crc = crc ^ ((uint16_t)*data++ << 8u);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	1c5a      	adds	r2, r3, #1
 8000848:	607a      	str	r2, [r7, #4]
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	b21b      	sxth	r3, r3
 800084e:	021b      	lsls	r3, r3, #8
 8000850:	b21a      	sxth	r2, r3
 8000852:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000856:	4053      	eors	r3, r2
 8000858:	b21b      	sxth	r3, r3
 800085a:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
 800085c:	2300      	movs	r3, #0
 800085e:	737b      	strb	r3, [r7, #13]
 8000860:	e012      	b.n	8000888 <xmodem_calc_crc+0x5c>
        {
            if (crc & 0x8000u)
 8000862:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000866:	2b00      	cmp	r3, #0
 8000868:	da08      	bge.n	800087c <xmodem_calc_crc+0x50>
            {
                crc = (crc << 1u) ^ 0x1021u;
 800086a:	89fb      	ldrh	r3, [r7, #14]
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	b29b      	uxth	r3, r3
 8000870:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8000874:	f083 0301 	eor.w	r3, r3, #1
 8000878:	81fb      	strh	r3, [r7, #14]
 800087a:	e002      	b.n	8000882 <xmodem_calc_crc+0x56>
            }
            else
            {
                crc = crc << 1u;
 800087c:	89fb      	ldrh	r3, [r7, #14]
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	81fb      	strh	r3, [r7, #14]
        for (uint8_t i = 0u; i < 8u; i++)
 8000882:	7b7b      	ldrb	r3, [r7, #13]
 8000884:	3301      	adds	r3, #1
 8000886:	737b      	strb	r3, [r7, #13]
 8000888:	7b7b      	ldrb	r3, [r7, #13]
 800088a:	2b07      	cmp	r3, #7
 800088c:	d9e9      	bls.n	8000862 <xmodem_calc_crc+0x36>
    while (length)
 800088e:	887b      	ldrh	r3, [r7, #2]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d1d4      	bne.n	800083e <xmodem_calc_crc+0x12>
            }
        }
    }
    return crc;
 8000894:	89fb      	ldrh	r3, [r7, #14]
}
 8000896:	4618      	mov	r0, r3
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr

080008a0 <xmodem_handle_packet>:
 * @brief   This function handles the data packet we get from the xmodem protocol.
 * @param   header: SOH or STX.
 * @return  status: Report about the packet.
 */
static xmodem_status xmodem_handle_packet(uint8_t header)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	4602      	mov	r2, r0
 80008aa:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80008ae:	f2a3 4311 	subw	r3, r3, #1041	@ 0x411
 80008b2:	701a      	strb	r2, [r3, #0]
  xmodem_status status = X_OK;
 80008b4:	2300      	movs	r3, #0
 80008b6:	f887 3417 	strb.w	r3, [r7, #1047]	@ 0x417
  uint16_t size = 0u;
 80008ba:	2300      	movs	r3, #0
 80008bc:	f8a7 3414 	strh.w	r3, [r7, #1044]	@ 0x414
  uint8_t received_packet_number[X_PACKET_NUMBER_SIZE];
  uint8_t received_packet_data[X_PACKET_1024_SIZE];
  uint8_t received_packet_crc[X_PACKET_CRC_SIZE];

  /* Get the size of the data. */
  if (X_SOH == header)
 80008c0:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80008c4:	f2a3 4311 	subw	r3, r3, #1041	@ 0x411
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d103      	bne.n	80008d6 <xmodem_handle_packet+0x36>
  {
    size = X_PACKET_128_SIZE;
 80008ce:	2380      	movs	r3, #128	@ 0x80
 80008d0:	f8a7 3414 	strh.w	r3, [r7, #1044]	@ 0x414
 80008d4:	e00e      	b.n	80008f4 <xmodem_handle_packet+0x54>
  }
  else if (X_STX == header)
 80008d6:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80008da:	f2a3 4311 	subw	r3, r3, #1041	@ 0x411
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b02      	cmp	r3, #2
 80008e2:	d104      	bne.n	80008ee <xmodem_handle_packet+0x4e>
  {
    size = X_PACKET_1024_SIZE;
 80008e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008e8:	f8a7 3414 	strh.w	r3, [r7, #1044]	@ 0x414
 80008ec:	e002      	b.n	80008f4 <xmodem_handle_packet+0x54>
  }
  else
  {
    /* Wrong header type. This shoudn't be possible... */
    status |= X_ERROR;
 80008ee:	23ff      	movs	r3, #255	@ 0xff
 80008f0:	f887 3417 	strb.w	r3, [r7, #1047]	@ 0x417
  }

  uart_status comm_status = UART_OK;
 80008f4:	2300      	movs	r3, #0
 80008f6:	f887 3413 	strb.w	r3, [r7, #1043]	@ 0x413
  /* Get the packet number, data and CRC from UART. */
  comm_status |= uart_receive(&received_packet_number[0u], X_PACKET_NUMBER_SIZE);
 80008fa:	f207 430c 	addw	r3, r7, #1036	@ 0x40c
 80008fe:	2102      	movs	r1, #2
 8000900:	4618      	mov	r0, r3
 8000902:	f7ff fe9b 	bl	800063c <uart_receive>
 8000906:	4603      	mov	r3, r0
 8000908:	461a      	mov	r2, r3
 800090a:	f897 3413 	ldrb.w	r3, [r7, #1043]	@ 0x413
 800090e:	4313      	orrs	r3, r2
 8000910:	f887 3413 	strb.w	r3, [r7, #1043]	@ 0x413
  comm_status |= uart_receive(&received_packet_data[0u], size);
 8000914:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	@ 0x414
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	4611      	mov	r1, r2
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fe8c 	bl	800063c <uart_receive>
 8000924:	4603      	mov	r3, r0
 8000926:	461a      	mov	r2, r3
 8000928:	f897 3413 	ldrb.w	r3, [r7, #1043]	@ 0x413
 800092c:	4313      	orrs	r3, r2
 800092e:	f887 3413 	strb.w	r3, [r7, #1043]	@ 0x413
  comm_status |= uart_receive(&received_packet_crc[0u], X_PACKET_CRC_SIZE);
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	2102      	movs	r1, #2
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fe7f 	bl	800063c <uart_receive>
 800093e:	4603      	mov	r3, r0
 8000940:	461a      	mov	r2, r3
 8000942:	f897 3413 	ldrb.w	r3, [r7, #1043]	@ 0x413
 8000946:	4313      	orrs	r3, r2
 8000948:	f887 3413 	strb.w	r3, [r7, #1043]	@ 0x413
  /* Merge the two bytes of CRC. */
  uint16_t crc_received = ((uint16_t)received_packet_crc[X_PACKET_CRC_HIGH_INDEX] << 8u) | ((uint16_t)received_packet_crc[X_PACKET_CRC_LOW_INDEX]);
 800094c:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8000950:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	b21b      	sxth	r3, r3
 8000958:	021b      	lsls	r3, r3, #8
 800095a:	b21a      	sxth	r2, r3
 800095c:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8000960:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8000964:	785b      	ldrb	r3, [r3, #1]
 8000966:	b21b      	sxth	r3, r3
 8000968:	4313      	orrs	r3, r2
 800096a:	b21b      	sxth	r3, r3
 800096c:	f8a7 3410 	strh.w	r3, [r7, #1040]	@ 0x410
  /* We calculate it too. */
  uint16_t crc_calculated = xmodem_calc_crc(&received_packet_data[0u], size);
 8000970:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	@ 0x414
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	4611      	mov	r1, r2
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff ff56 	bl	800082c <xmodem_calc_crc>
 8000980:	4603      	mov	r3, r0
 8000982:	f8a7 340e 	strh.w	r3, [r7, #1038]	@ 0x40e

  /* Communication error. */
  if (UART_OK != comm_status)
 8000986:	f897 3413 	ldrb.w	r3, [r7, #1043]	@ 0x413
 800098a:	2b00      	cmp	r3, #0
 800098c:	d005      	beq.n	800099a <xmodem_handle_packet+0xfa>
  {
    status |= X_ERROR_UART;
 800098e:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
 8000992:	f043 0304 	orr.w	r3, r3, #4
 8000996:	f887 3417 	strb.w	r3, [r7, #1047]	@ 0x417
  }

  /* If it is the first packet, then erase the memory. */
  if ((X_OK == status) && (false == x_first_packet_received))
 800099a:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d113      	bne.n	80009ca <xmodem_handle_packet+0x12a>
 80009a2:	4b37      	ldr	r3, [pc, #220]	@ (8000a80 <xmodem_handle_packet+0x1e0>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d10f      	bne.n	80009ca <xmodem_handle_packet+0x12a>
  {
    if (FLASH_OK == flash_erase(FLASH_APP_START_ADDRESS))
 80009aa:	4836      	ldr	r0, [pc, #216]	@ (8000a84 <xmodem_handle_packet+0x1e4>)
 80009ac:	f7ff fbce 	bl	800014c <flash_erase>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d103      	bne.n	80009be <xmodem_handle_packet+0x11e>
    {
      x_first_packet_received = true;
 80009b6:	4b32      	ldr	r3, [pc, #200]	@ (8000a80 <xmodem_handle_packet+0x1e0>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	701a      	strb	r2, [r3, #0]
 80009bc:	e005      	b.n	80009ca <xmodem_handle_packet+0x12a>
    }
    else
    {
      status |= X_ERROR_FLASH;
 80009be:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
 80009c2:	f043 0308 	orr.w	r3, r3, #8
 80009c6:	f887 3417 	strb.w	r3, [r7, #1047]	@ 0x417
    }
  }

  /* Error handling and flashing. */
  if (X_OK == status)
 80009ca:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d125      	bne.n	8000a1e <xmodem_handle_packet+0x17e>
  {
    if (xmodem_packet_number != received_packet_number[0u])
 80009d2:	f897 240c 	ldrb.w	r2, [r7, #1036]	@ 0x40c
 80009d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000a88 <xmodem_handle_packet+0x1e8>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	429a      	cmp	r2, r3
 80009dc:	d005      	beq.n	80009ea <xmodem_handle_packet+0x14a>
    {
      /* Packet number counter mismatch. */
      status |= X_ERROR_NUMBER;
 80009de:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
 80009e2:	f043 0302 	orr.w	r3, r3, #2
 80009e6:	f887 3417 	strb.w	r3, [r7, #1047]	@ 0x417
    }
    if (255u != (received_packet_number[X_PACKET_NUMBER_INDEX] + received_packet_number[X_PACKET_NUMBER_COMPLEMENT_INDEX]))
 80009ea:	f897 340c 	ldrb.w	r3, [r7, #1036]	@ 0x40c
 80009ee:	461a      	mov	r2, r3
 80009f0:	f897 340d 	ldrb.w	r3, [r7, #1037]	@ 0x40d
 80009f4:	4413      	add	r3, r2
 80009f6:	2bff      	cmp	r3, #255	@ 0xff
 80009f8:	d005      	beq.n	8000a06 <xmodem_handle_packet+0x166>
    {
      /* The sum of the packet number and packet number complement aren't 255. */
      /* The sum always has to be 255. */
      status |= X_ERROR_NUMBER;
 80009fa:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
 80009fe:	f043 0302 	orr.w	r3, r3, #2
 8000a02:	f887 3417 	strb.w	r3, [r7, #1047]	@ 0x417
    }
    if (crc_calculated != crc_received)
 8000a06:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	@ 0x40e
 8000a0a:	f8b7 3410 	ldrh.w	r3, [r7, #1040]	@ 0x410
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d005      	beq.n	8000a1e <xmodem_handle_packet+0x17e>
    {
      /* The calculated and received CRC are different. */
      status |= X_ERROR_CRC;
 8000a12:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
 8000a16:	f043 0301 	orr.w	r3, r3, #1
 8000a1a:	f887 3417 	strb.w	r3, [r7, #1047]	@ 0x417
    }
  }

    /* Do the actual flashing (if there weren't any errors). */
    if ((X_OK == status) && (FLASH_OK != flash_write(xmodem_actual_flash_address, (uint32_t*)&received_packet_data[0u], (uint32_t)size/4u)))
 8000a1e:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d114      	bne.n	8000a50 <xmodem_handle_packet+0x1b0>
 8000a26:	4b19      	ldr	r3, [pc, #100]	@ (8000a8c <xmodem_handle_packet+0x1ec>)
 8000a28:	6818      	ldr	r0, [r3, #0]
 8000a2a:	f8b7 3414 	ldrh.w	r3, [r7, #1044]	@ 0x414
 8000a2e:	089b      	lsrs	r3, r3, #2
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	461a      	mov	r2, r3
 8000a34:	f107 030c 	add.w	r3, r7, #12
 8000a38:	4619      	mov	r1, r3
 8000a3a:	f7ff fbb3 	bl	80001a4 <flash_write>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d005      	beq.n	8000a50 <xmodem_handle_packet+0x1b0>
    {
      /* Flashing error. */
      status |= X_ERROR_FLASH;
 8000a44:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
 8000a48:	f043 0308 	orr.w	r3, r3, #8
 8000a4c:	f887 3417 	strb.w	r3, [r7, #1047]	@ 0x417
    }

  /* Raise the packet number and the address counters (if there weren't any errors). */
  if (X_OK == status)
 8000a50:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d10c      	bne.n	8000a72 <xmodem_handle_packet+0x1d2>
  {
    xmodem_packet_number++;
 8000a58:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <xmodem_handle_packet+0x1e8>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <xmodem_handle_packet+0x1e8>)
 8000a62:	701a      	strb	r2, [r3, #0]
    xmodem_actual_flash_address += size;
 8000a64:	f8b7 2414 	ldrh.w	r2, [r7, #1044]	@ 0x414
 8000a68:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <xmodem_handle_packet+0x1ec>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	4a07      	ldr	r2, [pc, #28]	@ (8000a8c <xmodem_handle_packet+0x1ec>)
 8000a70:	6013      	str	r3, [r2, #0]
  }

  return status;
 8000a72:	f897 3417 	ldrb.w	r3, [r7, #1047]	@ 0x417
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	f507 6783 	add.w	r7, r7, #1048	@ 0x418
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000080 	.word	0x20000080
 8000a84:	08008000 	.word	0x08008000
 8000a88:	20000004 	.word	0x20000004
 8000a8c:	2000007c 	.word	0x2000007c

08000a90 <xmodem_error_handler>:
 * @param   *error_number:    Number of current errors (passed as a pointer).
 * @param   max_error_number: Maximal allowed number of errors.
 * @return  status: X_ERROR in case of too many errors, X_OK otherwise.
 */
static xmodem_status xmodem_error_handler(uint8_t *error_number, uint8_t max_error_number)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	70fb      	strb	r3, [r7, #3]
  xmodem_status status = X_OK;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	73fb      	strb	r3, [r7, #15]
  /* Raise the error counter. */
  (*error_number)++;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	701a      	strb	r2, [r3, #0]
  /* If the counter reached the max value, then abort. */
  if ((*error_number) >= max_error_number)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	78fa      	ldrb	r2, [r7, #3]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	d808      	bhi.n	8000ac8 <xmodem_error_handler+0x38>
  {
    /* Graceful abort. */
    (void)uart_transmit_ch(X_CAN);
 8000ab6:	2018      	movs	r0, #24
 8000ab8:	f7ff fe02 	bl	80006c0 <uart_transmit_ch>
    (void)uart_transmit_ch(X_CAN);
 8000abc:	2018      	movs	r0, #24
 8000abe:	f7ff fdff 	bl	80006c0 <uart_transmit_ch>
    status = X_ERROR;
 8000ac2:	23ff      	movs	r3, #255	@ 0xff
 8000ac4:	73fb      	strb	r3, [r7, #15]
 8000ac6:	e004      	b.n	8000ad2 <xmodem_error_handler+0x42>
  }
  /* Otherwise send a NAK for a repeat. */
  else
  {
    (void)uart_transmit_ch(X_NAK);
 8000ac8:	2015      	movs	r0, #21
 8000aca:	f7ff fdf9 	bl	80006c0 <uart_transmit_ch>
    status = X_OK;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8000ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000adc:	f7ff fda8 	bl	8000630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae0:	480b      	ldr	r0, [pc, #44]	@ (8000b10 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ae2:	490c      	ldr	r1, [pc, #48]	@ (8000b14 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ae4:	4a0c      	ldr	r2, [pc, #48]	@ (8000b18 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ae6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae8:	e002      	b.n	8000af0 <LoopCopyDataInit>

08000aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aee:	3304      	adds	r3, #4

08000af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af4:	d3f9      	bcc.n	8000aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af6:	4a09      	ldr	r2, [pc, #36]	@ (8000b1c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000af8:	4c09      	ldr	r4, [pc, #36]	@ (8000b20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000afc:	e001      	b.n	8000b02 <LoopFillZerobss>

08000afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b00:	3204      	adds	r2, #4

08000b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b04:	d3fb      	bcc.n	8000afe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b06:	f001 fd83 	bl	8002610 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b0a:	f7ff fbb3 	bl	8000274 <main>
  bx lr
 8000b0e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b14:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b18:	080027d8 	.word	0x080027d8
  ldr r2, =_sbss
 8000b1c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b20:	200000a8 	.word	0x200000a8

08000b24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC1_2_IRQHandler>
	...

08000b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b2c:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <HAL_Init+0x28>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a07      	ldr	r2, [pc, #28]	@ (8000b50 <HAL_Init+0x28>)
 8000b32:	f043 0310 	orr.w	r3, r3, #16
 8000b36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f000 f949 	bl	8000dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3e:	200f      	movs	r0, #15
 8000b40:	f000 f826 	bl	8000b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b44:	f7ff fcac 	bl	80004a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40022000 	.word	0x40022000

08000b54 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000b58:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <HAL_DeInit+0x2c>)
 8000b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8000b5e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000b60:	4b07      	ldr	r3, [pc, #28]	@ (8000b80 <HAL_DeInit+0x2c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8000b66:	4b06      	ldr	r3, [pc, #24]	@ (8000b80 <HAL_DeInit+0x2c>)
 8000b68:	f04f 32ff 	mov.w	r2, #4294967295
 8000b6c:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8000b6e:	4b04      	ldr	r3, [pc, #16]	@ (8000b80 <HAL_DeInit+0x2c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000b74:	f000 f806 	bl	8000b84 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8000b78:	2300      	movs	r3, #0
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40021000 	.word	0x40021000

08000b84 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b98:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <HAL_InitTick+0x54>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b12      	ldr	r3, [pc, #72]	@ (8000be8 <HAL_InitTick+0x58>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 f935 	bl	8000e1e <HAL_SYSTICK_Config>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00e      	b.n	8000bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	d80a      	bhi.n	8000bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f000 f90b 	bl	8000de6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd0:	4a06      	ldr	r2, [pc, #24]	@ (8000bec <HAL_InitTick+0x5c>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e000      	b.n	8000bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000000 	.word	0x20000000
 8000be8:	2000000c 	.word	0x2000000c
 8000bec:	20000008 	.word	0x20000008

08000bf0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b05      	ldr	r3, [pc, #20]	@ (8000c0c <HAL_IncTick+0x1c>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b05      	ldr	r3, [pc, #20]	@ (8000c10 <HAL_IncTick+0x20>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a03      	ldr	r2, [pc, #12]	@ (8000c10 <HAL_IncTick+0x20>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	2000000c 	.word	0x2000000c
 8000c10:	20000084 	.word	0x20000084

08000c14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return uwTick;
 8000c18:	4b02      	ldr	r3, [pc, #8]	@ (8000c24 <HAL_GetTick+0x10>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	20000084 	.word	0x20000084

08000c28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c30:	f7ff fff0 	bl	8000c14 <HAL_GetTick>
 8000c34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c40:	d005      	beq.n	8000c4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c42:	4b0a      	ldr	r3, [pc, #40]	@ (8000c6c <HAL_Delay+0x44>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c4e:	bf00      	nop
 8000c50:	f7ff ffe0 	bl	8000c14 <HAL_GetTick>
 8000c54:	4602      	mov	r2, r0
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	1ad3      	subs	r3, r2, r3
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d8f7      	bhi.n	8000c50 <HAL_Delay+0x28>
  {
  }
}
 8000c60:	bf00      	nop
 8000c62:	bf00      	nop
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	2000000c 	.word	0x2000000c

08000c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c80:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	@ (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	60d3      	str	r3, [r2, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cbc:	4b04      	ldr	r3, [pc, #16]	@ (8000cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	f003 0307 	and.w	r3, r3, #7
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db0a      	blt.n	8000cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	490c      	ldr	r1, [pc, #48]	@ (8000d20 <__NVIC_SetPriority+0x4c>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	0112      	lsls	r2, r2, #4
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cfc:	e00a      	b.n	8000d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4908      	ldr	r1, [pc, #32]	@ (8000d24 <__NVIC_SetPriority+0x50>)
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	f003 030f 	and.w	r3, r3, #15
 8000d0a:	3b04      	subs	r3, #4
 8000d0c:	0112      	lsls	r2, r2, #4
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	440b      	add	r3, r1
 8000d12:	761a      	strb	r2, [r3, #24]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bc80      	pop	{r7}
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	e000e100 	.word	0xe000e100
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	@ 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f1c3 0307 	rsb	r3, r3, #7
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	bf28      	it	cs
 8000d46:	2304      	movcs	r3, #4
 8000d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	2b06      	cmp	r3, #6
 8000d50:	d902      	bls.n	8000d58 <NVIC_EncodePriority+0x30>
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3b03      	subs	r3, #3
 8000d56:	e000      	b.n	8000d5a <NVIC_EncodePriority+0x32>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43da      	mvns	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d70:	f04f 31ff 	mov.w	r1, #4294967295
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	43d9      	mvns	r1, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	4313      	orrs	r3, r2
         );
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3724      	adds	r7, #36	@ 0x24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d9c:	d301      	bcc.n	8000da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00f      	b.n	8000dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dcc <SysTick_Config+0x40>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000daa:	210f      	movs	r1, #15
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f7ff ff90 	bl	8000cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db4:	4b05      	ldr	r3, [pc, #20]	@ (8000dcc <SysTick_Config+0x40>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dba:	4b04      	ldr	r3, [pc, #16]	@ (8000dcc <SysTick_Config+0x40>)
 8000dbc:	2207      	movs	r2, #7
 8000dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	e000e010 	.word	0xe000e010

08000dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ff49 	bl	8000c70 <__NVIC_SetPriorityGrouping>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df8:	f7ff ff5e 	bl	8000cb8 <__NVIC_GetPriorityGrouping>
 8000dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	68b9      	ldr	r1, [r7, #8]
 8000e02:	6978      	ldr	r0, [r7, #20]
 8000e04:	f7ff ff90 	bl	8000d28 <NVIC_EncodePriority>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff5f 	bl	8000cd4 <__NVIC_SetPriority>
}
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e26:	6878      	ldr	r0, [r7, #4]
 8000e28:	f7ff ffb0 	bl	8000d8c <SysTick_Config>
 8000e2c:	4603      	mov	r3, r0
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d101      	bne.n	8000e48 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000e44:	2301      	movs	r3, #1
 8000e46:	e00e      	b.n	8000e66 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	795b      	ldrb	r3, [r3, #5]
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d105      	bne.n	8000e5e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f7ff fb53 	bl	8000504 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2201      	movs	r2, #1
 8000e62:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b085      	sub	sp, #20
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b02      	cmp	r3, #2
 8000e84:	d008      	beq.n	8000e98 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2204      	movs	r2, #4
 8000e8a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e020      	b.n	8000eda <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f022 020e 	bic.w	r2, r2, #14
 8000ea6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f022 0201 	bic.w	r2, r2, #1
 8000eb6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2201      	movs	r2, #1
 8000ecc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3714      	adds	r7, #20
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr
	...

08000efc <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000efc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000efe:	b087      	sub	sp, #28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f16:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd4 <HAL_FLASH_Program+0xd8>)
 8000f18:	7e1b      	ldrb	r3, [r3, #24]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d101      	bne.n	8000f22 <HAL_FLASH_Program+0x26>
 8000f1e:	2302      	movs	r3, #2
 8000f20:	e054      	b.n	8000fcc <HAL_FLASH_Program+0xd0>
 8000f22:	4b2c      	ldr	r3, [pc, #176]	@ (8000fd4 <HAL_FLASH_Program+0xd8>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f28:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000f2c:	f000 f8a8 	bl	8001080 <FLASH_WaitForLastOperation>
 8000f30:	4603      	mov	r3, r0
 8000f32:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000f34:	7dfb      	ldrb	r3, [r7, #23]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d144      	bne.n	8000fc4 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d102      	bne.n	8000f46 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000f40:	2301      	movs	r3, #1
 8000f42:	757b      	strb	r3, [r7, #21]
 8000f44:	e007      	b.n	8000f56 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d102      	bne.n	8000f52 <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	757b      	strb	r3, [r7, #21]
 8000f50:	e001      	b.n	8000f56 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000f52:	2304      	movs	r3, #4
 8000f54:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000f56:	2300      	movs	r3, #0
 8000f58:	75bb      	strb	r3, [r7, #22]
 8000f5a:	e02d      	b.n	8000fb8 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000f5c:	7dbb      	ldrb	r3, [r7, #22]
 8000f5e:	005a      	lsls	r2, r3, #1
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	eb02 0c03 	add.w	ip, r2, r3
 8000f66:	7dbb      	ldrb	r3, [r7, #22]
 8000f68:	0119      	lsls	r1, r3, #4
 8000f6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f6e:	f1c1 0620 	rsb	r6, r1, #32
 8000f72:	f1a1 0020 	sub.w	r0, r1, #32
 8000f76:	fa22 f401 	lsr.w	r4, r2, r1
 8000f7a:	fa03 f606 	lsl.w	r6, r3, r6
 8000f7e:	4334      	orrs	r4, r6
 8000f80:	fa23 f000 	lsr.w	r0, r3, r0
 8000f84:	4304      	orrs	r4, r0
 8000f86:	fa23 f501 	lsr.w	r5, r3, r1
 8000f8a:	b2a3      	uxth	r3, r4
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4660      	mov	r0, ip
 8000f90:	f000 f85a 	bl	8001048 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000f94:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8000f98:	f000 f872 	bl	8001080 <FLASH_WaitForLastOperation>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd8 <HAL_FLASH_Program+0xdc>)
 8000fa2:	691b      	ldr	r3, [r3, #16]
 8000fa4:	4a0c      	ldr	r2, [pc, #48]	@ (8000fd8 <HAL_FLASH_Program+0xdc>)
 8000fa6:	f023 0301 	bic.w	r3, r3, #1
 8000faa:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000fac:	7dfb      	ldrb	r3, [r7, #23]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d107      	bne.n	8000fc2 <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000fb2:	7dbb      	ldrb	r3, [r7, #22]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	75bb      	strb	r3, [r7, #22]
 8000fb8:	7dba      	ldrb	r2, [r7, #22]
 8000fba:	7d7b      	ldrb	r3, [r7, #21]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d3cd      	bcc.n	8000f5c <HAL_FLASH_Program+0x60>
 8000fc0:	e000      	b.n	8000fc4 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000fc2:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000fc4:	4b03      	ldr	r3, [pc, #12]	@ (8000fd4 <HAL_FLASH_Program+0xd8>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	761a      	strb	r2, [r3, #24]

  return status;
 8000fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	371c      	adds	r7, #28
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fd4:	20000088 	.word	0x20000088
 8000fd8:	40022000 	.word	0x40022000

08000fdc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800101c <HAL_FLASH_Unlock+0x40>)
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d00d      	beq.n	800100e <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000ff2:	4b0a      	ldr	r3, [pc, #40]	@ (800101c <HAL_FLASH_Unlock+0x40>)
 8000ff4:	4a0a      	ldr	r2, [pc, #40]	@ (8001020 <HAL_FLASH_Unlock+0x44>)
 8000ff6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000ff8:	4b08      	ldr	r3, [pc, #32]	@ (800101c <HAL_FLASH_Unlock+0x40>)
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8001024 <HAL_FLASH_Unlock+0x48>)
 8000ffc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000ffe:	4b07      	ldr	r3, [pc, #28]	@ (800101c <HAL_FLASH_Unlock+0x40>)
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 800100e:	79fb      	ldrb	r3, [r7, #7]
}
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40022000 	.word	0x40022000
 8001020:	45670123 	.word	0x45670123
 8001024:	cdef89ab 	.word	0xcdef89ab

08001028 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800102c:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <HAL_FLASH_Lock+0x1c>)
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	4a04      	ldr	r2, [pc, #16]	@ (8001044 <HAL_FLASH_Lock+0x1c>)
 8001032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001036:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40022000 	.word	0x40022000

08001048 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001054:	4b08      	ldr	r3, [pc, #32]	@ (8001078 <FLASH_Program_HalfWord+0x30>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800105a:	4b08      	ldr	r3, [pc, #32]	@ (800107c <FLASH_Program_HalfWord+0x34>)
 800105c:	691b      	ldr	r3, [r3, #16]
 800105e:	4a07      	ldr	r2, [pc, #28]	@ (800107c <FLASH_Program_HalfWord+0x34>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	887a      	ldrh	r2, [r7, #2]
 800106a:	801a      	strh	r2, [r3, #0]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20000088 	.word	0x20000088
 800107c:	40022000 	.word	0x40022000

08001080 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001088:	f7ff fdc4 	bl	8000c14 <HAL_GetTick>
 800108c:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800108e:	e010      	b.n	80010b2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001096:	d00c      	beq.n	80010b2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d007      	beq.n	80010ae <FLASH_WaitForLastOperation+0x2e>
 800109e:	f7ff fdb9 	bl	8000c14 <HAL_GetTick>
 80010a2:	4602      	mov	r2, r0
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d201      	bcs.n	80010b2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e025      	b.n	80010fe <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80010b2:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <FLASH_WaitForLastOperation+0x88>)
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1e8      	bne.n	8001090 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80010be:	4b12      	ldr	r3, [pc, #72]	@ (8001108 <FLASH_WaitForLastOperation+0x88>)
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	f003 0320 	and.w	r3, r3, #32
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d002      	beq.n	80010d0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80010ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001108 <FLASH_WaitForLastOperation+0x88>)
 80010cc:	2220      	movs	r2, #32
 80010ce:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80010d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001108 <FLASH_WaitForLastOperation+0x88>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	f003 0310 	and.w	r3, r3, #16
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d10b      	bne.n	80010f4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80010dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <FLASH_WaitForLastOperation+0x88>)
 80010de:	69db      	ldr	r3, [r3, #28]
 80010e0:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d105      	bne.n	80010f4 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80010e8:	4b07      	ldr	r3, [pc, #28]	@ (8001108 <FLASH_WaitForLastOperation+0x88>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80010f4:	f000 f80a 	bl	800110c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e000      	b.n	80010fe <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40022000 	.word	0x40022000

0800110c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001116:	4b23      	ldr	r3, [pc, #140]	@ (80011a4 <FLASH_SetErrorCode+0x98>)
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	f003 0310 	and.w	r3, r3, #16
 800111e:	2b00      	cmp	r3, #0
 8001120:	d009      	beq.n	8001136 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001122:	4b21      	ldr	r3, [pc, #132]	@ (80011a8 <FLASH_SetErrorCode+0x9c>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	f043 0302 	orr.w	r3, r3, #2
 800112a:	4a1f      	ldr	r2, [pc, #124]	@ (80011a8 <FLASH_SetErrorCode+0x9c>)
 800112c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f043 0310 	orr.w	r3, r3, #16
 8001134:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001136:	4b1b      	ldr	r3, [pc, #108]	@ (80011a4 <FLASH_SetErrorCode+0x98>)
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	2b00      	cmp	r3, #0
 8001140:	d009      	beq.n	8001156 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001142:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <FLASH_SetErrorCode+0x9c>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	4a17      	ldr	r2, [pc, #92]	@ (80011a8 <FLASH_SetErrorCode+0x9c>)
 800114c:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001156:	4b13      	ldr	r3, [pc, #76]	@ (80011a4 <FLASH_SetErrorCode+0x98>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00b      	beq.n	800117a <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001162:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <FLASH_SetErrorCode+0x9c>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	f043 0304 	orr.w	r3, r3, #4
 800116a:	4a0f      	ldr	r2, [pc, #60]	@ (80011a8 <FLASH_SetErrorCode+0x9c>)
 800116c:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800116e:	4b0d      	ldr	r3, [pc, #52]	@ (80011a4 <FLASH_SetErrorCode+0x98>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	4a0c      	ldr	r2, [pc, #48]	@ (80011a4 <FLASH_SetErrorCode+0x98>)
 8001174:	f023 0301 	bic.w	r3, r3, #1
 8001178:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f240 1201 	movw	r2, #257	@ 0x101
 8001180:	4293      	cmp	r3, r2
 8001182:	d106      	bne.n	8001192 <FLASH_SetErrorCode+0x86>
 8001184:	4b07      	ldr	r3, [pc, #28]	@ (80011a4 <FLASH_SetErrorCode+0x98>)
 8001186:	69db      	ldr	r3, [r3, #28]
 8001188:	4a06      	ldr	r2, [pc, #24]	@ (80011a4 <FLASH_SetErrorCode+0x98>)
 800118a:	f023 0301 	bic.w	r3, r3, #1
 800118e:	61d3      	str	r3, [r2, #28]
}  
 8001190:	e002      	b.n	8001198 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001192:	4a04      	ldr	r2, [pc, #16]	@ (80011a4 <FLASH_SetErrorCode+0x98>)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	60d3      	str	r3, [r2, #12]
}  
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40022000 	.word	0x40022000
 80011a8:	20000088 	.word	0x20000088

080011ac <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80011be:	4b2f      	ldr	r3, [pc, #188]	@ (800127c <HAL_FLASHEx_Erase+0xd0>)
 80011c0:	7e1b      	ldrb	r3, [r3, #24]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d101      	bne.n	80011ca <HAL_FLASHEx_Erase+0x1e>
 80011c6:	2302      	movs	r3, #2
 80011c8:	e053      	b.n	8001272 <HAL_FLASHEx_Erase+0xc6>
 80011ca:	4b2c      	ldr	r3, [pc, #176]	@ (800127c <HAL_FLASHEx_Erase+0xd0>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d116      	bne.n	8001206 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80011d8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80011dc:	f7ff ff50 	bl	8001080 <FLASH_WaitForLastOperation>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d141      	bne.n	800126a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 80011e6:	2001      	movs	r0, #1
 80011e8:	f000 f84c 	bl	8001284 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011ec:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80011f0:	f7ff ff46 	bl	8001080 <FLASH_WaitForLastOperation>
 80011f4:	4603      	mov	r3, r0
 80011f6:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80011f8:	4b21      	ldr	r3, [pc, #132]	@ (8001280 <HAL_FLASHEx_Erase+0xd4>)
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	4a20      	ldr	r2, [pc, #128]	@ (8001280 <HAL_FLASHEx_Erase+0xd4>)
 80011fe:	f023 0304 	bic.w	r3, r3, #4
 8001202:	6113      	str	r3, [r2, #16]
 8001204:	e031      	b.n	800126a <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001206:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800120a:	f7ff ff39 	bl	8001080 <FLASH_WaitForLastOperation>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d12a      	bne.n	800126a <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	f04f 32ff 	mov.w	r2, #4294967295
 800121a:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	e019      	b.n	8001258 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001224:	68b8      	ldr	r0, [r7, #8]
 8001226:	f000 f849 	bl	80012bc <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800122a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800122e:	f7ff ff27 	bl	8001080 <FLASH_WaitForLastOperation>
 8001232:	4603      	mov	r3, r0
 8001234:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001236:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <HAL_FLASHEx_Erase+0xd4>)
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	4a11      	ldr	r2, [pc, #68]	@ (8001280 <HAL_FLASHEx_Erase+0xd4>)
 800123c:	f023 0302 	bic.w	r3, r3, #2
 8001240:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d003      	beq.n	8001250 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	601a      	str	r2, [r3, #0]
            break;
 800124e:	e00c      	b.n	800126a <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8001256:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	029a      	lsls	r2, r3, #10
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	4413      	add	r3, r2
 8001264:	68ba      	ldr	r2, [r7, #8]
 8001266:	429a      	cmp	r2, r3
 8001268:	d3dc      	bcc.n	8001224 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800126a:	4b04      	ldr	r3, [pc, #16]	@ (800127c <HAL_FLASHEx_Erase+0xd0>)
 800126c:	2200      	movs	r2, #0
 800126e:	761a      	strb	r2, [r3, #24]

  return status;
 8001270:	7bfb      	ldrb	r3, [r7, #15]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000088 	.word	0x20000088
 8001280:	40022000 	.word	0x40022000

08001284 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800128c:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <FLASH_MassErase+0x30>)
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001292:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <FLASH_MassErase+0x34>)
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	4a08      	ldr	r2, [pc, #32]	@ (80012b8 <FLASH_MassErase+0x34>)
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800129e:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <FLASH_MassErase+0x34>)
 80012a0:	691b      	ldr	r3, [r3, #16]
 80012a2:	4a05      	ldr	r2, [pc, #20]	@ (80012b8 <FLASH_MassErase+0x34>)
 80012a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012a8:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	20000088 	.word	0x20000088
 80012b8:	40022000 	.word	0x40022000

080012bc <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80012c4:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <FLASH_PageErase+0x38>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80012ca:	4b0b      	ldr	r3, [pc, #44]	@ (80012f8 <FLASH_PageErase+0x3c>)
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	4a0a      	ldr	r2, [pc, #40]	@ (80012f8 <FLASH_PageErase+0x3c>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 80012d6:	4a08      	ldr	r2, [pc, #32]	@ (80012f8 <FLASH_PageErase+0x3c>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80012dc:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <FLASH_PageErase+0x3c>)
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	4a05      	ldr	r2, [pc, #20]	@ (80012f8 <FLASH_PageErase+0x3c>)
 80012e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012e6:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000088 	.word	0x20000088
 80012f8:	40022000 	.word	0x40022000

080012fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b08b      	sub	sp, #44	@ 0x2c
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800130a:	2300      	movs	r3, #0
 800130c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800130e:	e161      	b.n	80015d4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001310:	2201      	movs	r2, #1
 8001312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	69fa      	ldr	r2, [r7, #28]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	429a      	cmp	r2, r3
 800132a:	f040 8150 	bne.w	80015ce <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	4a97      	ldr	r2, [pc, #604]	@ (8001590 <HAL_GPIO_Init+0x294>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d05e      	beq.n	80013f6 <HAL_GPIO_Init+0xfa>
 8001338:	4a95      	ldr	r2, [pc, #596]	@ (8001590 <HAL_GPIO_Init+0x294>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d875      	bhi.n	800142a <HAL_GPIO_Init+0x12e>
 800133e:	4a95      	ldr	r2, [pc, #596]	@ (8001594 <HAL_GPIO_Init+0x298>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d058      	beq.n	80013f6 <HAL_GPIO_Init+0xfa>
 8001344:	4a93      	ldr	r2, [pc, #588]	@ (8001594 <HAL_GPIO_Init+0x298>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d86f      	bhi.n	800142a <HAL_GPIO_Init+0x12e>
 800134a:	4a93      	ldr	r2, [pc, #588]	@ (8001598 <HAL_GPIO_Init+0x29c>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d052      	beq.n	80013f6 <HAL_GPIO_Init+0xfa>
 8001350:	4a91      	ldr	r2, [pc, #580]	@ (8001598 <HAL_GPIO_Init+0x29c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d869      	bhi.n	800142a <HAL_GPIO_Init+0x12e>
 8001356:	4a91      	ldr	r2, [pc, #580]	@ (800159c <HAL_GPIO_Init+0x2a0>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d04c      	beq.n	80013f6 <HAL_GPIO_Init+0xfa>
 800135c:	4a8f      	ldr	r2, [pc, #572]	@ (800159c <HAL_GPIO_Init+0x2a0>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d863      	bhi.n	800142a <HAL_GPIO_Init+0x12e>
 8001362:	4a8f      	ldr	r2, [pc, #572]	@ (80015a0 <HAL_GPIO_Init+0x2a4>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d046      	beq.n	80013f6 <HAL_GPIO_Init+0xfa>
 8001368:	4a8d      	ldr	r2, [pc, #564]	@ (80015a0 <HAL_GPIO_Init+0x2a4>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d85d      	bhi.n	800142a <HAL_GPIO_Init+0x12e>
 800136e:	2b12      	cmp	r3, #18
 8001370:	d82a      	bhi.n	80013c8 <HAL_GPIO_Init+0xcc>
 8001372:	2b12      	cmp	r3, #18
 8001374:	d859      	bhi.n	800142a <HAL_GPIO_Init+0x12e>
 8001376:	a201      	add	r2, pc, #4	@ (adr r2, 800137c <HAL_GPIO_Init+0x80>)
 8001378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800137c:	080013f7 	.word	0x080013f7
 8001380:	080013d1 	.word	0x080013d1
 8001384:	080013e3 	.word	0x080013e3
 8001388:	08001425 	.word	0x08001425
 800138c:	0800142b 	.word	0x0800142b
 8001390:	0800142b 	.word	0x0800142b
 8001394:	0800142b 	.word	0x0800142b
 8001398:	0800142b 	.word	0x0800142b
 800139c:	0800142b 	.word	0x0800142b
 80013a0:	0800142b 	.word	0x0800142b
 80013a4:	0800142b 	.word	0x0800142b
 80013a8:	0800142b 	.word	0x0800142b
 80013ac:	0800142b 	.word	0x0800142b
 80013b0:	0800142b 	.word	0x0800142b
 80013b4:	0800142b 	.word	0x0800142b
 80013b8:	0800142b 	.word	0x0800142b
 80013bc:	0800142b 	.word	0x0800142b
 80013c0:	080013d9 	.word	0x080013d9
 80013c4:	080013ed 	.word	0x080013ed
 80013c8:	4a76      	ldr	r2, [pc, #472]	@ (80015a4 <HAL_GPIO_Init+0x2a8>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d013      	beq.n	80013f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013ce:	e02c      	b.n	800142a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	623b      	str	r3, [r7, #32]
          break;
 80013d6:	e029      	b.n	800142c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	3304      	adds	r3, #4
 80013de:	623b      	str	r3, [r7, #32]
          break;
 80013e0:	e024      	b.n	800142c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	3308      	adds	r3, #8
 80013e8:	623b      	str	r3, [r7, #32]
          break;
 80013ea:	e01f      	b.n	800142c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	68db      	ldr	r3, [r3, #12]
 80013f0:	330c      	adds	r3, #12
 80013f2:	623b      	str	r3, [r7, #32]
          break;
 80013f4:	e01a      	b.n	800142c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d102      	bne.n	8001404 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013fe:	2304      	movs	r3, #4
 8001400:	623b      	str	r3, [r7, #32]
          break;
 8001402:	e013      	b.n	800142c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d105      	bne.n	8001418 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800140c:	2308      	movs	r3, #8
 800140e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69fa      	ldr	r2, [r7, #28]
 8001414:	611a      	str	r2, [r3, #16]
          break;
 8001416:	e009      	b.n	800142c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001418:	2308      	movs	r3, #8
 800141a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69fa      	ldr	r2, [r7, #28]
 8001420:	615a      	str	r2, [r3, #20]
          break;
 8001422:	e003      	b.n	800142c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001424:	2300      	movs	r3, #0
 8001426:	623b      	str	r3, [r7, #32]
          break;
 8001428:	e000      	b.n	800142c <HAL_GPIO_Init+0x130>
          break;
 800142a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	2bff      	cmp	r3, #255	@ 0xff
 8001430:	d801      	bhi.n	8001436 <HAL_GPIO_Init+0x13a>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	e001      	b.n	800143a <HAL_GPIO_Init+0x13e>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3304      	adds	r3, #4
 800143a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	2bff      	cmp	r3, #255	@ 0xff
 8001440:	d802      	bhi.n	8001448 <HAL_GPIO_Init+0x14c>
 8001442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	e002      	b.n	800144e <HAL_GPIO_Init+0x152>
 8001448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800144a:	3b08      	subs	r3, #8
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	210f      	movs	r1, #15
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	fa01 f303 	lsl.w	r3, r1, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	401a      	ands	r2, r3
 8001460:	6a39      	ldr	r1, [r7, #32]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	fa01 f303 	lsl.w	r3, r1, r3
 8001468:	431a      	orrs	r2, r3
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 80a9 	beq.w	80015ce <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800147c:	4b4a      	ldr	r3, [pc, #296]	@ (80015a8 <HAL_GPIO_Init+0x2ac>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	4a49      	ldr	r2, [pc, #292]	@ (80015a8 <HAL_GPIO_Init+0x2ac>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	6193      	str	r3, [r2, #24]
 8001488:	4b47      	ldr	r3, [pc, #284]	@ (80015a8 <HAL_GPIO_Init+0x2ac>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001494:	4a45      	ldr	r2, [pc, #276]	@ (80015ac <HAL_GPIO_Init+0x2b0>)
 8001496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001498:	089b      	lsrs	r3, r3, #2
 800149a:	3302      	adds	r3, #2
 800149c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a4:	f003 0303 	and.w	r3, r3, #3
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	220f      	movs	r2, #15
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	4013      	ands	r3, r2
 80014b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4a3d      	ldr	r2, [pc, #244]	@ (80015b0 <HAL_GPIO_Init+0x2b4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d00d      	beq.n	80014dc <HAL_GPIO_Init+0x1e0>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a3c      	ldr	r2, [pc, #240]	@ (80015b4 <HAL_GPIO_Init+0x2b8>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d007      	beq.n	80014d8 <HAL_GPIO_Init+0x1dc>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a3b      	ldr	r2, [pc, #236]	@ (80015b8 <HAL_GPIO_Init+0x2bc>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d101      	bne.n	80014d4 <HAL_GPIO_Init+0x1d8>
 80014d0:	2302      	movs	r3, #2
 80014d2:	e004      	b.n	80014de <HAL_GPIO_Init+0x1e2>
 80014d4:	2303      	movs	r3, #3
 80014d6:	e002      	b.n	80014de <HAL_GPIO_Init+0x1e2>
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <HAL_GPIO_Init+0x1e2>
 80014dc:	2300      	movs	r3, #0
 80014de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014e0:	f002 0203 	and.w	r2, r2, #3
 80014e4:	0092      	lsls	r2, r2, #2
 80014e6:	4093      	lsls	r3, r2
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	4313      	orrs	r3, r2
 80014ec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014ee:	492f      	ldr	r1, [pc, #188]	@ (80015ac <HAL_GPIO_Init+0x2b0>)
 80014f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f2:	089b      	lsrs	r3, r3, #2
 80014f4:	3302      	adds	r3, #2
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d006      	beq.n	8001516 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001508:	4b2c      	ldr	r3, [pc, #176]	@ (80015bc <HAL_GPIO_Init+0x2c0>)
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	492b      	ldr	r1, [pc, #172]	@ (80015bc <HAL_GPIO_Init+0x2c0>)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	4313      	orrs	r3, r2
 8001512:	608b      	str	r3, [r1, #8]
 8001514:	e006      	b.n	8001524 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001516:	4b29      	ldr	r3, [pc, #164]	@ (80015bc <HAL_GPIO_Init+0x2c0>)
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	43db      	mvns	r3, r3
 800151e:	4927      	ldr	r1, [pc, #156]	@ (80015bc <HAL_GPIO_Init+0x2c0>)
 8001520:	4013      	ands	r3, r2
 8001522:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d006      	beq.n	800153e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001530:	4b22      	ldr	r3, [pc, #136]	@ (80015bc <HAL_GPIO_Init+0x2c0>)
 8001532:	68da      	ldr	r2, [r3, #12]
 8001534:	4921      	ldr	r1, [pc, #132]	@ (80015bc <HAL_GPIO_Init+0x2c0>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	4313      	orrs	r3, r2
 800153a:	60cb      	str	r3, [r1, #12]
 800153c:	e006      	b.n	800154c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800153e:	4b1f      	ldr	r3, [pc, #124]	@ (80015bc <HAL_GPIO_Init+0x2c0>)
 8001540:	68da      	ldr	r2, [r3, #12]
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	43db      	mvns	r3, r3
 8001546:	491d      	ldr	r1, [pc, #116]	@ (80015bc <HAL_GPIO_Init+0x2c0>)
 8001548:	4013      	ands	r3, r2
 800154a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d006      	beq.n	8001566 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001558:	4b18      	ldr	r3, [pc, #96]	@ (80015bc <HAL_GPIO_Init+0x2c0>)
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	4917      	ldr	r1, [pc, #92]	@ (80015bc <HAL_GPIO_Init+0x2c0>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	4313      	orrs	r3, r2
 8001562:	604b      	str	r3, [r1, #4]
 8001564:	e006      	b.n	8001574 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001566:	4b15      	ldr	r3, [pc, #84]	@ (80015bc <HAL_GPIO_Init+0x2c0>)
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	43db      	mvns	r3, r3
 800156e:	4913      	ldr	r1, [pc, #76]	@ (80015bc <HAL_GPIO_Init+0x2c0>)
 8001570:	4013      	ands	r3, r2
 8001572:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d01f      	beq.n	80015c0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001580:	4b0e      	ldr	r3, [pc, #56]	@ (80015bc <HAL_GPIO_Init+0x2c0>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	490d      	ldr	r1, [pc, #52]	@ (80015bc <HAL_GPIO_Init+0x2c0>)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	4313      	orrs	r3, r2
 800158a:	600b      	str	r3, [r1, #0]
 800158c:	e01f      	b.n	80015ce <HAL_GPIO_Init+0x2d2>
 800158e:	bf00      	nop
 8001590:	10320000 	.word	0x10320000
 8001594:	10310000 	.word	0x10310000
 8001598:	10220000 	.word	0x10220000
 800159c:	10210000 	.word	0x10210000
 80015a0:	10120000 	.word	0x10120000
 80015a4:	10110000 	.word	0x10110000
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40010000 	.word	0x40010000
 80015b0:	40010800 	.word	0x40010800
 80015b4:	40010c00 	.word	0x40010c00
 80015b8:	40011000 	.word	0x40011000
 80015bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80015c0:	4b0b      	ldr	r3, [pc, #44]	@ (80015f0 <HAL_GPIO_Init+0x2f4>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	4909      	ldr	r1, [pc, #36]	@ (80015f0 <HAL_GPIO_Init+0x2f4>)
 80015ca:	4013      	ands	r3, r2
 80015cc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80015ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d0:	3301      	adds	r3, #1
 80015d2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015da:	fa22 f303 	lsr.w	r3, r2, r3
 80015de:	2b00      	cmp	r3, #0
 80015e0:	f47f ae96 	bne.w	8001310 <HAL_GPIO_Init+0x14>
  }
}
 80015e4:	bf00      	nop
 80015e6:	bf00      	nop
 80015e8:	372c      	adds	r7, #44	@ 0x2c
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	40010400 	.word	0x40010400

080015f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	807b      	strh	r3, [r7, #2]
 8001600:	4613      	mov	r3, r2
 8001602:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001604:	787b      	ldrb	r3, [r7, #1]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800160a:	887a      	ldrh	r2, [r7, #2]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001610:	e003      	b.n	800161a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001612:	887b      	ldrh	r3, [r7, #2]
 8001614:	041a      	lsls	r2, r3, #16
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	611a      	str	r2, [r3, #16]
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	460b      	mov	r3, r1
 800162e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001636:	887a      	ldrh	r2, [r7, #2]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4013      	ands	r3, r2
 800163c:	041a      	lsls	r2, r3, #16
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	43d9      	mvns	r1, r3
 8001642:	887b      	ldrh	r3, [r7, #2]
 8001644:	400b      	ands	r3, r1
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	611a      	str	r2, [r3, #16]
}
 800164c:	bf00      	nop
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
	...

08001658 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e272      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 8087 	beq.w	8001786 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001678:	4b92      	ldr	r3, [pc, #584]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 030c 	and.w	r3, r3, #12
 8001680:	2b04      	cmp	r3, #4
 8001682:	d00c      	beq.n	800169e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001684:	4b8f      	ldr	r3, [pc, #572]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 030c 	and.w	r3, r3, #12
 800168c:	2b08      	cmp	r3, #8
 800168e:	d112      	bne.n	80016b6 <HAL_RCC_OscConfig+0x5e>
 8001690:	4b8c      	ldr	r3, [pc, #560]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001698:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800169c:	d10b      	bne.n	80016b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800169e:	4b89      	ldr	r3, [pc, #548]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d06c      	beq.n	8001784 <HAL_RCC_OscConfig+0x12c>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d168      	bne.n	8001784 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e24c      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016be:	d106      	bne.n	80016ce <HAL_RCC_OscConfig+0x76>
 80016c0:	4b80      	ldr	r3, [pc, #512]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a7f      	ldr	r2, [pc, #508]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 80016c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	e02e      	b.n	800172c <HAL_RCC_OscConfig+0xd4>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d10c      	bne.n	80016f0 <HAL_RCC_OscConfig+0x98>
 80016d6:	4b7b      	ldr	r3, [pc, #492]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a7a      	ldr	r2, [pc, #488]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	4b78      	ldr	r3, [pc, #480]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a77      	ldr	r2, [pc, #476]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 80016e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	e01d      	b.n	800172c <HAL_RCC_OscConfig+0xd4>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016f8:	d10c      	bne.n	8001714 <HAL_RCC_OscConfig+0xbc>
 80016fa:	4b72      	ldr	r3, [pc, #456]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a71      	ldr	r2, [pc, #452]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 8001700:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	4b6f      	ldr	r3, [pc, #444]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a6e      	ldr	r2, [pc, #440]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 800170c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001710:	6013      	str	r3, [r2, #0]
 8001712:	e00b      	b.n	800172c <HAL_RCC_OscConfig+0xd4>
 8001714:	4b6b      	ldr	r3, [pc, #428]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a6a      	ldr	r2, [pc, #424]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 800171a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b68      	ldr	r3, [pc, #416]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a67      	ldr	r2, [pc, #412]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 8001726:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800172a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d013      	beq.n	800175c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001734:	f7ff fa6e 	bl	8000c14 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800173c:	f7ff fa6a 	bl	8000c14 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b64      	cmp	r3, #100	@ 0x64
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e200      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174e:	4b5d      	ldr	r3, [pc, #372]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f0      	beq.n	800173c <HAL_RCC_OscConfig+0xe4>
 800175a:	e014      	b.n	8001786 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175c:	f7ff fa5a 	bl	8000c14 <HAL_GetTick>
 8001760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001764:	f7ff fa56 	bl	8000c14 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b64      	cmp	r3, #100	@ 0x64
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e1ec      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001776:	4b53      	ldr	r3, [pc, #332]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d1f0      	bne.n	8001764 <HAL_RCC_OscConfig+0x10c>
 8001782:	e000      	b.n	8001786 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d063      	beq.n	800185a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001792:	4b4c      	ldr	r3, [pc, #304]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00b      	beq.n	80017b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800179e:	4b49      	ldr	r3, [pc, #292]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 030c 	and.w	r3, r3, #12
 80017a6:	2b08      	cmp	r3, #8
 80017a8:	d11c      	bne.n	80017e4 <HAL_RCC_OscConfig+0x18c>
 80017aa:	4b46      	ldr	r3, [pc, #280]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d116      	bne.n	80017e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b6:	4b43      	ldr	r3, [pc, #268]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d005      	beq.n	80017ce <HAL_RCC_OscConfig+0x176>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d001      	beq.n	80017ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e1c0      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ce:	4b3d      	ldr	r3, [pc, #244]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	00db      	lsls	r3, r3, #3
 80017dc:	4939      	ldr	r1, [pc, #228]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e2:	e03a      	b.n	800185a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d020      	beq.n	800182e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017ec:	4b36      	ldr	r3, [pc, #216]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f2:	f7ff fa0f 	bl	8000c14 <HAL_GetTick>
 80017f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017fa:	f7ff fa0b 	bl	8000c14 <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e1a1      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180c:	4b2d      	ldr	r3, [pc, #180]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0302 	and.w	r3, r3, #2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d0f0      	beq.n	80017fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001818:	4b2a      	ldr	r3, [pc, #168]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	4927      	ldr	r1, [pc, #156]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 8001828:	4313      	orrs	r3, r2
 800182a:	600b      	str	r3, [r1, #0]
 800182c:	e015      	b.n	800185a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800182e:	4b26      	ldr	r3, [pc, #152]	@ (80018c8 <HAL_RCC_OscConfig+0x270>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7ff f9ee 	bl	8000c14 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800183c:	f7ff f9ea 	bl	8000c14 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e180      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184e:	4b1d      	ldr	r3, [pc, #116]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b00      	cmp	r3, #0
 8001864:	d03a      	beq.n	80018dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d019      	beq.n	80018a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800186e:	4b17      	ldr	r3, [pc, #92]	@ (80018cc <HAL_RCC_OscConfig+0x274>)
 8001870:	2201      	movs	r2, #1
 8001872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001874:	f7ff f9ce 	bl	8000c14 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800187c:	f7ff f9ca 	bl	8000c14 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e160      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800188e:	4b0d      	ldr	r3, [pc, #52]	@ (80018c4 <HAL_RCC_OscConfig+0x26c>)
 8001890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f0      	beq.n	800187c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800189a:	2001      	movs	r0, #1
 800189c:	f000 face 	bl	8001e3c <RCC_Delay>
 80018a0:	e01c      	b.n	80018dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018a2:	4b0a      	ldr	r3, [pc, #40]	@ (80018cc <HAL_RCC_OscConfig+0x274>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a8:	f7ff f9b4 	bl	8000c14 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ae:	e00f      	b.n	80018d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018b0:	f7ff f9b0 	bl	8000c14 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d908      	bls.n	80018d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e146      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
 80018c2:	bf00      	nop
 80018c4:	40021000 	.word	0x40021000
 80018c8:	42420000 	.word	0x42420000
 80018cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d0:	4b92      	ldr	r3, [pc, #584]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80018d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1e9      	bne.n	80018b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 80a6 	beq.w	8001a36 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ea:	2300      	movs	r3, #0
 80018ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ee:	4b8b      	ldr	r3, [pc, #556]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10d      	bne.n	8001916 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	4b88      	ldr	r3, [pc, #544]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	4a87      	ldr	r2, [pc, #540]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001904:	61d3      	str	r3, [r2, #28]
 8001906:	4b85      	ldr	r3, [pc, #532]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001908:	69db      	ldr	r3, [r3, #28]
 800190a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001912:	2301      	movs	r3, #1
 8001914:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001916:	4b82      	ldr	r3, [pc, #520]	@ (8001b20 <HAL_RCC_OscConfig+0x4c8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800191e:	2b00      	cmp	r3, #0
 8001920:	d118      	bne.n	8001954 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001922:	4b7f      	ldr	r3, [pc, #508]	@ (8001b20 <HAL_RCC_OscConfig+0x4c8>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a7e      	ldr	r2, [pc, #504]	@ (8001b20 <HAL_RCC_OscConfig+0x4c8>)
 8001928:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800192c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800192e:	f7ff f971 	bl	8000c14 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001936:	f7ff f96d 	bl	8000c14 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b64      	cmp	r3, #100	@ 0x64
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e103      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001948:	4b75      	ldr	r3, [pc, #468]	@ (8001b20 <HAL_RCC_OscConfig+0x4c8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0f0      	beq.n	8001936 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d106      	bne.n	800196a <HAL_RCC_OscConfig+0x312>
 800195c:	4b6f      	ldr	r3, [pc, #444]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	4a6e      	ldr	r2, [pc, #440]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6213      	str	r3, [r2, #32]
 8001968:	e02d      	b.n	80019c6 <HAL_RCC_OscConfig+0x36e>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d10c      	bne.n	800198c <HAL_RCC_OscConfig+0x334>
 8001972:	4b6a      	ldr	r3, [pc, #424]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	4a69      	ldr	r2, [pc, #420]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001978:	f023 0301 	bic.w	r3, r3, #1
 800197c:	6213      	str	r3, [r2, #32]
 800197e:	4b67      	ldr	r3, [pc, #412]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	4a66      	ldr	r2, [pc, #408]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001984:	f023 0304 	bic.w	r3, r3, #4
 8001988:	6213      	str	r3, [r2, #32]
 800198a:	e01c      	b.n	80019c6 <HAL_RCC_OscConfig+0x36e>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	2b05      	cmp	r3, #5
 8001992:	d10c      	bne.n	80019ae <HAL_RCC_OscConfig+0x356>
 8001994:	4b61      	ldr	r3, [pc, #388]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	4a60      	ldr	r2, [pc, #384]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 800199a:	f043 0304 	orr.w	r3, r3, #4
 800199e:	6213      	str	r3, [r2, #32]
 80019a0:	4b5e      	ldr	r3, [pc, #376]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	4a5d      	ldr	r2, [pc, #372]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	6213      	str	r3, [r2, #32]
 80019ac:	e00b      	b.n	80019c6 <HAL_RCC_OscConfig+0x36e>
 80019ae:	4b5b      	ldr	r3, [pc, #364]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	6a1b      	ldr	r3, [r3, #32]
 80019b2:	4a5a      	ldr	r2, [pc, #360]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80019b4:	f023 0301 	bic.w	r3, r3, #1
 80019b8:	6213      	str	r3, [r2, #32]
 80019ba:	4b58      	ldr	r3, [pc, #352]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	4a57      	ldr	r2, [pc, #348]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80019c0:	f023 0304 	bic.w	r3, r3, #4
 80019c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d015      	beq.n	80019fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ce:	f7ff f921 	bl	8000c14 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019d4:	e00a      	b.n	80019ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d6:	f7ff f91d 	bl	8000c14 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e0b1      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ec:	4b4b      	ldr	r3, [pc, #300]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 80019ee:	6a1b      	ldr	r3, [r3, #32]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d0ee      	beq.n	80019d6 <HAL_RCC_OscConfig+0x37e>
 80019f8:	e014      	b.n	8001a24 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fa:	f7ff f90b 	bl	8000c14 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a00:	e00a      	b.n	8001a18 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a02:	f7ff f907 	bl	8000c14 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e09b      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a18:	4b40      	ldr	r3, [pc, #256]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1ee      	bne.n	8001a02 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a24:	7dfb      	ldrb	r3, [r7, #23]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d105      	bne.n	8001a36 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a2a:	4b3c      	ldr	r3, [pc, #240]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	4a3b      	ldr	r2, [pc, #236]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001a30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a34:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69db      	ldr	r3, [r3, #28]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 8087 	beq.w	8001b4e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a40:	4b36      	ldr	r3, [pc, #216]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 030c 	and.w	r3, r3, #12
 8001a48:	2b08      	cmp	r3, #8
 8001a4a:	d061      	beq.n	8001b10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d146      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a54:	4b33      	ldr	r3, [pc, #204]	@ (8001b24 <HAL_RCC_OscConfig+0x4cc>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5a:	f7ff f8db 	bl	8000c14 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a62:	f7ff f8d7 	bl	8000c14 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e06d      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a74:	4b29      	ldr	r3, [pc, #164]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1f0      	bne.n	8001a62 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a88:	d108      	bne.n	8001a9c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a8a:	4b24      	ldr	r3, [pc, #144]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	4921      	ldr	r1, [pc, #132]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a19      	ldr	r1, [r3, #32]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aac:	430b      	orrs	r3, r1
 8001aae:	491b      	ldr	r1, [pc, #108]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b24 <HAL_RCC_OscConfig+0x4cc>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aba:	f7ff f8ab 	bl	8000c14 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac2:	f7ff f8a7 	bl	8000c14 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e03d      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ad4:	4b11      	ldr	r3, [pc, #68]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0f0      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x46a>
 8001ae0:	e035      	b.n	8001b4e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ae2:	4b10      	ldr	r3, [pc, #64]	@ (8001b24 <HAL_RCC_OscConfig+0x4cc>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff f894 	bl	8000c14 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af0:	f7ff f890 	bl	8000c14 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e026      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b02:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <HAL_RCC_OscConfig+0x4c4>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0x498>
 8001b0e:	e01e      	b.n	8001b4e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	69db      	ldr	r3, [r3, #28]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d107      	bne.n	8001b28 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e019      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40007000 	.word	0x40007000
 8001b24:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b28:	4b0b      	ldr	r3, [pc, #44]	@ (8001b58 <HAL_RCC_OscConfig+0x500>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d106      	bne.n	8001b4a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d001      	beq.n	8001b4e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b4e:	2300      	movs	r3, #0
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40021000 	.word	0x40021000

08001b5c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0d0      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b70:	4b6a      	ldr	r3, [pc, #424]	@ (8001d1c <HAL_RCC_ClockConfig+0x1c0>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d910      	bls.n	8001ba0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	4b67      	ldr	r3, [pc, #412]	@ (8001d1c <HAL_RCC_ClockConfig+0x1c0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 0207 	bic.w	r2, r3, #7
 8001b86:	4965      	ldr	r1, [pc, #404]	@ (8001d1c <HAL_RCC_ClockConfig+0x1c0>)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b63      	ldr	r3, [pc, #396]	@ (8001d1c <HAL_RCC_ClockConfig+0x1c0>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e0b8      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d020      	beq.n	8001bee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0304 	and.w	r3, r3, #4
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d005      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bb8:	4b59      	ldr	r3, [pc, #356]	@ (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	4a58      	ldr	r2, [pc, #352]	@ (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bbe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001bc2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0308 	and.w	r3, r3, #8
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bd0:	4b53      	ldr	r3, [pc, #332]	@ (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	4a52      	ldr	r2, [pc, #328]	@ (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001bda:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bdc:	4b50      	ldr	r3, [pc, #320]	@ (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	494d      	ldr	r1, [pc, #308]	@ (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d040      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d107      	bne.n	8001c12 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c02:	4b47      	ldr	r3, [pc, #284]	@ (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d115      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e07f      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d107      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c1a:	4b41      	ldr	r3, [pc, #260]	@ (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d109      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e073      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2a:	4b3d      	ldr	r3, [pc, #244]	@ (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e06b      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c3a:	4b39      	ldr	r3, [pc, #228]	@ (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f023 0203 	bic.w	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	4936      	ldr	r1, [pc, #216]	@ (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c4c:	f7fe ffe2 	bl	8000c14 <HAL_GetTick>
 8001c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c52:	e00a      	b.n	8001c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c54:	f7fe ffde 	bl	8000c14 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e053      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 020c 	and.w	r2, r3, #12
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d1eb      	bne.n	8001c54 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c7c:	4b27      	ldr	r3, [pc, #156]	@ (8001d1c <HAL_RCC_ClockConfig+0x1c0>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d210      	bcs.n	8001cac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8a:	4b24      	ldr	r3, [pc, #144]	@ (8001d1c <HAL_RCC_ClockConfig+0x1c0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f023 0207 	bic.w	r2, r3, #7
 8001c92:	4922      	ldr	r1, [pc, #136]	@ (8001d1c <HAL_RCC_ClockConfig+0x1c0>)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9a:	4b20      	ldr	r3, [pc, #128]	@ (8001d1c <HAL_RCC_ClockConfig+0x1c0>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0307 	and.w	r3, r3, #7
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d001      	beq.n	8001cac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e032      	b.n	8001d12 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0304 	and.w	r3, r3, #4
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cb8:	4b19      	ldr	r3, [pc, #100]	@ (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	4916      	ldr	r1, [pc, #88]	@ (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d009      	beq.n	8001cea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001cd6:	4b12      	ldr	r3, [pc, #72]	@ (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	691b      	ldr	r3, [r3, #16]
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	490e      	ldr	r1, [pc, #56]	@ (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cea:	f000 f821 	bl	8001d30 <HAL_RCC_GetSysClockFreq>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001d20 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	091b      	lsrs	r3, r3, #4
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	490a      	ldr	r1, [pc, #40]	@ (8001d24 <HAL_RCC_ClockConfig+0x1c8>)
 8001cfc:	5ccb      	ldrb	r3, [r1, r3]
 8001cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8001d02:	4a09      	ldr	r2, [pc, #36]	@ (8001d28 <HAL_RCC_ClockConfig+0x1cc>)
 8001d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d06:	4b09      	ldr	r3, [pc, #36]	@ (8001d2c <HAL_RCC_ClockConfig+0x1d0>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe ff40 	bl	8000b90 <HAL_InitTick>

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40022000 	.word	0x40022000
 8001d20:	40021000 	.word	0x40021000
 8001d24:	080027a4 	.word	0x080027a4
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	20000008 	.word	0x20000008

08001d30 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b087      	sub	sp, #28
 8001d34:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	2300      	movs	r3, #0
 8001d44:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d002      	beq.n	8001d60 <HAL_RCC_GetSysClockFreq+0x30>
 8001d5a:	2b08      	cmp	r3, #8
 8001d5c:	d003      	beq.n	8001d66 <HAL_RCC_GetSysClockFreq+0x36>
 8001d5e:	e027      	b.n	8001db0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d60:	4b19      	ldr	r3, [pc, #100]	@ (8001dc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d62:	613b      	str	r3, [r7, #16]
      break;
 8001d64:	e027      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	0c9b      	lsrs	r3, r3, #18
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	4a17      	ldr	r2, [pc, #92]	@ (8001dcc <HAL_RCC_GetSysClockFreq+0x9c>)
 8001d70:	5cd3      	ldrb	r3, [r2, r3]
 8001d72:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d010      	beq.n	8001da0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d7e:	4b11      	ldr	r3, [pc, #68]	@ (8001dc4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	0c5b      	lsrs	r3, r3, #17
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	4a11      	ldr	r2, [pc, #68]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d8a:	5cd3      	ldrb	r3, [r2, r3]
 8001d8c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a0d      	ldr	r2, [pc, #52]	@ (8001dc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d92:	fb03 f202 	mul.w	r2, r3, r2
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	e004      	b.n	8001daa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a0c      	ldr	r2, [pc, #48]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001da4:	fb02 f303 	mul.w	r3, r2, r3
 8001da8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	613b      	str	r3, [r7, #16]
      break;
 8001dae:	e002      	b.n	8001db6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001db0:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001db2:	613b      	str	r3, [r7, #16]
      break;
 8001db4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001db6:	693b      	ldr	r3, [r7, #16]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	371c      	adds	r7, #28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	007a1200 	.word	0x007a1200
 8001dcc:	080027bc 	.word	0x080027bc
 8001dd0:	080027cc 	.word	0x080027cc
 8001dd4:	003d0900 	.word	0x003d0900

08001dd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ddc:	4b02      	ldr	r3, [pc, #8]	@ (8001de8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bc80      	pop	{r7}
 8001de6:	4770      	bx	lr
 8001de8:	20000000 	.word	0x20000000

08001dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001df0:	f7ff fff2 	bl	8001dd8 <HAL_RCC_GetHCLKFreq>
 8001df4:	4602      	mov	r2, r0
 8001df6:	4b05      	ldr	r3, [pc, #20]	@ (8001e0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	0a1b      	lsrs	r3, r3, #8
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	4903      	ldr	r1, [pc, #12]	@ (8001e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e02:	5ccb      	ldrb	r3, [r1, r3]
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	080027b4 	.word	0x080027b4

08001e14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e18:	f7ff ffde 	bl	8001dd8 <HAL_RCC_GetHCLKFreq>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	4b05      	ldr	r3, [pc, #20]	@ (8001e34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	0adb      	lsrs	r3, r3, #11
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	4903      	ldr	r1, [pc, #12]	@ (8001e38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e2a:	5ccb      	ldrb	r3, [r1, r3]
 8001e2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40021000 	.word	0x40021000
 8001e38:	080027b4 	.word	0x080027b4

08001e3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e44:	4b0a      	ldr	r3, [pc, #40]	@ (8001e70 <RCC_Delay+0x34>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a0a      	ldr	r2, [pc, #40]	@ (8001e74 <RCC_Delay+0x38>)
 8001e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4e:	0a5b      	lsrs	r3, r3, #9
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	fb02 f303 	mul.w	r3, r2, r3
 8001e56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e58:	bf00      	nop
  }
  while (Delay --);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	1e5a      	subs	r2, r3, #1
 8001e5e:	60fa      	str	r2, [r7, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f9      	bne.n	8001e58 <RCC_Delay+0x1c>
}
 8001e64:	bf00      	nop
 8001e66:	bf00      	nop
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bc80      	pop	{r7}
 8001e6e:	4770      	bx	lr
 8001e70:	20000000 	.word	0x20000000
 8001e74:	10624dd3 	.word	0x10624dd3

08001e78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e042      	b.n	8001f10 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d106      	bne.n	8001ea4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7fe fb4e 	bl	8000540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2224      	movs	r2, #36	@ 0x24
 8001ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001eba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 fb11 	bl	80024e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ed0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	695a      	ldr	r2, [r3, #20]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001ee0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	68da      	ldr	r2, [r3, #12]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001ef0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2220      	movs	r2, #32
 8001efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2220      	movs	r2, #32
 8001f04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b08a      	sub	sp, #40	@ 0x28
 8001f1c:	af02      	add	r7, sp, #8
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	603b      	str	r3, [r7, #0]
 8001f24:	4613      	mov	r3, r2
 8001f26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	2b20      	cmp	r3, #32
 8001f36:	d175      	bne.n	8002024 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d002      	beq.n	8001f44 <HAL_UART_Transmit+0x2c>
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e06e      	b.n	8002026 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2221      	movs	r2, #33	@ 0x21
 8001f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f56:	f7fe fe5d 	bl	8000c14 <HAL_GetTick>
 8001f5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	88fa      	ldrh	r2, [r7, #6]
 8001f60:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	88fa      	ldrh	r2, [r7, #6]
 8001f66:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f70:	d108      	bne.n	8001f84 <HAL_UART_Transmit+0x6c>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d104      	bne.n	8001f84 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	e003      	b.n	8001f8c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001f8c:	e02e      	b.n	8001fec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	2200      	movs	r2, #0
 8001f96:	2180      	movs	r1, #128	@ 0x80
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f000 f9e7 	bl	800236c <UART_WaitOnFlagUntilTimeout>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e03a      	b.n	8002026 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10b      	bne.n	8001fce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	881b      	ldrh	r3, [r3, #0]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	3302      	adds	r3, #2
 8001fca:	61bb      	str	r3, [r7, #24]
 8001fcc:	e007      	b.n	8001fde <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	781a      	ldrb	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1cb      	bne.n	8001f8e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2140      	movs	r1, #64	@ 0x40
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f000 f9b3 	bl	800236c <UART_WaitOnFlagUntilTimeout>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d005      	beq.n	8002018 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e006      	b.n	8002026 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2220      	movs	r2, #32
 800201c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002020:	2300      	movs	r3, #0
 8002022:	e000      	b.n	8002026 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002024:	2302      	movs	r3, #2
  }
}
 8002026:	4618      	mov	r0, r3
 8002028:	3720      	adds	r7, #32
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}

0800202e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b08a      	sub	sp, #40	@ 0x28
 8002032:	af02      	add	r7, sp, #8
 8002034:	60f8      	str	r0, [r7, #12]
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	603b      	str	r3, [r7, #0]
 800203a:	4613      	mov	r3, r2
 800203c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b20      	cmp	r3, #32
 800204c:	f040 8081 	bne.w	8002152 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d002      	beq.n	800205c <HAL_UART_Receive+0x2e>
 8002056:	88fb      	ldrh	r3, [r7, #6]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e079      	b.n	8002154 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2222      	movs	r2, #34	@ 0x22
 800206a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002074:	f7fe fdce 	bl	8000c14 <HAL_GetTick>
 8002078:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	88fa      	ldrh	r2, [r7, #6]
 800207e:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	88fa      	ldrh	r2, [r7, #6]
 8002084:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800208e:	d108      	bne.n	80020a2 <HAL_UART_Receive+0x74>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d104      	bne.n	80020a2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002098:	2300      	movs	r3, #0
 800209a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	61bb      	str	r3, [r7, #24]
 80020a0:	e003      	b.n	80020aa <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80020aa:	e047      	b.n	800213c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	9300      	str	r3, [sp, #0]
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	2200      	movs	r2, #0
 80020b4:	2120      	movs	r1, #32
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 f958 	bl	800236c <UART_WaitOnFlagUntilTimeout>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d005      	beq.n	80020ce <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2220      	movs	r2, #32
 80020c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e042      	b.n	8002154 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10c      	bne.n	80020ee <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	b29b      	uxth	r3, r3
 80020dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	3302      	adds	r3, #2
 80020ea:	61bb      	str	r3, [r7, #24]
 80020ec:	e01f      	b.n	800212e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80020f6:	d007      	beq.n	8002108 <HAL_UART_Receive+0xda>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10a      	bne.n	8002116 <HAL_UART_Receive+0xe8>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d106      	bne.n	8002116 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	b2da      	uxtb	r2, r3
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	701a      	strb	r2, [r3, #0]
 8002114:	e008      	b.n	8002128 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	b2db      	uxtb	r3, r3
 800211e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002122:	b2da      	uxtb	r2, r3
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	3301      	adds	r3, #1
 800212c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002132:	b29b      	uxth	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002140:	b29b      	uxth	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1b2      	bne.n	80020ac <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2220      	movs	r2, #32
 800214a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800214e:	2300      	movs	r3, #0
 8002150:	e000      	b.n	8002154 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8002152:	2302      	movs	r3, #2
  }
}
 8002154:	4618      	mov	r0, r3
 8002156:	3720      	adds	r7, #32
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b0a0      	sub	sp, #128	@ 0x80
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	330c      	adds	r3, #12
 800216a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800216c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800216e:	e853 3f00 	ldrex	r3, [r3]
 8002172:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8002174:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002176:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 800217a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	330c      	adds	r3, #12
 8002182:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8002184:	66ba      	str	r2, [r7, #104]	@ 0x68
 8002186:	667b      	str	r3, [r7, #100]	@ 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002188:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800218a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800218c:	e841 2300 	strex	r3, r2, [r1]
 8002190:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8002192:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1e5      	bne.n	8002164 <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	3314      	adds	r3, #20
 800219e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021a2:	e853 3f00 	ldrex	r3, [r3]
 80021a6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80021a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021aa:	f023 0301 	bic.w	r3, r3, #1
 80021ae:	67bb      	str	r3, [r7, #120]	@ 0x78
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	3314      	adds	r3, #20
 80021b6:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80021b8:	657a      	str	r2, [r7, #84]	@ 0x54
 80021ba:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021bc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80021be:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80021c0:	e841 2300 	strex	r3, r2, [r1]
 80021c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80021c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1e5      	bne.n	8002198 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d119      	bne.n	8002208 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	330c      	adds	r3, #12
 80021da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021de:	e853 3f00 	ldrex	r3, [r3]
 80021e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80021e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e6:	f023 0310 	bic.w	r3, r3, #16
 80021ea:	677b      	str	r3, [r7, #116]	@ 0x74
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	330c      	adds	r3, #12
 80021f2:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80021f4:	643a      	str	r2, [r7, #64]	@ 0x40
 80021f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80021fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80021fc:	e841 2300 	strex	r3, r2, [r1]
 8002200:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1e5      	bne.n	80021d4 <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002212:	2b00      	cmp	r3, #0
 8002214:	d036      	beq.n	8002284 <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	3314      	adds	r3, #20
 800221c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800221e:	6a3b      	ldr	r3, [r7, #32]
 8002220:	e853 3f00 	ldrex	r3, [r3]
 8002224:	61fb      	str	r3, [r7, #28]
   return(result);
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800222c:	673b      	str	r3, [r7, #112]	@ 0x70
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	3314      	adds	r3, #20
 8002234:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8002236:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002238:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800223a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800223c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800223e:	e841 2300 	strex	r3, r2, [r1]
 8002242:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1e5      	bne.n	8002216 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800224e:	2b00      	cmp	r3, #0
 8002250:	d018      	beq.n	8002284 <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002256:	2200      	movs	r2, #0
 8002258:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800225e:	4618      	mov	r0, r3
 8002260:	f7fe fe05 	bl	8000e6e <HAL_DMA_Abort>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00c      	beq.n	8002284 <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe fe38 	bl	8000ee4 <HAL_DMA_GetError>
 8002274:	4603      	mov	r3, r0
 8002276:	2b20      	cmp	r3, #32
 8002278:	d104      	bne.n	8002284 <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2210      	movs	r2, #16
 800227e:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e052      	b.n	800232a <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	d036      	beq.n	8002300 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	3314      	adds	r3, #20
 8002298:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	e853 3f00 	ldrex	r3, [r3]
 80022a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	3314      	adds	r3, #20
 80022b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80022b2:	61ba      	str	r2, [r7, #24]
 80022b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022b6:	6979      	ldr	r1, [r7, #20]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	e841 2300 	strex	r3, r2, [r1]
 80022be:	613b      	str	r3, [r7, #16]
   return(result);
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1e5      	bne.n	8002292 <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx channel: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d018      	beq.n	8002300 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022d2:	2200      	movs	r2, #0
 80022d4:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe fdc7 	bl	8000e6e <HAL_DMA_Abort>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00c      	beq.n	8002300 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7fe fdfa 	bl	8000ee4 <HAL_DMA_GetError>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b20      	cmp	r3, #32
 80022f4:	d104      	bne.n	8002300 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2210      	movs	r2, #16
 80022fa:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e014      	b.n	800232a <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	84da      	strh	r2, [r3, #38]	@ 0x26
  huart->RxXferCount = 0x00U;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2220      	movs	r2, #32
 8002316:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->gState = HAL_UART_STATE_READY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2220      	movs	r2, #32
 800231e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3780      	adds	r7, #128	@ 0x80
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}

08002332 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8002332:	b480      	push	{r7}
 8002334:	b085      	sub	sp, #20
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800233a:	2300      	movs	r3, #0
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	2300      	movs	r3, #0
 8002340:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002348:	b2db      	uxtb	r3, r3
 800234a:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002352:	b2db      	uxtb	r3, r3
 8002354:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	b2da      	uxtb	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	4313      	orrs	r3, r2
 8002360:	b2db      	uxtb	r3, r3
}
 8002362:	4618      	mov	r0, r3
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	603b      	str	r3, [r7, #0]
 8002378:	4613      	mov	r3, r2
 800237a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800237c:	e03b      	b.n	80023f6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002384:	d037      	beq.n	80023f6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002386:	f7fe fc45 	bl	8000c14 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	6a3a      	ldr	r2, [r7, #32]
 8002392:	429a      	cmp	r2, r3
 8002394:	d302      	bcc.n	800239c <UART_WaitOnFlagUntilTimeout+0x30>
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e03a      	b.n	8002416 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d023      	beq.n	80023f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2b80      	cmp	r3, #128	@ 0x80
 80023b2:	d020      	beq.n	80023f6 <UART_WaitOnFlagUntilTimeout+0x8a>
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b40      	cmp	r3, #64	@ 0x40
 80023b8:	d01d      	beq.n	80023f6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b08      	cmp	r3, #8
 80023c6:	d116      	bne.n	80023f6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 f81d 	bl	800241e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2208      	movs	r2, #8
 80023e8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e00f      	b.n	8002416 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	4013      	ands	r3, r2
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	429a      	cmp	r2, r3
 8002404:	bf0c      	ite	eq
 8002406:	2301      	moveq	r3, #1
 8002408:	2300      	movne	r3, #0
 800240a:	b2db      	uxtb	r3, r3
 800240c:	461a      	mov	r2, r3
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	429a      	cmp	r2, r3
 8002412:	d0b4      	beq.n	800237e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800241e:	b480      	push	{r7}
 8002420:	b095      	sub	sp, #84	@ 0x54
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	330c      	adds	r3, #12
 800242c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800242e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002430:	e853 3f00 	ldrex	r3, [r3]
 8002434:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002438:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800243c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	330c      	adds	r3, #12
 8002444:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002446:	643a      	str	r2, [r7, #64]	@ 0x40
 8002448:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800244a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800244c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800244e:	e841 2300 	strex	r3, r2, [r1]
 8002452:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1e5      	bne.n	8002426 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	3314      	adds	r3, #20
 8002460:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	e853 3f00 	ldrex	r3, [r3]
 8002468:	61fb      	str	r3, [r7, #28]
   return(result);
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	f023 0301 	bic.w	r3, r3, #1
 8002470:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	3314      	adds	r3, #20
 8002478:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800247a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800247c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800247e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002480:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002482:	e841 2300 	strex	r3, r2, [r1]
 8002486:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1e5      	bne.n	800245a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002492:	2b01      	cmp	r3, #1
 8002494:	d119      	bne.n	80024ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	330c      	adds	r3, #12
 800249c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	e853 3f00 	ldrex	r3, [r3]
 80024a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	f023 0310 	bic.w	r3, r3, #16
 80024ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	330c      	adds	r3, #12
 80024b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80024b6:	61ba      	str	r2, [r7, #24]
 80024b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ba:	6979      	ldr	r1, [r7, #20]
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	e841 2300 	strex	r3, r2, [r1]
 80024c2:	613b      	str	r3, [r7, #16]
   return(result);
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1e5      	bne.n	8002496 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2220      	movs	r2, #32
 80024ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80024d8:	bf00      	nop
 80024da:	3754      	adds	r7, #84	@ 0x54
 80024dc:	46bd      	mov	sp, r7
 80024de:	bc80      	pop	{r7}
 80024e0:	4770      	bx	lr
	...

080024e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	430a      	orrs	r2, r1
 8002500:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	431a      	orrs	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	695b      	ldr	r3, [r3, #20]
 8002510:	4313      	orrs	r3, r2
 8002512:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800251e:	f023 030c 	bic.w	r3, r3, #12
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	6812      	ldr	r2, [r2, #0]
 8002526:	68b9      	ldr	r1, [r7, #8]
 8002528:	430b      	orrs	r3, r1
 800252a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	699a      	ldr	r2, [r3, #24]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	430a      	orrs	r2, r1
 8002540:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a2c      	ldr	r2, [pc, #176]	@ (80025f8 <UART_SetConfig+0x114>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d103      	bne.n	8002554 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800254c:	f7ff fc62 	bl	8001e14 <HAL_RCC_GetPCLK2Freq>
 8002550:	60f8      	str	r0, [r7, #12]
 8002552:	e002      	b.n	800255a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002554:	f7ff fc4a 	bl	8001dec <HAL_RCC_GetPCLK1Freq>
 8002558:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	009a      	lsls	r2, r3, #2
 8002564:	441a      	add	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002570:	4a22      	ldr	r2, [pc, #136]	@ (80025fc <UART_SetConfig+0x118>)
 8002572:	fba2 2303 	umull	r2, r3, r2, r3
 8002576:	095b      	lsrs	r3, r3, #5
 8002578:	0119      	lsls	r1, r3, #4
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	009a      	lsls	r2, r3, #2
 8002584:	441a      	add	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002590:	4b1a      	ldr	r3, [pc, #104]	@ (80025fc <UART_SetConfig+0x118>)
 8002592:	fba3 0302 	umull	r0, r3, r3, r2
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	2064      	movs	r0, #100	@ 0x64
 800259a:	fb00 f303 	mul.w	r3, r0, r3
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	3332      	adds	r3, #50	@ 0x32
 80025a4:	4a15      	ldr	r2, [pc, #84]	@ (80025fc <UART_SetConfig+0x118>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025b0:	4419      	add	r1, r3
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	009a      	lsls	r2, r3, #2
 80025bc:	441a      	add	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80025c8:	4b0c      	ldr	r3, [pc, #48]	@ (80025fc <UART_SetConfig+0x118>)
 80025ca:	fba3 0302 	umull	r0, r3, r3, r2
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	2064      	movs	r0, #100	@ 0x64
 80025d2:	fb00 f303 	mul.w	r3, r0, r3
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	3332      	adds	r3, #50	@ 0x32
 80025dc:	4a07      	ldr	r2, [pc, #28]	@ (80025fc <UART_SetConfig+0x118>)
 80025de:	fba2 2303 	umull	r2, r3, r2, r3
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	f003 020f 	and.w	r2, r3, #15
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	440a      	add	r2, r1
 80025ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80025f0:	bf00      	nop
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40013800 	.word	0x40013800
 80025fc:	51eb851f 	.word	0x51eb851f

08002600 <memset>:
 8002600:	4603      	mov	r3, r0
 8002602:	4402      	add	r2, r0
 8002604:	4293      	cmp	r3, r2
 8002606:	d100      	bne.n	800260a <memset+0xa>
 8002608:	4770      	bx	lr
 800260a:	f803 1b01 	strb.w	r1, [r3], #1
 800260e:	e7f9      	b.n	8002604 <memset+0x4>

08002610 <__libc_init_array>:
 8002610:	b570      	push	{r4, r5, r6, lr}
 8002612:	2600      	movs	r6, #0
 8002614:	4d0c      	ldr	r5, [pc, #48]	@ (8002648 <__libc_init_array+0x38>)
 8002616:	4c0d      	ldr	r4, [pc, #52]	@ (800264c <__libc_init_array+0x3c>)
 8002618:	1b64      	subs	r4, r4, r5
 800261a:	10a4      	asrs	r4, r4, #2
 800261c:	42a6      	cmp	r6, r4
 800261e:	d109      	bne.n	8002634 <__libc_init_array+0x24>
 8002620:	f000 f81a 	bl	8002658 <_init>
 8002624:	2600      	movs	r6, #0
 8002626:	4d0a      	ldr	r5, [pc, #40]	@ (8002650 <__libc_init_array+0x40>)
 8002628:	4c0a      	ldr	r4, [pc, #40]	@ (8002654 <__libc_init_array+0x44>)
 800262a:	1b64      	subs	r4, r4, r5
 800262c:	10a4      	asrs	r4, r4, #2
 800262e:	42a6      	cmp	r6, r4
 8002630:	d105      	bne.n	800263e <__libc_init_array+0x2e>
 8002632:	bd70      	pop	{r4, r5, r6, pc}
 8002634:	f855 3b04 	ldr.w	r3, [r5], #4
 8002638:	4798      	blx	r3
 800263a:	3601      	adds	r6, #1
 800263c:	e7ee      	b.n	800261c <__libc_init_array+0xc>
 800263e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002642:	4798      	blx	r3
 8002644:	3601      	adds	r6, #1
 8002646:	e7f2      	b.n	800262e <__libc_init_array+0x1e>
 8002648:	080027d0 	.word	0x080027d0
 800264c:	080027d0 	.word	0x080027d0
 8002650:	080027d0 	.word	0x080027d0
 8002654:	080027d4 	.word	0x080027d4

08002658 <_init>:
 8002658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800265a:	bf00      	nop
 800265c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800265e:	bc08      	pop	{r3}
 8002660:	469e      	mov	lr, r3
 8002662:	4770      	bx	lr

08002664 <_fini>:
 8002664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002666:	bf00      	nop
 8002668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800266a:	bc08      	pop	{r3}
 800266c:	469e      	mov	lr, r3
 800266e:	4770      	bx	lr
